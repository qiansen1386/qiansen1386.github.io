<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>东方孤思子のBlog
Paris·Qian Sen</title>
    <link>https://parisqian.com/tags/%E5%89%8D%E7%AB%AF/index.xml</link>
    <description>Recent content on 东方孤思子のBlog
Paris·Qian Sen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <atom:link href="https://parisqian.com/tags/%E5%89%8D%E7%AB%AF/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>IndexedDB 2.0 更新了！</title>
      <link>https://parisqian.com/post/2017/04/indexeddb-2-0-is-now-supported</link>
      <pubDate>Wed, 26 Apr 2017 15:14:31 +0800</pubDate>
      
      <guid>https://parisqian.com/post/2017/04/indexeddb-2-0-is-now-supported</guid>
      <description>

&lt;h2 id=&#34;indexeddb-2-0-is-now-supported&#34;&gt;IndexedDB 2.0 is now supported&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;IndexedDB 是一个浏览器内置的 NoSQL 底层实现，它允许你存储简单值以及结构化数据。不过即便是在 Mozilla 的手册上 （&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API&#34; target=&#34;_blank&#34;&gt;IndexedDB - Web API 接口 | MDN&lt;/a&gt;）也是推荐使用第三方封装的库而非直接调用这个 API。Hacker News 上更是招来一片有关 API复杂，没有 SQL 功能的抱怨。这也就是为什么截止到 2017 四月 26 日。整个互联网上有关 IndexedDB 2.0 的中文内容是 0（A big flat zero）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;IndexedDB 就是一个简单的 NoSQL 实现，你可以在其上自行封装 API，甚至于封装一个 SQL 语法接口也未尝不可。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;题外话：因为所有 WebSQL 的实现背后都是 SQLite，所以委员会觉得这个提案已经不太可能进行标准化了。对于委员会的人来说，写一个 SQLite 的说明文件当标准，实在没有意义了。标准的价值就在于统筹多个实现，而因为只有一个实现，标准也就没有了价值。喜欢 SQLite 你就用 WebSQL 就行，反正不同实现的背后都是它。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;根据 &lt;a href=&#34;https://www.chromestatus.com/feature/5812621622116352&#34; target=&#34;_blank&#34;&gt;Chrome 的功能状态日志&lt;/a&gt; ，2.0 包括以下功能：
* Binary keys（二进制的键，准确讲是 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&#34; target=&#34;_blank&#34;&gt;Arraybuffer&lt;/a&gt;、&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&#34; target=&#34;_blank&#34;&gt;typed array objects&lt;/a&gt;，和
 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView&#34; target=&#34;_blank&#34;&gt;DataView&lt;/a&gt; 加索引）
* Object store（对象存储）
* index renaming（索引重命名）
* getKey() on IDBObjectStore
* getPrimaryKey() on IDBIndex&lt;/p&gt;

&lt;p&gt;总体上而言是对旧 API 的补完，如果你不了解第一代，建议先把第一代用起来，因为第一代的浏览器支持已经很全面，甚至包括 IE10。而 2.0 的更新对数据库作者们而言更是喜大普奔，解决了一些之前的顽疾。期待有更多基于 IndexedDB 的好库涌现。如果你习惯 Mongo 或者 Firebase 这类 NoSQL 的话，直接用或自己做个简单封装也未尝不可。（不过话说他的 API 真的是炒鸡强大也炒鸡复杂）&lt;/p&gt;

&lt;blockquote&gt;
&lt;h4 id=&#34;mozilla-开发博客的-博文-1-摘要&#34;&gt;Mozilla 开发博客的&lt;a href=&#34;https://news.ycombinator.com/item?id=12793996&#34; title=&#34;\[1\] What’s new in IndexedDB 2.0? | Hacker News（上文的吐槽）&amp;quot;(https://news.ycombinator.com/item?id=12793996&#34; target=&#34;_blank&#34;&gt;博文&lt;/a&gt;摘要&lt;/h4&gt;

&lt;h5 id=&#34;setters-to-idbobjectstore-name-and-idbindex-name&#34;&gt;Setters to &lt;code&gt;IDBObjectStore.name&lt;/code&gt; and &lt;code&gt;IDBIndex.name&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;之前版本的 Index 你可以增减对象存储或索引的方式来升级数据架构，但是并不能重命名。基本上，这意味着你永远没法准确命名，因为随着时间的推移，很多东西的内在含义都可能会发生变化。而现在可以对数据库架构进行更好地升级修改：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let request = indexedDB.open(&amp;quot;messageDB&amp;quot;, 2);
request.onupgradeneeded = (event) =&amp;gt; {
  let txn = event.target.transaction;
  let store = txn.objectStore(&amp;quot;text messages&amp;quot;);

  store.name = &amp;quot;mobile messages&amp;quot;;
  let index = store.index(&amp;quot;recipient&amp;quot;);
  index.name = &amp;quot;recipients&amp;quot;;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;#####&lt;code&gt;IDBDatabase.onclose()&lt;/code&gt;
新加了一个数据库的生命周期钩子 &lt;code&gt;close&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let request = indexedDB.open(&amp;quot;bookstore&amp;quot;);
request.onsuccess = (event) =&amp;gt; {
  let db = event.target.result;

  db.onclose = (event) =&amp;gt; {
    alert(&amp;quot;the database: &amp;quot; + db.name + &amp;quot;was closed outside the script!&amp;quot;);
  };
};
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;。。。 更多内容请&lt;a href=&#34;https://news.ycombinator.com/item?id=12793996&#34; title=&#34;\[1\] What’s new in IndexedDB 2.0? | Hacker News（上文的吐槽）&amp;quot;(https://news.ycombinator.com/item?id=12793996&#34; target=&#34;_blank&#34;&gt;参考原文（En）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;浏览器支持&#34;&gt;浏览器支持&lt;/h4&gt;

&lt;p&gt;Firefox 51，Chrome 58，Opera release 45&lt;/p&gt;

&lt;h4 id=&#34;结语&#34;&gt;结语&lt;/h4&gt;

&lt;p&gt;有鉴于 Chrome 58 的开发公告中，着重提到了 IndexedDB 2.0 这里就简单解释下:&lt;strong&gt;是什么&lt;/strong&gt;和&lt;strong&gt;为了什么&lt;/strong&gt;。目的是为了帮助你了解这个规范背后的逻辑，或者你就当个新闻看也成。至于怎么用，请自行参考 MDN 的手册，或者去 &lt;a href=&#34;https://github.com/search?utf8=%E2%9C%93&amp;amp;q=indexedDB+Wrapper&#34; target=&#34;_blank&#34;&gt;github 上搜索 indexedDB Wrapper&lt;/a&gt;。我因为还没有重度使用过它就不献丑了。&lt;/p&gt;

&lt;h4 id=&#34;ref&#34;&gt;Ref:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hacks.mozilla.org/2016/10/whats-new-in-indexeddb-2-0/&#34; target=&#34;_blank&#34;&gt;[0]  What’s new in IndexedDB 2.0? ★ Mozilla Hacks（原文）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=12793996&#34; title=&#34;\[1\] What’s new in IndexedDB 2.0? | Hacker News（上文的吐槽）&amp;quot;(https://news.ycombinator.com/item?id=12793996&#34; target=&#34;_blank&#34;&gt;[1] What’s new in IndexedDB 2.0? | Hacker News（上文的吐槽）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://w3c.github.io/IndexedDB/&#34; target=&#34;_blank&#34;&gt;[2]  Indexed Database API 2.0 - Editor’s Draft, 21 April 2017&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Frontend Learning Notes 2 - Direction Shifted</title>
      <link>https://parisqian.com/post/2016/04/frontend-learning-note-2</link>
      <pubDate>Sun, 03 Apr 2016 16:40:00 +0000</pubDate>
      
      <guid>https://parisqian.com/post/2016/04/frontend-learning-note-2</guid>
      <description>

&lt;h2 id=&#34;my-confession&#34;&gt;My Confession&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Only the ignorant person fears nothing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I gotta say that I was way too over ambitious about the frontend stack. When companys like Google and Mozilla start to push the standardization of new innovations of the Web. The frontend standards keeps changing everyday, so does the Toolchain. Chasing the tool could be harmful, so I realised a realistic learning plan could be more benificial for me.
After a few days of extensive research, my mind changed. The more I learn, I become less bold, so that I become more and more eager for a shorter learning curve. Compareing with &amp;ldquo;Flawless on paper&amp;rdquo;, I prefer a more practical stack.
Here is what I learnt:&lt;/p&gt;

&lt;h3 id=&#34;postcss-scss&#34;&gt;&lt;code&gt;PostCSS&lt;/code&gt; =&amp;gt; &lt;code&gt;SCSS&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;I know the PostCSS is the future, and CssNext/preCss plugins appears like a great replacement of Scss. Also according to Boostrap &amp;amp; many others SCSS is way better than LESS. But then I find that if I want to custom and build Boostrap, I have to import SCSS anyway. So SCSS+Autoprefixer beat my original ideal buy ignorant plan.&lt;/p&gt;

&lt;h3 id=&#34;build-tool-module-bundler&#34;&gt;Build Tool &amp;amp; Module Bundler&lt;/h3&gt;

&lt;p&gt;There is a little bit backgound I have learnt.
- &lt;a href=&#34;http://gulpjs.com/&#34; target=&#34;_blank&#34;&gt;gulp&lt;/a&gt; beats &lt;a href=&#34;http://gruntjs.com/&#34; target=&#34;_blank&#34;&gt;grunt&lt;/a&gt;.
- &lt;a href=&#34;https://webpack.github.io&#34; target=&#34;_blank&#34;&gt;Webpack&lt;/a&gt; beats &lt;a href=&#34;http://gbrowserify.org&#34; target=&#34;_blank&#34;&gt;browserify&lt;/a&gt; beats &lt;a href=&#34;http://grequirejs.org&#34; target=&#34;_blank&#34;&gt;RequireJS&lt;/a&gt;.
- &lt;del&gt;With the viral of &lt;code&gt;NodeJS&lt;/code&gt;, &lt;code&gt;CommonJs&lt;/code&gt; becomes the de facto standard importing syntax(I believe). It Beats AMD, CMD and otheres, moreover &lt;code&gt;ES6 module&lt;/code&gt; is compatiable with it, so it is also future-proof.&lt;/del&gt;(Completely Wrong&amp;hellip;explained below)
- Webpack is capable to do some jobs of gulp.&lt;/p&gt;

&lt;p&gt;I was thinking of using gulp + webpack. But since nowadays, webpack have plenty of plugins and loaders, and most importantly, I found at least 2 boostrap-loaders which claims that they can process Boostrap v4. I can simply say good bye to Gulp. &lt;em&gt;I might meet you again, don&amp;rsquo;t know why, don&amp;rsquo;t know when, but I might meet you again some other day~&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Webpack can minify Js, provide source map for dev stage, build SCSS, build typescript, build Vue/JSX, build Boostrap, include jQuery support without expose global access to it, process PostCSS(Autoprefixer), custom the dist path, watch the dev folder, live-reload. What else do you need? What else do you need? What else do you need?&lt;/p&gt;

&lt;h3 id=&#34;keep-practicing&#34;&gt;Keep Practicing&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;It is the only way to reveal the imperfection of your tool and to pursue perfection of understanding at the same time!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before practise, you won&amp;rsquo;t know if the tool is gonna suit your needs.
That is exactly why I dropped the semantic UI, because it follows &amp;ldquo;&lt;em&gt;Convention over Configuation&lt;/em&gt;&amp;rdquo;, so it has to sacrifice &amp;ldquo;&lt;em&gt;Explicit is better than implicit&lt;/em&gt;&amp;ldquo;&lt;small&gt;*Refering to &lt;a href=&#34;https://www.python.org/dev/peps/pep-0020/&#34; target=&#34;_blank&#34;&gt;The Zen of Python&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Before practise, you won&amp;rsquo;t know NodeJS have many dependency issue with Windows platform, so the &lt;code&gt;Vagrant&lt;/code&gt; become mandatory! no longer &lt;em&gt;Good to have&lt;/em&gt;. That is a good thing also, If I could compose my &lt;code&gt;Vagrantfile&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Nevertheless, this is absolutely worth our attention. However, it is neither stable nor mature. &lt;a href=&#34;https://blogs.windows.com/buildingapps/2016/03/30/run-bash-on-ubuntu-on-windows/&#34; target=&#34;_blank&#34;&gt;https://blogs.windows.com/buildingapps/2016/03/30/run-bash-on-ubuntu-on-windows/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;again-references&#34;&gt;Again, references&lt;/h2&gt;

&lt;h3 id=&#34;nodejs&#34;&gt;NodeJS:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/pU9Q6oiQNd0&#34; target=&#34;_blank&#34;&gt;What is Node.js Exactly? - a beginners introduction to Nodejs(YouTube)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/HkFlM73G-hk?list=PLoYCgNOIyGABs-wDaaxChu82q_xQgUb4f&#34; target=&#34;_blank&#34;&gt;Modular Javascript - Javascript Tutorial on the Object Literal Pattern(YouTube)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;webpack&#34;&gt;WebPack:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/TaWKUpahFZM&#34; target=&#34;_blank&#34;&gt;Getting Started with webpack(YouTube)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/9kJVYpOqcVU&#34; target=&#34;_blank&#34;&gt;Webpack Tutorial - Replace Gulp/Grunt plugins with a single tool(YouTube)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/vajoy/p/4650467.html&#34; target=&#34;_blank&#34;&gt;一小时包教会 —— webpack 入门指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zhuanlan.zhihu.com/p/20367175&#34; target=&#34;_blank&#34;&gt;Webpack傻瓜式指南（一）- 张轩(知乎)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zhuanlan.zhihu.com/p/20367175&#34; target=&#34;_blank&#34;&gt;Webpack傻瓜指南（二）开发和部署技巧- 张轩(知乎)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;vue&#34;&gt;Vue:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://vuejs.org/guide/&#34; target=&#34;_blank&#34;&gt;Getting Started - vue.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://vuejs.org.cn/guide/&#34; target=&#34;_blank&#34;&gt;VueJs 官方指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://vuex.vuejs.org/zh-cn/quickstart.html&#34; target=&#34;_blank&#34;&gt;Vuex 官方指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://router.vuejs.org/zh-cn/basic.html&#34; target=&#34;_blank&#34;&gt;Vue-router 官方指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sally-xiao.gitbooks.io/book/content/index.html&#34; target=&#34;_blank&#34;&gt;如何用Vue.js来搭建一个简易的APP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;vagrant&#34;&gt;Vagrant:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/Dji9ALCgfpM&#34; target=&#34;_blank&#34;&gt;Ruby Programming in One Video(Youtube)&lt;/a&gt;: In one video series is great for syntax-learning.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.vagrantup.com/docs/&#34; target=&#34;_blank&#34;&gt;VAGRANT DOCUMENTATION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/drmyersii/vagrant-node-env&#34; target=&#34;_blank&#34;&gt;vagrant-node-env(Github)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/laravel/homestead&#34; target=&#34;_blank&#34;&gt;laravel/homestead(Github)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;page-load-effect&#34;&gt;Page Load Effect:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://javascript.nwbox.com/ContentLoaded/&#34; target=&#34;_blank&#34;&gt;ContentLoaded(2010)&lt;/a&gt; A page load library,used by webpack.github.io&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codyhouse.co/gem/animated-page-transition/&#34; target=&#34;_blank&#34;&gt;Animated page trasition&lt;/a&gt; Worth investigation&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/browserstate/history.js&#34; target=&#34;_blank&#34;&gt;History.js&lt;/a&gt; Need no introduction&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.fasw.ws/faswwp/non-jquery-page-transitions-lightweight/&#34; target=&#34;_blank&#34;&gt;Non-Jquery Page Transitions lightweight&lt;/a&gt; A great proof of concept&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://turbo-react.herokuapp.com/&#34; target=&#34;_blank&#34;&gt;TurboReact&lt;/a&gt; A react based implementation&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/turbolinks/turbolinks&#34; target=&#34;_blank&#34;&gt;Turbolinks&lt;/a&gt; extraction of above solution, the best library to use by far&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;corrigendum&#34;&gt;Corrigendum&lt;/h2&gt;

&lt;h3 id=&#34;es6-modules-is-not-an-official-recognition-of-commonjs&#34;&gt;ES6 Modules is not an official recognition of CommonJS&lt;/h3&gt;

&lt;p&gt;ECMAScript 6 modules is a completely different thing, comparing with &lt;code&gt;CommonJs&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First of all, ES6 Modules are statically loaded!!!!&lt;/li&gt;
&lt;li&gt;Then It requires all the dependencies to be fully imported at the beginning.&lt;/li&gt;
&lt;li&gt;So that the tricks like &lt;code&gt;tree-shaking&lt;/code&gt; becomes possible. (AST parsing becomes much more effient and easy)&lt;/li&gt;
&lt;li&gt;There is performance improvement as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Can&amp;rsquo;t believe how assertive I was.&lt;/p&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.2ality.com/2014/09/es6-modules-final.html&#34; target=&#34;_blank&#34;&gt;ECMAScript 6 modules: the final syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.2ality.com/2015/12/webpack-tree-shaking.html&#34; target=&#34;_blank&#34;&gt;Tree-shaking with webpack 2 and Babel 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rollupjs.org/&#34; target=&#34;_blank&#34;&gt;Rollup.js - The next-generation JavaScript module bundler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/41922432/answer/93346223&#34; target=&#34;_blank&#34;&gt;如何评价 Webpack 2 新引入的 Tree-shaking 代码优化技术？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://benjamn.github.io/empirenode-2015&#34; target=&#34;_blank&#34;&gt;The Importance of import and export by Ben Newman on EmpireNode 2015 &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Frontend Learning Notes - Starting Point</title>
      <link>https://parisqian.com/post/2016/03/frontend-learning-note-1</link>
      <pubDate>Wed, 16 Mar 2016 07:03:51 +0000</pubDate>
      
      <guid>https://parisqian.com/post/2016/03/frontend-learning-note-1</guid>
      <description>

&lt;p&gt;Recently, I have migrated to Hugo Site generator as you can see. I was pretty disappointed with most of the theme.
Even those great themes seem to have flaws, or require customization. And then I thought, if none of the theme is perfect
for me, why not craft one by my own. Since I always been fascinated by the frontend development, I take it as a
oppertunaty to bring my frontend skill sets to another level.&lt;/p&gt;

&lt;p&gt;So I created the stupid &lt;a href=&#34;github.com/qiansen1386/hugo-polygon-theme&#34; target=&#34;_blank&#34;&gt;hugo-polygon-theme&lt;/a&gt;. I have got to say, the name is pretty arbitrary.
Even worse, I don&amp;rsquo;t have a clue even after I started. I start to realised that I need to have more input before I make an output.
Hence, I started my long-term(supposed to be) voyage. Here are the resources that absolutely worth more attention.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some of the resources are written in Chinese. Sorry for the inconvenience, coz those materials are slightly easier for me to understand.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;html5&#34;&gt;HTML5:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://html5boilerplate.com/&#34; target=&#34;_blank&#34;&gt;H5 boilerplate&lt;/a&gt; (Html5 boilerplate)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/h5bp/html5-boilerplate/blob/5.3.0/dist/doc/usage.md&#34; target=&#34;_blank&#34;&gt;H5 boilerplate Docs&lt;/a&gt; (Html5 boilerplate)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.initializr.com/builder?print&amp;amp;h5bp-content&amp;amp;modernizr&amp;amp;h5bp-chromeframe&amp;amp;h5bp-analytics&amp;amp;h5bp-favicon&amp;amp;h5bp-robots&amp;amp;h5bp-humans&amp;amp;h5bp-404&amp;amp;h5bp-adobecrossdomain&amp;amp;h5bp-css&amp;amp;h5bp-csshelpers&amp;amp;h5bp-mediaqueryprint&amp;amp;h5bp-mediaqueries&amp;amp;simplehtmltag&amp;amp;izr-emptyscript&#34; title=&#34;H5 boilerplate my custom build (a minimized version)&#34; target=&#34;_blank&#34;&gt;H5 boilerplate my custom build (a minimized version)&lt;/a&gt; (Html5 boilerplate)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;css&#34;&gt;CSS:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://semantic-ui.com/&#34; target=&#34;_blank&#34;&gt;Semantic UI&lt;/a&gt; (LESS)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://davidtheclark.com/excited-about-postcss/&#34; target=&#34;_blank&#34;&gt;Excited about postcss &amp;ndash; DAVID CLARK&lt;/a&gt; (PostCSS)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://benfrain.com/breaking-up-with-sass-postcss/&#34; target=&#34;_blank&#34;&gt;Breaking up with Sass: it’s not you, it’s me &amp;ndash; Ben Frain&lt;/a&gt; (PostCSS)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://twin.github.io/css-preprocessing-drama/&#34; target=&#34;_blank&#34;&gt;CSS Preprocessing Drama&lt;/a&gt; (PostCSS)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ai/about-postcss/blob/master/speech.md&#34; target=&#34;_blank&#34;&gt;Speech of &amp;ldquo;About-postcss&amp;rdquo; &amp;ndash; AI&lt;/a&gt; (PostCSS)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ashleynolan.co.uk/blog/postcss-a-review&#34; target=&#34;_blank&#34;&gt;PostCSS – Sass Killer or Preprocessing Pretender?&lt;/a&gt; (PostCSS)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://learnlayout.com/&#34; target=&#34;_blank&#34;&gt;Learn CSS Layout(I18N-provided)&lt;/a&gt; (CSS fundamentals)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itmyhome.gitbooks.io/css/content/&#34; target=&#34;_blank&#34;&gt;CSS 编码规范&lt;/a&gt; (CSS fundamentals)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://arguseye.gitbooks.io/postcss/content/plugins.html&#34; target=&#34;_blank&#34;&gt;PostCSS的相关知识&lt;/a&gt; (PostCSS)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;js&#34;&gt;JS:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://davidbcalhoun.com/2014/what-is-amd-commonjs-and-umd/&#34; target=&#34;_blank&#34;&gt;What Is AMD, CommonJS, and UMD?&lt;/a&gt; (Loading)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/TypeScript&#34; target=&#34;_blank&#34;&gt;TypeScript &amp;ndash;维基百科&lt;/a&gt; (TypeScript)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/smartkid/archive/2012/10/05/A_First_Look_Of_TypeScript.html&#34; target=&#34;_blank&#34;&gt;Typescript 初体验&lt;/a&gt; (TypeScript)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhongsp.gitbooks.io/typescript-handbook/content/&#34; target=&#34;_blank&#34;&gt;TypeScript Handbook（中文版）&lt;/a&gt; (TypeScript)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.75team.com/archives/882&#34; target=&#34;_blank&#34;&gt;[译]神马是AMD, CommonJS, UMD?&lt;/a&gt; (Translation of &amp;ldquo;What Is AMD, CommonJS, and UMD?&amp;rdquo;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;best-practics&#34;&gt;Best Practics&lt;/h3&gt;

&lt;p&gt;-&lt;a href=&#34;http://xiaodongtongxue.github.io/2016/03/21/Web%E5%89%8D%E7%AB%AF%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/&#34; target=&#34;_blank&#34;&gt;HTML5、CSS3、ES6编程规范 by 小栋同学&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>