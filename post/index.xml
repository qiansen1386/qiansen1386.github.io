<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 东方孤思子のBlog
Paris·Qian Sen</title>
    <link>https://parisqian.com/post/</link>
    <description>Recent content in Posts on 东方孤思子のBlog
Paris·Qian Sen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 21 Jan 2017 11:24:58 +0800</lastBuildDate>
    <atom:link href="https://parisqian.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Free will is hard</title>
      <link>https://parisqian.com/post/2017/01/free-will-is-hard</link>
      <pubDate>Sat, 21 Jan 2017 11:24:58 +0800</pubDate>
      
      <guid>https://parisqian.com/post/2017/01/free-will-is-hard</guid>
      <description>&lt;p&gt;Somebody developed a sophisticated way of  humiliating people, discouraging people, depressing people, in order to ultimately manipulate them by enforcing and utilizing their diffidence. Those who do are usually incompetent, but whom they controlled are usually outstanding. F**k!&lt;/p&gt;

&lt;p&gt;Free will is what I advocate, thus stockholm syndrome is what I hated the most. For parrents of those lost generation, If u are not willing to nourish ur children with love don&amp;rsquo;t give birth to them at the first place. As a human, I am begging u to derive power from ur deep heart and learn to be your own master.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remember life might be tough but always fair.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;reference： &lt;a href=&#34;https://www.zhihu.com/question/54959260&#34; target=&#34;_blank&#34;&gt;男友说“我们适合先从炮友做起再发展到结婚的对象”，这真的好吗？&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>什么是幸存者偏差啊啊啊啊！！！</title>
      <link>https://parisqian.com/post/2017/01/survivorship-bias-explained</link>
      <pubDate>Thu, 19 Jan 2017 23:34:14 +0800</pubDate>
      
      <guid>https://parisqian.com/post/2017/01/survivorship-bias-explained</guid>
      <description>

&lt;p&gt;Survivorship Bias? Explained!
定义：&lt;strong&gt;一种由于忽视信息的收集筛选过程，而造成的分析误差。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;#案例学习一：
&lt;strong&gt;基于一样的筛选模型反复得出同样的结论而加重错误的&lt;a href=&#34;https://zh.wikipedia.org/zh/刻板印象&#34; target=&#34;_blank&#34;&gt;刻板印象&lt;/a&gt;，从而在全社会上引起歧视性心理。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;刻板印象-胸大无脑&#34;&gt;刻板印象：“胸大无脑”&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;漂亮女孩都是傻逼&lt;/p&gt;

&lt;p&gt;人天赋是恒定的，美貌点得多，智商就少。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;你们对漂亮女生的歧视实在太严重了！请尊重现实：很多人长得不漂亮，也不聪明。&lt;/p&gt;

&lt;p&gt;那么真实的情况是如何呢？&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;♂模拟场景♀&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;平庸&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;优秀&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;女&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;普通のGirl&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;杰出のGirl&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;男&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;普通のBoy&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;MiBoy&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;假设他们各自的数量都是8，吉利嘛。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;嬲&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;平庸&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;优秀&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;女&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;男&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;接下来，再模拟一个象限，这次坐标值换成颜值！然后把两个象限叠加起来，构建新的模型！&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;平庸：优秀&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;不美&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;美&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;女&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;女屌：女生&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;花瓶：女神&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;男&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;男屌：男生&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;傻白甜：男神&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;理论上，假定美丑和智商没有相关性。那么优秀与平庸应该是平均分布在新象限内的！&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;不美&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;美&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;女&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4:4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4:4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;男&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4:4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4:4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;（妈蛋，好不吉利）&lt;/p&gt;

&lt;p&gt;如你所见如果世界是完美的，那么聪明的美女应该和聪明的帅哥一样多。
可是这貌似和我们的意识不相符啊！我们明明觉得异性里面傻逼比较多嘛。直男直女多到爆嘛。究竟是怎么样一回事嘞！&lt;/p&gt;

&lt;p&gt;Here we 狗！接下来就是揭wo晓lai答zhuang案bi的时候了！&lt;/p&gt;

&lt;p&gt;因为人类会对性取向的性别过分关注啊！由此减少了对同性（排除同和双）的关注！
又因为人类不会太在乎比自己差劲的人啊！由此减少了对平庸人群的关注啊！
为了简化计算，我们假设一个是异性恋女生，她应该不会太在乎一般的女生……&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;女生少了一半诶！&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;平庸&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;优秀&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;女&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;del&gt;普通のGirl&lt;/del&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;杰出のGirl&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;男&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;普通のBoy&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;爱国Boy&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;然后再把这个数据导入到新的象限就不得了咯&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;不美&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;美&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;女&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0:4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0:4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;男&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4:4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4:4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;看！在男生里，找一个优秀帅哥的几率是25%。而在女生里找一个完美女神的概率是50%诶！！所以你会觉得找到一个完美男神简直难啊！男上佳-&amp;gt;难啊！
如果这些优秀帅哥都都比较早熟早早成家立业呢。情况就更加不妙了。比方说……被其他女生抢走了3位。已婚=隐身这是常识吧？除非你是人妻控或者小三迷。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;不美&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;美&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;女&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0:4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;0:4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;男&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4:4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4:1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;额，神tm只剩7.6%的概率遇到他了好不好。还没完哦，此时是不是平庸帅哥比有内涵的帅哥的概率高了4倍呢？如果你按照上面的筛选流程走下来，你简直觉得异性都是傻逼是“绝对の真理”啊！
然而，如你所见，你，只是，眼中只剩，“幸存者”了而已。因为你主动去忽略掉了那些对你而言不重要的因素，而使得你的判断产生了巨大的误差啊。
从今天起，重新审视一下，你身边长得又丑，智商又低的同性吧！你就不会觉得异性都是傻逼了呢。然后就可以因为比下有余而志得意满，继续浑浑噩噩得生活下去了呢！怎么样，窝这锅（毒）鸡汤可还美味啊！&lt;/p&gt;

&lt;p&gt;reference：一个讲为什么你觉得漂亮女孩都不优秀的英文动画视频，原视频找不到了，希望大家如果知道可以提供下资源。&lt;/p&gt;

&lt;h2 id=&#34;女司机&#34;&gt;女司机&lt;/h2&gt;

&lt;p&gt;同理，社会上流行着：女司机开车慢，反应慢，油门刹车分不清楚，女司机磨合期头次上路成为“女魔头”，等等歧视性的刻板印象。可实际上，分析一下整体数据，你会发现，女司机开车比男司机谨慎安全很多，事故比例小很多。
reference：飞碟说&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如果下次再有人跟你说，女生都是XXX，你就可以义正言辞地告诉他：&lt;strong&gt;这是幸存者偏差啊！&lt;/strong&gt;然后你就被讨厌了……科科
（最近比较迷两个台湾的视频Up主谷阿莫和&lt;a href=&#34;https://www.youtube.com/channel/UCIF_gt4BfsWyM_2GOcKXyEQ&#34; target=&#34;_blank&#34;&gt;啾啾鞋&lt;/a&gt;）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;案例学习二&#34;&gt;案例学习二：&lt;/h1&gt;

&lt;p&gt;结论与筛选步骤强相关，与群体属性弱相关。但是分析原因的时候忽略筛选环节。
这里面有无意识忽略的行为，也有有意识忽略从而刻意进行误导的坏人～( TロT)σ&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;成功学：“XXX成功是因为XXX啊，科科”。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;说起来好像很有道理，但是实际上是说罗圈话，放罗圈屁。他成功了，从他身上提炼出任何特质都可以附会上去。可本质上依旧是“他成功，所以他成功”，这些特质本身可能并无明显因果关系。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;e.g. 乔布斯是男的，雷军是男的，柳传志是男的，任正非是男的。所以要成为成功的企业家必须是男性。其实是有选择的筛选出了大量的男性成功企业家。如果有选择性的筛选出落魄的男乞丐，最后的结论很可能就是：男性很容易沦为乞丐。这个例子很显眼，但是很多数据分析是不把筛选过程告诉你的。所以原始数据很重要！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;结语：很多地域歧视和打标签的现象都是因为刻板印象，而刻板印象的形成很大一部分原因是因为幸存者偏差。本质上人处理信息的手段就是要归纳世界信息为有限的标签，由此才能按图索骥，梳理思路。可惜的是这个过程必然丢失细节，而给误导言论以可乘之机。而幸存者偏差只是种类繁多的误导手段中的一种，而其他的手段，包括进来流行的数据误导，就不是本篇的内容了。欢迎大家多思考少受骗，待人以真诚而不要以有色眼镜视人。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;比戴有色眼镜看人更危险的是，你带着有色眼镜，还不自知！ —— 网络视频作者抽风&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>DTO, Entity, Value Object, POJO/POCO/POPO 的区别</title>
      <link>https://parisqian.com/post/2016/08/dto-vs-value-object-vs-poco</link>
      <pubDate>Mon, 29 Aug 2016 17:54:45 +0800</pubDate>
      
      <guid>https://parisqian.com/post/2016/08/dto-vs-value-object-vs-poco</guid>
      <description>

&lt;h2 id=&#34;dto-vs-entity-vs-value-object-vs-pojo-poco-popo&#34;&gt;DTO vs Entity vs Value Object vs POJO/POCO/POPO&lt;/h2&gt;

&lt;p&gt;Definations:&lt;/p&gt;

&lt;p&gt;DTO =&amp;gt; Data Transfer Object, a object which contains no logics, used to pass through application bounderies.&lt;/p&gt;

&lt;p&gt;Entity =&amp;gt; Value Object + identity.(We will not talk about Entity in following articles, you get the idea, they are the same)&lt;/p&gt;

&lt;p&gt;Value Object =&amp;gt; Value Object can contains methods&lt;/p&gt;

&lt;p&gt;POJO/POCO/POPO =&amp;gt; Plain Object with/without State(Data properties) + Behavior(methods), both ValueObject &amp;amp; DTO can be considered as POJO.&lt;/p&gt;

&lt;p&gt;ref: &lt;a href=&#34;http://enterprisecraftsmanship.com/2015/04/13/dto-vs-value-object-vs-poco/&#34; target=&#34;_blank&#34;&gt;http://enterprisecraftsmanship.com/2015/04/13/dto-vs-value-object-vs-poco/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Celibate By Choice?</title>
      <link>https://parisqian.com/post/2016/06/celibate-by-choice</link>
      <pubDate>Wed, 22 Jun 2016 23:08:53 +0800</pubDate>
      
      <guid>https://parisqian.com/post/2016/06/celibate-by-choice</guid>
      <description>

&lt;h2 id=&#34;独身主义的女孩&#34;&gt;独身主义的女孩&lt;/h2&gt;

&lt;p&gt;I met a girl today, who was disappointed in love a few months ago. When I was tried to resume her faith on marriage,
she explained a nearly-celibacy idea about that love could inevitably cause both parties to change. Since I couldn&amp;rsquo;t convince her in a rush, I never even tried.&lt;/p&gt;

&lt;p&gt;Everybody changes, they change constently, and they changes both mentally and physically, no matter whether you are in a relationship or not. That is my experience. For me, clinging about whether you will still be you or not would be a compeletely non-sence. Here is a fun fact, every body-cell have their life-span, it could be a few months or few years, or even few days(sperm). Once they reached a end, usually they will be replaced with a new one. Many people believes that 7 years later, there will be no old cells, thus we would become essentially new people. I don&amp;rsquo;t want to argu biologic here, what I want to say is there won&amp;rsquo;t be a INNER-SELF, just no! We only live at this moment, in the next moment, if our moods change we might behave very very differently. If you could not even predict next 5 minutes, why bother about 5 years?&lt;/p&gt;

&lt;p&gt;As I said, I didn&amp;rsquo;t buy her idea at that moment, however when I re-process the whole story, I gotta say I was deeply inspired and influenced by her innocent and wild thoughts. Why? I still remember someone saids &amp;ldquo;a criteria for a good merrage is the life-styles of both parties might shift toward a better healthier way, because of each other&amp;rdquo;. I used to believe it and still do. However, after the conversation I started to question about the opposite side, Like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to defined a healthy life-style?&lt;/li&gt;
&lt;li&gt;What if they couldn&amp;rsquo;t manage to get a common view? (like my father and mather)&lt;/li&gt;
&lt;li&gt;What if they changed towards bad life-styles instead?&lt;/li&gt;
&lt;li&gt;What if there happens to be a party who don&amp;rsquo;t want to compromise or change at all?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Clearly there are tons of challenges awaiting us. I am no psychologist. Hence I could hardly provide her an answer or even a solace. Despite I don&amp;rsquo;t wanna support this idea, delibacy will definitely be more and more popular in the foreseeable future. Let&amp;rsquo;s just face it: woman don&amp;rsquo;t need a man to have a child, youth don&amp;rsquo;t need marriage to having sex. In a truely gander-neuture society like China, a hand from opposite sex are good to have, but never truly necessary(if you can ignore the social pressure from reletives, like your mom).&lt;/p&gt;

&lt;p&gt;There is one thing I can say, uncertainty will bring along fear, but mostly it is born of diffidence. Just like If we are not certain about getting to work, we would probably tend to shun away from it, by, I don&amp;rsquo;t know, extending your study, or procrastinating at home. Everyone experience that mind-transition, to be fair, it might not be very enjoyable. But like what Dory do(An oblivious fish, leading charector of &amp;ldquo;Finding Dory&amp;rdquo;), if you don&amp;rsquo;t know what to do, just keep swiming. eventually you will find your way home! Once you find a job, working will no longer be a uncertain mysterious duanting monster for you. It is just a new way to study, and get paid! Once you find your true love, you probably would find every single change to improve yourself to better fit your mate. If you become happier than ever before, would changes really considered a bad thing? If one of parties refuse to swim forward, severance might not be a bad thing. (ref &amp;ldquo;&lt;a href=&#34;https://en.wikipedia.org/wiki/Who_Moved_My_Cheese%3F&#34; target=&#34;_blank&#34;&gt;Who Moved My Cheese?&lt;/a&gt;&amp;rdquo;)&lt;/p&gt;

&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=530 height=86 src=&#34;https://music.163.com/outchain/player?type=2&amp;id=27678693&amp;auto=1&amp;height=66&#34;&gt;&lt;/iframe&gt;
&lt;iframe src=&#34;https://open.iqiyi.com/developer/player_js/coopPlayerIndex.html?vid=919c8f7392a51b097483dd4e4e57dd81&amp;tvId=201709700&amp;accessToken=2.f22860a2479ad60d8da7697274de9346&amp;appKey=3955c3425820435e86d0f4cdfe56f5e7&amp;appId=1368&amp;height=100%&amp;width=100%&#34; frameborder=&#34;0&#34; allowfullscreen=&#34;true&#34; width=&#34;100%&#34; height=&#34;100%&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Quora：烂程序猿的特征都有啥？</title>
      <link>https://parisqian.com/post/2016/05/what-are-the-characteristics-of-a-bad-software-engineer</link>
      <pubDate>Thu, 12 May 2016 22:47:39 +0800</pubDate>
      
      <guid>https://parisqian.com/post/2016/05/what-are-the-characteristics-of-a-bad-software-engineer</guid>
      <description>

&lt;h2 id=&#34;what-are-the-characteristics-of-a-bad-software-engineer&#34;&gt;What are the characteristics of a bad software engineer?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.quora.com/What-are-the-characteristics-of-a-bad-software-engineer/answer/Nachiket-Naik?srid=3Eg3&#34; target=&#34;_blank&#34;&gt;Originally answered by Nachiket Naik, software developer, artist, reader, writer, thinker and compassionate human being&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;据我观察，烂软件工程师有有以下几种特征：&lt;/p&gt;

&lt;p&gt;In my experience, these are some characteristics of bad software engineers:&lt;/p&gt;

&lt;p&gt;壹 &lt;strong&gt;Stack Overflow 的搬运机器人&lt;/strong&gt;：这类人一发现有报错，就顺手 Google 一下，接着把他们查到的第一个方法拿来试。问题不在于从 stack Overflow 搬运，私以为 SOF 有比任何参考手册和文档都更多的解决方案内容。所以别误会，SOF 即便不是最好也是超好的资源。问题在于他不理解这些方案可能造成的影响，不清楚其适用场景，不确定其是否真正能对应手头的问题。什么都不知道，就瞎 JB 照搬。比起近在眼前的代码和系统，人们反而更愿意去相信网络论坛的说法，这种事我见得多了。&lt;/p&gt;

&lt;p&gt;1) &lt;strong&gt;The Stack Overflow bot&lt;/strong&gt;: This person ran into an error, did a quick Google search and applied the first solution they found. The problem here is not that of copying from Stack Overflow. I think there are more solutions on Stack Overflow than any reference guide or manual. Don&amp;rsquo;t get me wrong, it&amp;rsquo;s a wonderful resource, if not the best. The problem is the robotic application of it without understanding the consequences. The problem is the application of it without fully understanding the context of it and whether it really applies to the current problem at hand. More often than not, I have seen people believe more of what they see on online forums than the code/system in front of them.&lt;/p&gt;

&lt;p&gt;贰 &lt;strong&gt;“老子又不是测试人员”&lt;/strong&gt;：我不用测试我的代码，那是测试人员的工作。即便在这个敏捷开发的方法论已经无比成熟的年代，我也没觉得吃这种态度的人比之前少了多少。人们依旧对测试十分懈怠。一部分源于他们对部署测试环境不感兴趣；另一方面，他们缺乏测试相关的系统知识。（还部分源于开发者社群对测试人员心照不宣的轻视）&lt;/p&gt;

&lt;p&gt;2) &lt;strong&gt;The I-am-not-a-tester&lt;/strong&gt;: I don&amp;rsquo;t need to test the code; that is the job of the testers. I don&amp;rsquo;t think that even in this age of mature Agile methodologies, this attitude has waned. There is still an inertia against testing their code. Part of it comes from lacking the interest to set up a testing environment and partly from lack of coherent knowledge of testing. (Is it also partly due to an unspoken stigma against testers in the developer community.)&lt;/p&gt;

&lt;p&gt;叁 &lt;strong&gt;“我讨厌文档”&lt;/strong&gt;：一些人认为代码文档必须写得很诗意，而他们写不出这种东西，由此推出写文档肯定不是他们的工作范畴。我觉得这是开发长效稳定代码的最大威胁！好的软件不是提供成千上万好功能的软件。好软件是只包含少许功能，却能被众人一直使用，还能被成百上千人查阅、更新、修改。这种对技术交流和精准细致的文档毫不关心的程序猿将成为公司成功的重大阻碍。&lt;/p&gt;

&lt;p&gt;3) &lt;strong&gt;The I-hate-documentation&lt;/strong&gt;: Some people believe that code documentation must be poetic and hence they lack the skill to do it, ergo not their job. In my opinion, these are the #1 foes of sustainable software. Good software is not software that provides a million cool features. Good software is one that has a few good features that are used consistently by many people and read/updated/modified by a thousand. This brand of developers who believes less in technical communication and precise and detailed documentation is the greatest weed to a company&amp;rsquo;s success.&lt;/p&gt;

&lt;p&gt;肆 &lt;strong&gt;代码之丑&lt;/strong&gt;：我的代码能用，然而：（译注：有本书叫代码之美）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;我有表意不明的变量名：x, flag, str, arr 等等&lt;/li&gt;
&lt;li&gt;我写的大多数代码都包含在一个冗长的方法中&lt;/li&gt;
&lt;li&gt;没有缩进（译注：还有乱缩进）&lt;/li&gt;
&lt;li&gt;没有一以贯之的编码规范、风格&lt;/li&gt;
&lt;li&gt;全局变量到处瞎鸡巴放&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这是我个人最反感的一点。这并不代表代码很差，它很可能还是一段颇具巧思的好代码。即便锦帽貂裘，若是丢进了垃圾堆里，也没人找得到它，没人愿意清理它，跟别提佩戴和使用了。（译注：一句明珠暗投，怎么英文说起来这么复杂啊，嘲讽 +1s）&lt;/p&gt;

&lt;p&gt;4) &lt;strong&gt;The ugly&lt;/strong&gt;: My code works, but:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I have variables named x, flag, str, arr, etc.&lt;/li&gt;
&lt;li&gt;Most of what I write is in one giant method.&lt;/li&gt;
&lt;li&gt;There is no indentation.&lt;/li&gt;
&lt;li&gt;No consistent coding convention or style.&lt;/li&gt;
&lt;li&gt;Global variables spewed all over the place, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the most annoying thing for me personally. It&amp;rsquo;s not the issue that the code is bad. It could potentially be the greatest piece of code written. But if a diamond necklace is buried in the debris of the Titanic, nobody will find it, and nobody will want to clean it, wear it, use it.&lt;/p&gt;

&lt;p&gt;伍 &lt;strong&gt;只看重短期利益&lt;/strong&gt;：他写代码；他部署代码；他走了。他不研究业务逻辑，他不在乎学不学得到东西。给他一段代码，他会连夜搞它一整晚，第二天他回给你的是一个已经修好的的软件。除此之外的东西就一概欠奉了。有时候，开发者要有点私心，人应该不仅仅着眼于交活日期，也要注重经手这个项目你能学到什么。&lt;/p&gt;

&lt;p&gt;5) &lt;strong&gt;The short-term investor&lt;/strong&gt;: He codes. He deploys. He moves on. No attempt to learn the problem. No interest in the domain. Just give this guy a piece of code, he will slog on it overnight and hand it over. You got a fix/working software. Nothing more achieved from it. Sometimes, it&amp;rsquo;s important that you have certain selfishness in the developer, one who not only cares about the deadline, but also cares about what he/she got to learn from it.&lt;/p&gt;

&lt;p&gt;陸 &lt;strong&gt;异议人士&lt;/strong&gt;：“这不是老子干的”，“写得shenmegui”，“反正不是我的问题”，“这跟我的修改无关，这是XX组的XXX的错”，“我讨厌这个（每天都 BB 这句话至少 10 次)”，“我没法修这东西，谁搞坏的让谁来修”
呵呵，写这个代码的那货已经不在了，你什么时候走呢？&lt;/p&gt;

&lt;p&gt;6) &lt;strong&gt;The protester&lt;/strong&gt;: &amp;ldquo;I didn&amp;rsquo;t do this&amp;rdquo;. &amp;ldquo;This looks bad&amp;rdquo;. &amp;ldquo;Not my problem&amp;rdquo;. &amp;ldquo;This isn&amp;rsquo;t related really to my fix, but someone way over there made a mistake&amp;rdquo;. &amp;ldquo;I hate this (loop this sentence 10 times a day)&amp;rdquo;, &amp;ldquo;I can&amp;rsquo;t fix this, get the person who made this code to fix it&amp;rdquo;.
The person who coded that mistake has moved on, when will you?&lt;/p&gt;

&lt;p&gt;柒 &lt;strong&gt;独裁者&lt;/strong&gt;：“My way or the highway”（要么听我的要么滚）是他们的信条。他们对人不对事，这是场他们的解决方案与你的解决方案之间的对决。我想这里面肯定有不少争吵。他们会回来指责你的代码，即使你的代码运行良好，测试完善，看起来完全没问题，他们也会很不爽。这些人是工作效率的一大制约，并且在压力来临的时候，他们也是最先崩溃的，最先跳起来指指点点。即便他们是很有经验很好的开发者，他们对团队也是不利的。（译注：个人感觉后面的是在讲情商问题，而且有点主观臆断外加夸大其词。如果你下属的计划很糙，那么由你独裁未必是错，不过注意不要捞过界。工程领域是很黑白分明的，只讲效率不讲人情，真理只有一个的时候，应有当仁不让于师的精神。处处妥协结果做出来的东西没法用是不负责任的做法）&lt;/p&gt;

&lt;p&gt;7) &lt;strong&gt;The dictator&lt;/strong&gt;: My way or the highway is their motto. It&amp;rsquo;s their &amp;ldquo;ideas&amp;rdquo; vs &amp;ldquo;your ideas&amp;rdquo;, not &amp;ldquo;project ideas&amp;rdquo;. It&amp;rsquo;s their solution vs your solution. I bet there will be an argument for sure. Somehow they will keep coming back to a part of code that you implemented. It somehow discomforts them even if it works, tests, and looks perfectly fine. This person is a big bottleneck to productivity and will be the first person to crumble under pressure and start pointing fingers. This person is not good for the team, however experienced/good a developer he may be.&lt;/p&gt;

&lt;p&gt;捌 &lt;strong&gt;怕事鬼&lt;/strong&gt;：当某位 JAVA 程序猿听到他要被迫写一段 Python 代码时，傻掉了。当某位程序猿发现需要改注册表时，慌掉了。当程序猿发现必须往数据库里添些东西的时候，吓哭了。这些人会竭尽所能地避免走出他们的舒适区。他们对触碰系统的某些部分有着非同寻常的迷信忌讳。见得多了，我就明白了，这些现象对新手开发者而言还挺常见的。好的程序猿则更倾向于或快或慢地探索舒适区之外世界。&lt;/p&gt;

&lt;p&gt;8) &lt;strong&gt;The overcautious&lt;/strong&gt;: The Java developer who just froze when he learned that he would have to write a Python script. The developer who panicked on learning that something in the registry needs changing. The developer who cringes at having to input things in the database. These people will do anything to avoid getting out of their comfort zone. They have weird superstitions related to having to touch certain parts of the system. I have learned, from personal experience, that this phenomenon is common with new developers. Good developers show a tendency to slowly/swiftly move out of their comfort zone in exploration.&lt;/p&gt;

&lt;p&gt;玖 &lt;strong&gt;一芥莽夫&lt;/strong&gt;：忘了备份，快照，同时开好多代码的工作目录，忘记登出系统，把生产环境的代码乱放等等。同样，这些也是菜鸟的常见错误，等他们慢慢成长，会变得越来越专业的。&lt;/p&gt;

&lt;p&gt;9) &lt;strong&gt;The careless&lt;/strong&gt;: Forgets to take a backup, snapshots, has multiple working directories of code, leaves system out, prints in production code, etc. Again, this is a newbie tendency and gets better with more professional exposure.&lt;/p&gt;

&lt;p&gt;拾 &lt;strong&gt;懒惰的默认式程序猿？&lt;/strong&gt;他们骄傲于能够快速找到窍门让系统恢复正常。他们总能给目测无比复杂的问题，找到神奇如魔法一般的解决方案。而我的经验是，这些花招里十个有九个是银样蜡枪头，就表面功夫而已。这些差劲的花招早晚有一天会坏掉，而且被迫修复它们的代价会比当下认认真真地修好它所花的时间成本更高。&lt;/p&gt;

&lt;p&gt;10) &lt;strong&gt;The lazy pseudo-hacker&lt;/strong&gt;: They pride themselves at being able to trick the system into working. They find magical solutions to seemingly complex problems. My experience says that 9 out of 10 times, it&amp;rsquo;s just a facade. The hack is bad and will crash sooner or later and will cost much more than having to deal with it, with extra time right now.&lt;/p&gt;

&lt;p&gt;补充：留言，点赞，开新楼之类的废话，不翻译了。
EDIT: Please drop in comments. Maybe we could start a new follow-up question as to how a managers/peers/colleagues could handle these cases because almost all of them can be helped to become better. A design pattern of sorts for fixing programmer smells. :-)&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Updated Dec 5, 2014&lt;/small&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;后记： 我觉得这个篇文章的作者的确点出了几个点，不过就我个人感觉这完全是一种基于过往经验的偏见。举例而言，Linus 就是独裁者；而好的程序猿对代码都有洁癖；天天做恶心的代码，没有人不抱怨的。情商的养育是一个系统的话题，情商不行，干什么都不行，也不光是程序猿了啊。扯多了就扯远了。总之这是篇有水分的文章，有一定的观点但也不能尽信，因为本来美德与恶念就是一体的两面。
另外，程序猿一言不合，拔键盘相向我觉得也挺好理解的吧。不说了，我和同事去医院缝针了。Yes, My patch wins!
好吧，我也是 dictator 型的，my way or no way，我的必然是最简单最好懂也最好维护的方案。不过我一般不强迫他们，如果 Design pattern 的基础不牢固，有些抽象方法你解释给他们，他们也听不懂。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>学舌与跟读 —— 学英语の最速方法！GET√</title>
      <link>https://parisqian.com/post/2016/05/fastest-way-to-learn-english</link>
      <pubDate>Thu, 12 May 2016 22:39:42 +0800</pubDate>
      
      <guid>https://parisqian.com/post/2016/05/fastest-way-to-learn-english</guid>
      <description>

&lt;h2 id=&#34;what-is-the-fastest-way-to-learn-english&#34;&gt;What is the fastest way to learn English?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.quora.com/What-is-the-fastest-way-to-learn-English/answer/Jathon-Thompson?srid=3Eg3&#34; target=&#34;_blank&#34;&gt;Originally answered by Jathon Thompson, I am TESOL certified to teach English.&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;若你想听懂英语，从而更流畅地说，更快速地回应别人。那么，我必须地隆重地安利你尝试下最佳方法——“&lt;strong&gt;学舌与同步跟读法（Parrot and Overshadow Method）&lt;/strong&gt;”&lt;/p&gt;

&lt;p&gt;If you want to be able to hear and understand English that is spoken quickly and be able to respond quickly, then I would say the best way is to try the &amp;ldquo;&lt;strong&gt;Parrot and Overshadow Method.&lt;/strong&gt;&amp;ldquo;&lt;/p&gt;

&lt;p&gt;践行此法，尔等需口头重复你所听到的一切，尝试让你的发音尽可能地贴近原始声线。第一步是鹦鹉学舌（听完重复）。第二步是跟读（同步跟读）。这个方法必须要你确确实实地&lt;big&gt;大声&lt;/big&gt;读出来，才有效。&lt;/p&gt;

&lt;p&gt;In this method, you orally repeat everything that you hear, trying to sound just like the original speaker. First, you parrot (repeat) them. Then, you overshadow (speak at the same time) them. This method only works if you actually speak OUT LOUD.&lt;/p&gt;

&lt;p&gt;学舌最好配合纯正的（由真正的英文母语者编就的）且伴随有音频且内置字幕或台词脚本的英语材料。如：电影，电视节目（剧），广播，新闻网站，等等。只要他有音频加字幕或台本就行（最好内容别太长）。&lt;/p&gt;

&lt;p&gt;Parroting is best used with authentic English material (materials created by actual native speakers) with an audio component and subtitles or a script included. Movies, TV shows, podcasts, news websites, etc. As long as it has audio and a subtitle/script (and it&amp;rsquo;s not too long), you can use it.&lt;/p&gt;

&lt;p&gt;介绍下机理：&lt;/p&gt;

&lt;p&gt;This is how it works:&lt;/p&gt;

&lt;p&gt;选取你的教材，最好别太长（500单词以内）。闭上眼睛只听音频，尽你最大可能，能听懂多少算多少。接下来，读一下字幕或脚本。找一找不认识的单词和短语，查查词典，记住他们。&lt;/p&gt;

&lt;p&gt;Choose your material. It shouldn&amp;rsquo;t be too long (maximum of 500 words).
Close your eyes and just listen to the audio, trying to understand as much as possible.
Then, read the subtitles or script. Find words and phrases you don&amp;rsquo;t know, look them up in a dictionary, and take note of them.&lt;/p&gt;

&lt;p&gt;再接下来重复听音频，每句话之后暂停一下。重复演员说完的句子（学舌的部分）。重复多次，直到你可以熟练掌握。最后重复一遍，这次你与音频中的演员同时出声（同步跟读的部分）。这可能很难，所以你若有需要，可以重复多试几遍。最后的最后，回顾一下你所学的单词，当日的生词和词组可以放入单词本或手写卡里，一遍之后定期回顾。一天的工作就做完了。&lt;/p&gt;

&lt;p&gt;Then, replay the audio, pausing the audio after each sentence. Repeat after the speaker (parroting). Repeat many times until you get good at this.
Repeat the audio one last time, this time speaking at the same time as the speaker (overshadowing). This may be tough, so you can repeat this if you need to.
Review the learned words one last time. The new words and phrases from today can be put into flashcards that you review regularly. You are done for the day.&lt;/p&gt;

&lt;p&gt;有什么适用这个方法的资源素材呢？&lt;a href=&#34;http://englishclass101.com/&#34; target=&#34;_blank&#34;&gt;Englishclass101.com&lt;/a&gt; 网就使用了这个方法。（译注：喂喂，这是在打广告么？）你也可以用 5~10 分钟左右带字幕的油管视频。我衷心希望这个方法可以帮到您！&lt;/p&gt;

&lt;p&gt;Want some resources for this method? &lt;a href=&#34;http://englishclass101.com/&#34; target=&#34;_blank&#34;&gt;Englishclass101.com&lt;/a&gt; uses this method. You could also use 5-10 minute YouTube videos that include subtitles. I hope this method works for you!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>与友人于江畔闲谈小酌有感</title>
      <link>https://parisqian.com/post/2016/05/chit-chat-w-friend-by-river-bank</link>
      <pubDate>Wed, 11 May 2016 21:30:27 +0800</pubDate>
      
      <guid>https://parisqian.com/post/2016/05/chit-chat-w-friend-by-river-bank</guid>
      <description>&lt;pre&gt;
春来心外花千束  日日眉锁为哪般
假寐江畔凭栏处  无风星汉起波澜
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>编程中的网瘾少年</title>
      <link>https://parisqian.com/post/2016/05/internet-addict</link>
      <pubDate>Sun, 01 May 2016 08:25:31 +0000</pubDate>
      
      <guid>https://parisqian.com/post/2016/05/internet-addict</guid>
      <description>&lt;pre&gt;
日上三竿艳阳天
禅坐洞中神无边
键盘谷歌牵一线
不知今宵是何年
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>在瘟到死石中使用 Linux 进行开发</title>
      <link>https://parisqian.com/post/2016/04/coding-in-linux-in-windows</link>
      <pubDate>Wed, 27 Apr 2016 05:46:16 +0000</pubDate>
      
      <guid>https://parisqian.com/post/2016/04/coding-in-linux-in-windows</guid>
      <description>

&lt;h2 id=&#34;简述&#34;&gt;简述&lt;/h2&gt;

&lt;p&gt;开发 Node, Ruby, PHP 等技术的时候，总是面临 Windows 问题，不是说他们不支持 Windows，其实要装是可以装的。但是他们的生态运行在 Windows 上时，某些组件的运行结果可能会改变，或出现运行不稳定的情况。通常程序猿，尤其是老美的程序猿更倾向用 Mac 或 Linux 搞开发。搞 Web 的更是如此，工程师都希望开发环境和生产环境尽可能相近，减少不必要的 Bug，服务器是 Linux 最好生产环境也是 Linux，最少也要支持 posix 规范。于是乎，虽然 Windows 的市场份额不小，可是开源社区反而是对 Linux 版本和 Mac 版本的软件支持更为出色。我用 Linux 有段时间了，不过如果非要我在硬盘里分个区单独装 Linux，会显得略繁琐。娱乐软件的支持和硬件驱动的支持一度搞得我焦头烂额。我的电脑几乎不关机，休眠就够了，所以重启切换系统这项工作太反人类了233。既然这个东西已经不是一个 Geek 的玩具，反倒是吃饭和学习的家伙了。易于配置，易于启动，易于恢复，这三项标准就显得尤为重要。虚拟机的整机快照功能，可以非常方便的做到这一点，我也不用虚拟机玩游戏，性能损失也可以忽略不计。&lt;/p&gt;

&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Update: 知名 YouTube 主播 &lt;a href=&#34;https://www.youtube.com/user/quidsup&#34; target=&#34;_blank&#34;&gt;quidsup&lt;/a&gt; 一直在安利 Ubuntu Mate/Linux Mint……Unity 貌似吃内存和显存很多。我尝试了一下。虽然 Ubuntu Unity 确实很漂亮，但是感觉基于 Gnome3 的 Cinnamon 更省资源，更流畅，也更传统（毕竟基于Gnome）。（纯主观感受，毫无科学依据）不过呢，我已经折腾很久的 Ubuntu 了。感觉还是不需要再折腾下去了。Popularity is my first concern.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;先说结论，目前我的选择是免费版 &lt;code&gt;VMware Workstation Player 12&lt;/code&gt;(非商业用途使用) 加 &lt;code&gt;Ubuntu 16.04 LTS&lt;/code&gt;。目前 Ubuntu 还是有些小毛病。但是正常开发上网看片都没问题。&lt;/p&gt;

&lt;h2 id=&#34;faqs&#34;&gt;FAQs&lt;/h2&gt;

&lt;h3 id=&#34;为毛用虚拟机&#34;&gt;为毛用虚拟机&lt;/h3&gt;

&lt;p&gt;大多数的娱乐和工作工具还是必须用 Windows 的（尤其是中文环境）且不想折腾 Wine&lt;br&gt;完~&lt;/p&gt;

&lt;h3 id=&#34;作为早期-deepin-用户为毛不支持-deepin&#34;&gt;作为早期 Deepin 用户为毛不支持 Deepin&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Deepin 在新加坡软件更新巨慢啊……不仅源的数量多，而且最近的镜像在印尼。每次 &lt;code&gt;apt-get update&lt;/code&gt; 都等得我想死啊。用了 Ubuntu 之后，5~6 个源，下载速度也有提高毕竟来自星国大的镜像站就在本地。&lt;/li&gt;
&lt;li&gt;Deepin 在 VirtualBox 里卡得一逼。Ubuntu 在 virtualBox 比 Deepin 强多了。它本身不建议使用虚拟机环境也是有道理的。（我依然推荐VMware）&lt;/li&gt;
&lt;li&gt;稳定压倒一切（此处仅指软件）&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Update: Linux Mint 的东南亚镜像源也在印尼/菲律宾。但是下载速度飞快。原因不明，难道是他们自己定制了更新器的下载模块？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;为毛不用-virtualbox&#34;&gt;为毛不用 VirtualBox&lt;/h3&gt;

&lt;p&gt;&lt;del&gt;我用过，可是你知道你最大只能给你的 VM 加 128M 的显存么？！！！！我一开始以为 Linux 不吃显存，可是 tm 动不动就卡啊， Deepin是直接死机，Ubuntu是死一会儿好一会儿，而且驱动貌似也有问题。
当，VMware 里分配给虚拟机的显存数量默认为 &lt;code&gt;768M&lt;/code&gt;。你就会看到屏幕所有的动画几乎都毫无卡顿，几乎媲美原生系统。相信我，你绝对再也回不去了！！！只要我接到新的赚外快机会，我就买商业版！真的，太爽了！软件的稳定就是安心！可能 VirtualBox 有些 &lt;code&gt;CLI  API&lt;/code&gt; 可以做到这些吧，可是为毛要折腾呢？
稳定压倒一切&lt;/del&gt;
128M 只是2D视频的显存。128已经够用了。而用于3D的显存是无限的，显卡上有多少就可以用多少。
至于为什么会卡，我还是不太清楚。如果我将来可以换一个SSD作为主力硬盘的话，我的确很有可能会转回去使用 &lt;code&gt;VirtualBox&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;用什么做开发&#34;&gt;用什么做开发&lt;/h3&gt;

&lt;p&gt;最近都在玩前端，前端比后端酷炫好玩而且环境配置更简单。
我的学习历程基本都在《Frontend Learning Note》里介绍的差不多了。
我用这些东西：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Zsh：加git, ssh-agent插件 (See more @ &lt;a href=&#34;https://github.com/qiansen1386/vagrant-frontend/blob/master/zsh.install.sh&#34; target=&#34;_blank&#34;&gt;https://github.com/qiansen1386/vagrant-frontend/blob/master/zsh.install.sh&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;VIM/gedit: 我是用 DigitalOcean 的时候，看他们的官方教程学得 Vim，感觉挺好用的，反而不习惯 nano 这种功能用选项的笔记本工具了。gedit 嘛就是用 GUI 界面的时候用。&lt;/li&gt;
&lt;li&gt;Atom: (See more @ &lt;a href=&#34;https://github.com/qiansen1386/frontend-dev-vue#suggested-atom-plugins&#34; target=&#34;_blank&#34;&gt;https://github.com/qiansen1386/frontend-dev-vue#suggested-atom-plugins&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Google-Chrome-stable: 谷歌大法好！ (看这里 @ &lt;a href=&#34;https://kangax.github.io/compat-table/es6/&#34; target=&#34;_blank&#34;&gt;ECMAScript compatibility table&lt;/a&gt;) 另外也是我主要的插件和收藏都在谷歌服务里。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mozilla.org/en-US/firefox/developer/&#34; target=&#34;_blank&#34;&gt;Firefox Developer Edition&lt;/a&gt; 1. Firefox 一般比 Google 更尊重标准。2. Linux 下 比 Google Chrome 启动更快，吃资源更少，安装也更方便。然而，我需要安装 Developer Edition，多了一个步骤。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/creationix/nvm&#34; target=&#34;_blank&#34;&gt;Node Version Manager&lt;/a&gt;: &lt;code&gt;nvm&lt;/code&gt; 我一般都是必装的。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;注1：如果出现 &lt;code&gt;sudo node&lt;/code&gt;，或者 &lt;code&gt;sudo npm&lt;/code&gt; 时，出现 &lt;code&gt;Command Not Found&lt;/code&gt; 错误。建议执行以下代码，把 node 复制一份到 &lt;code&gt;usr&lt;/code&gt;。
详见 @ &lt;a href=&#34;http://stackoverflow.com/questions/21215059/cant-use-nvm-from-root-or-sudo&#34; target=&#34;_blank&#34;&gt;Can&amp;rsquo;t use NVM from root (or sudo)&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-node-js-with-nvm-node-version-manager-on-a-vps#-installing-nodejs-on-a-vps&#34; target=&#34;_blank&#34;&gt;How To Install Node.js with NVM (Node Version Manager) on a VPS - DigitalOcean&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;n=$(which node);n=${n%/bin/node}; chmod -R 755 $n/bin/*; sudo cp -r $n/{bin,lib,share} /usr/local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注2: 安装 Firefox Developer Edition 的最简方法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo add-apt-repository ppa:ubuntu-mozilla-daily/firefox-aurora
sudo apt-get update
sudo apt-get install firefox
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;详见 @ &lt;a href=&#34;http://askubuntu.com/questions/548003/how-do-i-install-the-firefox-developer-edition&#34; target=&#34;_blank&#34;&gt;How do I install the Firefox Developer Edition? - AskUbuntu&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;推荐配置&#34;&gt;推荐配置&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类目&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;处理器&lt;/td&gt;
&lt;td&gt;分配等效 4 逻辑核&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;内存&lt;/td&gt;
&lt;td&gt;&lt;code&gt;6~8G&lt;/code&gt;，亲测，如果只分配&lt;code&gt;4G&lt;/code&gt;，用 &lt;code&gt;Atom&lt;/code&gt; 和 &lt;code&gt;Chrome&lt;/code&gt; 会卡&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;硬盘&lt;/td&gt;
&lt;td&gt;我放了&lt;code&gt;300G&lt;/code&gt;，放心地往大了放就好了，这不是实际使用空间，只是最大使用空间。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;显存&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1G&lt;/code&gt;吧&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;打印机&lt;/td&gt;
&lt;td&gt;要手动删除虚拟打印机，不为什么，反正用不到，看着烦&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;驱动&lt;/td&gt;
&lt;td&gt;不需要特殊驱动，但是VMware Tools一定要装，跟VirtualBox extension pack是一个意思&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;安装注意事项&#34;&gt;安装注意事项&lt;/h3&gt;

&lt;p&gt;配置好硬件之后，就可以安装了。VMware 在装 ubuntu 的时候，并不用真正的走流程安装的（手动装当然也可以）。
它问一些基本信息，然后用一个私有方案复制文件，就可以直接“简易安装”，不是很懂。我默认安装下来。跟自己装没啥区别。
折腾输入法的时候有些麻烦，但是没有什么好总结的，莫名其妙就坏了，莫名其妙就好了。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;千万别乱装软件源。如果出错了就取消掉。平时没事的时候很多第三方源我都取消掉了。速度上有提升，软件更新的过程也不容易出错。当然，你没法用最新的软件了。我的想法是什么时候想更新了，什么时候再勾选上他们。（可能有问题）&lt;/li&gt;
&lt;li&gt;Ubuntu Software 软件进行安装和卸载很容易出错的，用 &lt;code&gt;synaptic&lt;/code&gt; 更好些。&lt;/li&gt;
&lt;li&gt;安装完 &lt;code&gt;Fcitx&lt;/code&gt; 和 &lt;code&gt;sogou&lt;/code&gt; 之后，不要手贱卸载 &lt;code&gt;ibus&lt;/code&gt;。这货跟很多 unity 组件有依赖，卸载他，ubuntu desktop的组件们也会跟着消失。（这种情况下，重装 &lt;code&gt;ibus&lt;/code&gt; 可能管用；如果不管用，则需要把当前的 &lt;code&gt;.compiz-1&lt;/code&gt; 文件夹改名为 &lt;code&gt;.compiz-1.old&lt;/code&gt; 之类的。重置默认设置。之后备份出来的的 &lt;code&gt;.compiz-1&lt;/code&gt; 文件夹就可以删掉了。）&lt;/li&gt;
&lt;li&gt;Linux 锁定状态下，是否可以通过 Chrome remote Desktop访问，我目前不太清楚。但是访问锁定状态下的 Windows 里的虚拟机里的锁定状态下的 Linux 里的 &lt;code&gt;Chrome RDP&lt;/code&gt; 就实在是做不到了，需要穿过太多层了。任何一层阻隔了访问权限也会出问题，而且搞不好就会暴露很多安全隐患不建议这么做，最好用共享网盘分享文件，而非共享访问权限。&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;官方自带的 Backup 组件，在安装 &lt;code&gt;Chrome RDP&lt;/code&gt; 之后会出现异常反应，如无休止地占用海量内存（症状类似内存泄漏）。建议不要安装 Google RDP，尚不知道 TeamViewer 等其他&lt;code&gt;VNC&lt;/code&gt;软件是否有类似 Bug。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;本土化-与-个性化&#34;&gt;本土化 与 个性化&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Fctix =&amp;gt; Sogou 拼音（必须）&lt;/li&gt;
&lt;li&gt;WPS (中文字体)（可选）&lt;/li&gt;
&lt;li&gt;思源黑体（自带 Noto 的版本）&lt;/li&gt;
&lt;li&gt;有道词典（没有快捷键呼出，没有用户登录，略鸡肋）&lt;/li&gt;
&lt;li&gt;一个扁平化的黑色系主题！嘿嘿嘿。&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;喂丸·待续
&lt;div class=&#34;thumbinner&#34; style=&#34;width:222px;&#34;&gt;
&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; id=&#34;svg2&#34; viewBox=&#34;0 0 200 200&#34;&gt;
  &lt;g id=&#34;glass&#34; fill=&#34;none&#34; stroke=&#34;#000&#34;&gt;
    &lt;path stroke-width=&#34;10&#34; d=&#34;M31.625 53h46.5v33h-46.5z&#34;/&gt;
    &lt;path stroke-width=&#34;10&#34; d=&#34;M121.625 53h46.5v33h-46.5z&#34;/&gt;
    &lt;path stroke-width=&#34;9&#34; d=&#34;M80.375 70.014h37&#34;/&gt;
  &lt;/g&gt;
  &lt;g id=&#34;..&#34;&gt;
    &lt;path d=&#34;M82.72 128.695q-3.96 0-6.48-2.52-2.52-2.7-2.52-6.48 0-3.78 2.52-6.3 2.52-2.7 6.48-2.7 3.78 0 6.3 2.7 2.52 2.52 2.52 6.3t-2.52 6.48q-2.52 2.52-6.3 2.52z&#34;/&gt;
    &lt;path d=&#34;M117.28 128.695q-3.78 0-6.3-2.52-2.52-2.7-2.52-6.48 0-3.78 2.52-6.3 2.52-2.7 6.3-2.7 3.96 0 6.48 2.7 2.52 2.52 2.52 6.3t-2.52 6.48q-2.52 2.52-6.48 2.52z&#34;/&gt;
  &lt;/g&gt;
  &lt;g id=&#34;naive&#34; fill-opacity=&#34;.2&#34;&gt;
    &lt;path d=&#34;M-96.22 146.875h12.24l1.26 12.6h.54q6.3-6.3 13.14-10.44 7.02-4.32 16.2-4.32 13.86 0 20.16 8.64 6.48 8.64 6.48 25.56v55.44h-14.76v-53.46q0-12.42-3.96-17.82-3.96-5.58-12.6-5.58-6.84 0-12.06 3.42-5.22 3.42-11.88 10.08v63.36h-14.76v-87.48z&#34;/&gt;
    &lt;path d=&#34;M22.38 236.515q-10.98 0-18.36-6.48-7.2-6.48-7.2-18.36 0-14.4 12.78-21.96 12.78-7.74 40.86-10.8 0-4.14-.9-8.1-.72-3.96-2.7-7.02-1.98-3.06-5.58-4.86-3.42-1.98-8.82-1.98-7.56 0-14.22 2.88-6.66 2.88-11.88 6.48L.6 156.055q6.12-3.96 14.94-7.56 8.82-3.78 19.44-3.78 16.02 0 23.22 9.9 7.2 9.72 7.2 26.1v53.64H53.16l-1.26-10.44h-.54q-6.3 5.22-13.5 9-7.2 3.6-15.48 3.6zm4.32-11.88q6.3 0 11.88-2.88 5.58-3.06 11.88-8.82v-24.3q-10.98 1.44-18.54 3.42-7.38 1.98-12.06 4.68-4.5 2.7-6.66 6.3-1.98 3.42-1.98 7.56 0 7.56 4.5 10.8 4.5 3.24 10.98 3.24z&#34;/&gt;
    &lt;path d=&#34;M92.922 146.875h14.76v87.48h-14.76v-87.48z&#34;/&gt;
    &lt;path d=&#34;M124.62 146.875h15.3l16.56 49.68 3.96 12.96q2.16 6.48 4.14 12.78h.72q1.98-6.3 3.96-12.78l3.96-12.96 16.56-49.68h14.58l-30.96 87.48h-17.28l-31.5-87.48z&#34;/&gt;
    &lt;path d=&#34;M256 236.515q-8.82 0-16.56-3.06-7.56-3.24-13.32-9-5.58-5.94-8.82-14.4t-3.24-19.26q0-10.8 3.24-19.26 3.42-8.64 8.82-14.58 5.58-5.94 12.6-9 7.02-3.24 14.58-3.24 8.28 0 14.76 2.88 6.66 2.88 10.98 8.28 4.5 5.4 6.84 12.96 2.34 7.56 2.34 16.92 0 2.34-.18 4.68 0 2.16-.36 3.78h-59.04q.9 14.04 8.64 22.32 7.92 8.1 20.52 8.1 6.3 0 11.52-1.8 5.4-1.98 10.26-5.04l5.22 9.72q-5.76 3.6-12.78 6.3-7.02 2.7-16.02 2.7zm19.26-52.92q0-13.32-5.76-20.16-5.58-7.02-15.84-7.02-4.68 0-9 1.8-4.14 1.8-7.56 5.4-3.42 3.42-5.76 8.46-2.16 5.04-2.88 11.52h46.8z&#34;/&gt;
  &lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>电动牙刷的优势与相伴而生的都市传说</title>
      <link>https://parisqian.com/post/2016/04/electronic-toothbrush-review</link>
      <pubDate>Sun, 17 Apr 2016 11:47:00 +0000</pubDate>
      
      <guid>https://parisqian.com/post/2016/04/electronic-toothbrush-review</guid>
      <description>

&lt;h2 id=&#34;飞利浦中端电动牙刷hx6730体验&#34;&gt;飞利浦中端电动牙刷HX6730体验&lt;/h2&gt;

&lt;p&gt;买了新牙刷，为了防止大家问我使用感受。如同我是最早用上纸尿裤的新新一代一样，我也赶时髦地成为了最早用上电动牙刷的一代。喔耶~我就把我的使用体验大体分zhuang享ge下B吧。这样也可以安利大家来用，让大家看到我用完是这个样子，你们用完也是这个样子。一如既往，我不会给购买链接，喜欢的请自己查，部分产品的国内的价格和美国亚马逊差不太多，部分则差很多。&lt;/p&gt;

&lt;h3 id=&#34;前后对比&#34;&gt;前后对比&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;对刷牙这件事的救赎：由不情愿的任务到新奇好玩的玩乐。从好烦还没刷牙到遇事不决就可以刷个牙……个人感觉这是最最主要的改进，你当然可以说几百块钱买个玩具，但是这个玩具我觉得值。他大大降低了我心理上想去做这件事情的阈值。&lt;/li&gt;
&lt;li&gt;缩短时间：早上刷牙洗漱的时间其实并没有根本性的变短。然而之前总限于很想努力刷牙却担心刷太仔细会耽误时间的纠结之中。改成程序定时，时间的缩短还是小事，更重要的是从此不纠结。&lt;/li&gt;
&lt;li&gt;更加洁净：但是之前费半天劲各种使劲刷，却还总嫌不干净到随便在嘴里晃一晃就特别干净。另一点是，总感觉手动刷的力度是很大的，可能有几百牛的力？&lt;/li&gt;
&lt;li&gt;难度：很努力得大力刷也刷不到刷不干净后槽牙内侧，现在把牙刷伸进去，过两秒就干干净净了，根本不需要大幅度的刷动。（简直口腔慢性咽炎患者福音，之前动作幅度一大就容易干呕的感受大为改善）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;都市传说の辟谣&#34;&gt;都市传说の辟谣&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;我没有色度卡……所以我总觉得刷牙的美白效果需要一定程度的脑补脑放能力才看得出来😂不过考虑到刷的干净两个礼拜以上可能会有明显效果吧。这个东西我去问问朋友就知道了。&lt;/li&gt;
&lt;li&gt;压力指示器根本没用，就尽量轻就完了。最大力也肯定比手动的时候按压的轻。因为他一直不停地震，正常用户不太可能早这种情况下还大力去按。手动刷牙，没办法，当然大力也刷不干净，并出不了奇迹。而另一方面电动牙刷的神奇效率则往往是初心者最直接的感受了。&lt;/li&gt;
&lt;li&gt;电动牙刷的模式：只要一个模式就够了——净白（彻底清洁模式）。敏感，普通都是浮云。我没用过牙龈按摩模式但是感觉正常刷就已经按摩的麻酥酥的了，推测没啥用。&lt;/li&gt;
&lt;li&gt;另外有一点：电动牙刷没有去除牙垢的可能性。牙线还是必须的，但是我估计可以大幅延长洗牙的周期。&lt;/li&gt;
&lt;li&gt;使用方法不当的时候牙膏可能会化不开，当然也可以不用牙膏（胡扯&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;简评三个品牌加补充说明&#34;&gt;简评三个品牌加补充说明&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;飞利浦好在哪，首先好在特别贵（雾）。刷头震得飞起，刷杆却几乎没有给人留下很震的印象，手柄非常稳。旗舰版设计很好看，我买的是&lt;strong&gt;性价比之王&lt;/strong&gt;版本，基本告别优秀设计了。缺点其实是体积大，刷头贵。&lt;/li&gt;
&lt;li&gt;面板数值和质量据称都是松下更好，但是我自己感觉更震。当然我也没有可能把商场展示的松下牙刷塞到嘴里感受一下。不过既然松下的牙刷握柄如此小巧精悍，按道理抗震上就反而吃亏一些，之前决定买飞利浦而非松下也主要是这方面的担心。松下还有一个卖点就是负离子（带点离子）可以松动牙垢。额……你去洗牙不就好了。另外松下便宜些，设计也不错。可是，新款只卖日本国内。国际上的旧款，很久没有过更新，可选也不多。其他的用可更换电池的低端货，电压不稳之下，振动频率是达不到理想值的，大家都不推荐。我也不想尝试了。&lt;/li&gt;
&lt;li&gt;Oral-B 在我眼里就是垃圾：噪音大；磨损牙齿厉害；愚蠢的旋转刷头，刷不到牙缝；刷头设计不合理，接缝处到中空刷杆藏污纳垢，时间长了有异味；中端产品电池技术落后，电量也太弱；高端产品…… Excuse me？镍氢改锂电池不是天经地义的么？你也要多收钱；牙刷连蓝牙，你是想让我一边刷牙一边举着手机么？如我之前所说，压力指示器根本没用。整个系列简直一无是处。就多种刷头挺有创意，然而以上种种，尤其是刷头转动部件的接缝那个问题，让我没有尝试它刷头的欲望。&lt;/li&gt;
&lt;li&gt;我其实很希望能买到靠谱的国产品牌，感觉一个磁悬浮电机，既然已经成为一个通用元器件，成品和技术含量都应该很可控才对。然而现实是，国产的电动牙刷逼格都太low了。没有品牌和技术的积累使得他们的牙刷做不出有利润区间的高品质产品。我虽然是追求性价比的用户，但我也希望能在少操心，舒适性等方面取得一个平衡。很遗憾，国内目前没有能过我心目中那根线的产品。再此，请让我代表无数同我一样的屌丝， @小米 雷总快来拯救世界吧！如果小米出了电动牙刷，我一定会买你们家的电饭煲的！&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这是我选择飞利浦的理由，我也很希望大家可以支持下松下，然后告诉我好不好用……因为新加坡这个鸟不拉屎的地方，电动牙刷之类的小家电不仅仅款式少，卖价还贵的离谱。我为了Play Safe，怕海淘到不好的东西，还没法退换货，只得随大流买了这个性价比之王。我目前还是很满意的。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;买东西之前喜欢瞻前顾后，做个半个月调查研究反复比对，还专挑所谓 &lt;em&gt;性价比出色&lt;/em&gt; 的产品。这些行为，除了把我理科生的身份表露无遗还顺带暴漏了我土鳖的本质……就酱，不完美的烟火也是独一无二的烟火😏&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Frontend Learning Note 3 - Vagrant, VM &amp; Shell</title>
      <link>https://parisqian.com/post/2016/04/frontend-learning-note-3</link>
      <pubDate>Sat, 09 Apr 2016 05:05:53 +0000</pubDate>
      
      <guid>https://parisqian.com/post/2016/04/frontend-learning-note-3</guid>
      <description>

&lt;h2 id=&#34;the-lesson-i-learnt&#34;&gt;The Lesson I Learnt&lt;/h2&gt;

&lt;h3 id=&#34;line-ending-issue&#34;&gt;Line-ending issue&lt;/h3&gt;

&lt;p&gt;Make sure the line ending of your provision script is LF-only(unix-style), otherwise the behaviors would be very unpredictable.
Unwated &lt;code&gt;\r&lt;/code&gt; will appears everywhere during &lt;code&gt;vagrant up&lt;/code&gt;&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;scripts-heading&#34;&gt;scripts heading&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;#!/bin/bash&lt;/code&gt; is not omissible. Of course, you can use &lt;code&gt;#!/bin/sh&lt;/code&gt; or &lt;code&gt;#!/bin/zsh&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;symlinks-are-huge-problem&#34;&gt;Symlinks are huge problem!&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/npm/npm/issues/7308&#34; target=&#34;_blank&#34;&gt;npm-issues#7308&lt;/a&gt; =&amp;gt; Symlinks within shared folder could not be sync between Win and Posix OS. However many NPM packages would like to create bin-links(symlinks of executable file within bin folder). So whenever you tried to install some packages, it is very likely to fail. So there are 3 potential solutions: 1. try to make it work by proper config virtualbox. 2. Move the node_modules out of synced-folder. 3. use &lt;code&gt;--no-bin-links&lt;/code&gt; flag for &lt;code&gt;npm install&lt;/code&gt;.
Let me just reveal the final answer. Only No.3 works, with side-effect though.&lt;/p&gt;

&lt;p&gt;Firstly, there is script provided by &lt;a href=&#34;https://github.com/drmyersii&#34; target=&#34;_blank&#34;&gt;drmyersii&lt;/a&gt;(The author of &lt;a href=&#34;https://github.com/drmyersii/vagrant-node-env&#34; target=&#34;_blank&#34;&gt;vagrant-node-env&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Ruby&#34;&gt;config.vm.provider &amp;quot;virtualbox&amp;quot; do |v|
    v.customize [&amp;quot;setextradata&amp;quot;, :id, &amp;quot;VBoxInternal2/SharedFoldersEnableSymlinksCreate/vagrant&amp;quot;, &amp;quot;1&amp;quot;]
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It doesn&amp;rsquo;t work at least for Windows 7 Host. I didn&amp;rsquo;t investigated further, due to tied schedule. You can try it if you want, I&amp;rsquo;d like to know if it works on you :P&lt;/p&gt;

&lt;p&gt;Then, I tried to created a &lt;code&gt;node_modules/&lt;/code&gt; folder under &lt;code&gt;/tmp/&lt;/code&gt;, but another unexpected issue supprised me. &lt;a href=&#34;https://github.com/npm/npm/issues/10013&#34; target=&#34;_blank&#34;&gt;npm-issue#10013&lt;/a&gt; It turns out the NPM 3 introduced some special checks, causing the breaks of &lt;code&gt;npm install&lt;/code&gt;. If npm fixed this in further versions, or if you can roll back to a ealier version, It could be the best choice. With no side effects, and can be easily setup using provision scripts. I would continue following on.&lt;/p&gt;

&lt;p&gt;The end, I am afraid that I have to go for the &lt;code&gt;--no-bin-links&lt;/code&gt; approach. Em, that means there will be no more bin links. peroid. That would make cli operations much more undesirable. If you need those short-cuts, try to install them globally as well. So that when you call them, the global version can still response to u. Dirty, but works.&lt;/p&gt;

&lt;h3 id=&#34;ruby&#34;&gt;Ruby&lt;/h3&gt;

&lt;p&gt;Nothing to share, just to show off how I learnt a new language! (@ beginer level..) Ruby is like PHP, lovers love it, haters hate it. I love PHP, but I hate Ruby at the first place. Its unique syntax caused me so many frustration. To be clear, it is my problem, not Ruby&amp;rsquo;s. Because I am not only new to it, but also too anxious. Whereas, Ruby&amp;rsquo;s syntax is so distinctive(also complicated). But hey, I tried it, and it was fun when I start to get it! I didn&amp;rsquo;t get chance to practice &lt;code&gt;Metaprogramming&lt;/code&gt; much. What I can still tell is, the syntax suger is super handy. On the other hand, it is not as terse as golang/python, meaning that there is still a significant learning curve for coder who use other languages.&lt;/p&gt;

&lt;h3 id=&#34;vim&#34;&gt;Vim&lt;/h3&gt;

&lt;p&gt;Whenever I used my mouse cursor, it will entry the &lt;code&gt;VISUAL&lt;/code&gt; mode. However, all I wanted is just use the terminal&amp;rsquo;s build-in copy-paste feature. The bottom line is: I managed to prevent that by creating a &lt;code&gt;.vimrc&lt;/code&gt; file under my &lt;code&gt;~/&lt;/code&gt; home folder with a special setting &lt;code&gt;set mouse=r&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;time-for-referances&#34;&gt;Time for Referances&lt;/h2&gt;

&lt;h3 id=&#34;vagrant&#34;&gt;Vagrant&lt;/h3&gt;

&lt;h3 id=&#34;vim-1&#34;&gt;VIM&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://nvie.com/posts/how-i-boosted-my-vim/&#34; target=&#34;_blank&#34;&gt;How I boosted my Vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.openvim.com/&#34; target=&#34;_blank&#34;&gt;Learn VIM interactively with openvim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.makeuseof.com/tag/5-things-need-put-vim-config-file/&#34; target=&#34;_blank&#34;&gt;Vim Is Awesome: Make It Better With These 5 Customizations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;virtualbox-ubuntu&#34;&gt;VirtualBox + Ubuntu&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;I think the best developer OS for me by far is Ubuntu. Fedora is not so popular and quirk in some ways. Deepin is bueatiful but slow and sometimes not so reliable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://thomas.vanhoutte.be/miniblog/guide-speed-up-ubuntu-virtualbox/&#34; target=&#34;_blank&#34;&gt;Speed up Ubuntu on VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Frontend Learning Notes 2 - Direction Shifted</title>
      <link>https://parisqian.com/post/2016/04/frontend-learning-note-2</link>
      <pubDate>Sun, 03 Apr 2016 16:40:00 +0000</pubDate>
      
      <guid>https://parisqian.com/post/2016/04/frontend-learning-note-2</guid>
      <description>

&lt;h2 id=&#34;my-confession&#34;&gt;My Confession&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Only the ignorant person fears nothing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I gotta say that I was way too over ambitious about the frontend stack. When companys like Google and Mozilla start to push the standardization of new innovations of the Web. The frontend standards keeps changing everyday, so does the Toolchain. Chasing the tool could be harmful, so I realised a realistic learning plan could be more benificial for me.
After a few days of extensive research, my mind changed. The more I learn, I become less bold, so that I become more and more eager for a shorter learning curve. Compareing with &amp;ldquo;Flawless on paper&amp;rdquo;, I prefer a more practical stack.
Here is what I learnt:&lt;/p&gt;

&lt;h3 id=&#34;postcss-scss&#34;&gt;&lt;code&gt;PostCSS&lt;/code&gt; =&amp;gt; &lt;code&gt;SCSS&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;I know the PostCSS is the future, and CssNext/preCss plugins appears like a great replacement of Scss. Also according to Boostrap &amp;amp; many others SCSS is way better than LESS. But then I find that if I want to custom and build Boostrap, I have to import SCSS anyway. So SCSS+Autoprefixer beat my original ideal buy ignorant plan.&lt;/p&gt;

&lt;h3 id=&#34;build-tool-module-bundler&#34;&gt;Build Tool &amp;amp; Module Bundler&lt;/h3&gt;

&lt;p&gt;There is a little bit backgound I have learnt.
- &lt;a href=&#34;http://gulpjs.com/&#34; target=&#34;_blank&#34;&gt;gulp&lt;/a&gt; beats &lt;a href=&#34;http://gruntjs.com/&#34; target=&#34;_blank&#34;&gt;grunt&lt;/a&gt;.
- &lt;a href=&#34;https://webpack.github.io&#34; target=&#34;_blank&#34;&gt;Webpack&lt;/a&gt; beats &lt;a href=&#34;http://gbrowserify.org&#34; target=&#34;_blank&#34;&gt;browserify&lt;/a&gt; beats &lt;a href=&#34;http://grequirejs.org&#34; target=&#34;_blank&#34;&gt;RequireJS&lt;/a&gt;.
- &lt;del&gt;With the viral of &lt;code&gt;NodeJS&lt;/code&gt;, &lt;code&gt;CommonJs&lt;/code&gt; becomes the de facto standard importing syntax(I believe). It Beats AMD, CMD and otheres, moreover &lt;code&gt;ES6 module&lt;/code&gt; is compatiable with it, so it is also future-proof.&lt;/del&gt;(Completely Wrong&amp;hellip;explained below)
- Webpack is capable to do some jobs of gulp.&lt;/p&gt;

&lt;p&gt;I was thinking of using gulp + webpack. But since nowadays, webpack have plenty of plugins and loaders, and most importantly, I found at least 2 boostrap-loaders which claims that they can process Boostrap v4. I can simply say good bye to Gulp. &lt;em&gt;I might meet you again, don&amp;rsquo;t know why, don&amp;rsquo;t know when, but I might meet you again some other day~&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Webpack can minify Js, provide source map for dev stage, build SCSS, build typescript, build Vue/JSX, build Boostrap, include jQuery support without expose global access to it, process PostCSS(Autoprefixer), custom the dist path, watch the dev folder, live-reload. What else do you need? What else do you need? What else do you need?&lt;/p&gt;

&lt;h3 id=&#34;keep-practicing&#34;&gt;Keep Practicing&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;It is the only way to reveal the imperfection of your tool and to pursue perfection of understanding at the same time!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before practise, you won&amp;rsquo;t know if the tool is gonna suit your needs.
That is exactly why I dropped the semantic UI, because it follows &amp;ldquo;&lt;em&gt;Convention over Configuation&lt;/em&gt;&amp;rdquo;, so it has to sacrifice &amp;ldquo;&lt;em&gt;Explicit is better than implicit&lt;/em&gt;&amp;ldquo;&lt;small&gt;*Refering to &lt;a href=&#34;https://www.python.org/dev/peps/pep-0020/&#34; target=&#34;_blank&#34;&gt;The Zen of Python&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Before practise, you won&amp;rsquo;t know NodeJS have many dependency issue with Windows platform, so the &lt;code&gt;Vagrant&lt;/code&gt; become mandatory! no longer &lt;em&gt;Good to have&lt;/em&gt;. That is a good thing also, If I could compose my &lt;code&gt;Vagrantfile&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Nevertheless, this is absolutely worth our attention. However, it is neither stable nor mature. &lt;a href=&#34;https://blogs.windows.com/buildingapps/2016/03/30/run-bash-on-ubuntu-on-windows/&#34; target=&#34;_blank&#34;&gt;https://blogs.windows.com/buildingapps/2016/03/30/run-bash-on-ubuntu-on-windows/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;again-references&#34;&gt;Again, references&lt;/h2&gt;

&lt;h3 id=&#34;nodejs&#34;&gt;NodeJS:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/pU9Q6oiQNd0&#34; target=&#34;_blank&#34;&gt;What is Node.js Exactly? - a beginners introduction to Nodejs(YouTube)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/HkFlM73G-hk?list=PLoYCgNOIyGABs-wDaaxChu82q_xQgUb4f&#34; target=&#34;_blank&#34;&gt;Modular Javascript - Javascript Tutorial on the Object Literal Pattern(YouTube)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;webpack&#34;&gt;WebPack:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/TaWKUpahFZM&#34; target=&#34;_blank&#34;&gt;Getting Started with webpack(YouTube)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/9kJVYpOqcVU&#34; target=&#34;_blank&#34;&gt;Webpack Tutorial - Replace Gulp/Grunt plugins with a single tool(YouTube)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/vajoy/p/4650467.html&#34; target=&#34;_blank&#34;&gt;一小时包教会 —— webpack 入门指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zhuanlan.zhihu.com/p/20367175&#34; target=&#34;_blank&#34;&gt;Webpack傻瓜式指南（一）- 张轩(知乎)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zhuanlan.zhihu.com/p/20367175&#34; target=&#34;_blank&#34;&gt;Webpack傻瓜指南（二）开发和部署技巧- 张轩(知乎)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;vue&#34;&gt;Vue:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://vuejs.org/guide/&#34; target=&#34;_blank&#34;&gt;Getting Started - vue.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://vuejs.org.cn/guide/&#34; target=&#34;_blank&#34;&gt;VueJs 官方指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://vuex.vuejs.org/zh-cn/quickstart.html&#34; target=&#34;_blank&#34;&gt;Vuex 官方指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://router.vuejs.org/zh-cn/basic.html&#34; target=&#34;_blank&#34;&gt;Vue-router 官方指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sally-xiao.gitbooks.io/book/content/index.html&#34; target=&#34;_blank&#34;&gt;如何用Vue.js来搭建一个简易的APP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;vagrant&#34;&gt;Vagrant:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/Dji9ALCgfpM&#34; target=&#34;_blank&#34;&gt;Ruby Programming in One Video(Youtube)&lt;/a&gt;: In one video series is great for syntax-learning.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.vagrantup.com/docs/&#34; target=&#34;_blank&#34;&gt;VAGRANT DOCUMENTATION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/drmyersii/vagrant-node-env&#34; target=&#34;_blank&#34;&gt;vagrant-node-env(Github)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/laravel/homestead&#34; target=&#34;_blank&#34;&gt;laravel/homestead(Github)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;page-load-effect&#34;&gt;Page Load Effect:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://javascript.nwbox.com/ContentLoaded/&#34; target=&#34;_blank&#34;&gt;ContentLoaded(2010)&lt;/a&gt; A page load library,used by webpack.github.io&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codyhouse.co/gem/animated-page-transition/&#34; target=&#34;_blank&#34;&gt;Animated page trasition&lt;/a&gt; Worth investigation&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/browserstate/history.js&#34; target=&#34;_blank&#34;&gt;History.js&lt;/a&gt; Need no introduction&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.fasw.ws/faswwp/non-jquery-page-transitions-lightweight/&#34; target=&#34;_blank&#34;&gt;Non-Jquery Page Transitions lightweight&lt;/a&gt; A great proof of concept&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://turbo-react.herokuapp.com/&#34; target=&#34;_blank&#34;&gt;TurboReact&lt;/a&gt; A react based implementation&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/turbolinks/turbolinks&#34; target=&#34;_blank&#34;&gt;Turbolinks&lt;/a&gt; extraction of above solution, the best library to use by far&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;corrigendum&#34;&gt;Corrigendum&lt;/h2&gt;

&lt;h3 id=&#34;es6-modules-is-not-an-official-recognition-of-commonjs&#34;&gt;ES6 Modules is not an official recognition of CommonJS&lt;/h3&gt;

&lt;p&gt;ECMAScript 6 modules is a completely different thing, comparing with &lt;code&gt;CommonJs&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First of all, ES6 Modules are statically loaded!!!!&lt;/li&gt;
&lt;li&gt;Then It requires all the dependencies to be fully imported at the beginning.&lt;/li&gt;
&lt;li&gt;So that the tricks like &lt;code&gt;tree-shaking&lt;/code&gt; becomes possible. (AST parsing becomes much more effient and easy)&lt;/li&gt;
&lt;li&gt;There is performance improvement as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Can&amp;rsquo;t believe how assertive I was.&lt;/p&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.2ality.com/2014/09/es6-modules-final.html&#34; target=&#34;_blank&#34;&gt;ECMAScript 6 modules: the final syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.2ality.com/2015/12/webpack-tree-shaking.html&#34; target=&#34;_blank&#34;&gt;Tree-shaking with webpack 2 and Babel 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rollupjs.org/&#34; target=&#34;_blank&#34;&gt;Rollup.js - The next-generation JavaScript module bundler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/41922432/answer/93346223&#34; target=&#34;_blank&#34;&gt;如何评价 Webpack 2 新引入的 Tree-shaking 代码优化技术？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://benjamn.github.io/empirenode-2015&#34; target=&#34;_blank&#34;&gt;The Importance of import and export by Ben Newman on EmpireNode 2015 &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>[转] ES6 的模块系统（附CommonJS &amp; AMD 相关）</title>
      <link>https://parisqian.com/post/2016/03/es6-module-system</link>
      <pubDate>Mon, 28 Mar 2016 10:14:24 +0000</pubDate>
      
      <guid>https://parisqian.com/post/2016/03/es6-module-system</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000003410285&#34; target=&#34;_blank&#34;&gt;原文&lt;/a&gt; by &lt;a href=&#34;https://segmentfault.com/blog/juryxiong&#34; target=&#34;_blank&#34;&gt;Jury Xiong&amp;rsquo;s Blog&lt;/a&gt; 依照&lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/cn/&#34; target=&#34;_blank&#34;&gt;知识共享署名-相同方式共享 3.0 中国大陆许可协议&lt;/a&gt;发布&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;此文为翻译，原文地址在这儿：&lt;a href=&#34;https://hacks.mozilla.org/2015/08/es6-in-depth-modules/&#34; target=&#34;_blank&#34;&gt;https://hacks.mozilla.org/2015/08/es6-in-depth-modules/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ES6 是 ECMAScript 第 6 版本的简称，这是新一代的 JavaScript 的标准。&lt;a href=&#34;https://hacks.mozilla.org/category/es6-in-depth/&#34; target=&#34;_blank&#34;&gt;ES6 in Depth&lt;/a&gt; 是关于 ES6 的一系列新特性的介绍。&lt;/p&gt;

&lt;p&gt;遥想 2007 年，笔者开始在 Mozilla 的 JavaScript 团队工作的时候，那个时候典型的 JavaScript 程序只有一行代码。&lt;/p&gt;

&lt;p&gt;两年之后， Google Map 被发布。但是在那之前不久，JavaScript 的主要用途还是表单验证，当然啦，你的&lt;code&gt;&amp;lt;input onchange=&amp;gt;&lt;/code&gt;处理器平均来说只有一行。&lt;/p&gt;

&lt;p&gt;事过情迁，JavaScript 项目已经变得十分庞大，社区也发展出了一些有助于开发可扩展程序的工具。首先你需要的便是模块系统。模块系统让你得以将你的工作分散在不同的文件和目录中，让它们之前得以互相访问，并且可以非常有效地加载它们。自然而然地，JavaScript 发展出了模块系统，事实上是多个模块系统（AMD，CommonJS，CMD，译者注）。不仅如此，社区还提供了包管理工具（NPM，译者注），让你可以安装和拷贝高度依赖其他模块的软件。也许你会觉得，带有模块特性的 ES6，来得有些晚了。&lt;/p&gt;

&lt;h2 id=&#34;模块基础&#34;&gt;模块基础&lt;/h2&gt;

&lt;p&gt;一个 ES6 的模块是一个包含了 JS 代码的文件。ES6 里没有所谓的 &lt;code&gt;module&lt;/code&gt; 关键字。一个模块看起来就和一个普通的脚本文件一样，除了以下两个区别：&lt;/p&gt;

&lt;p&gt;ES6 的模块自动开启严格模式，即使你没有写 &lt;code&gt;&#39;use strict&#39;&lt;/code&gt;。
你可以在模块中使用 &lt;code&gt;import&lt;/code&gt; 和 &lt;code&gt;export&lt;/code&gt;。
让我们先来看看 &lt;code&gt;export&lt;/code&gt;。在模块中声明的任何东西都是默认私有的，如果你想对其他模块 Public，你必须 &lt;code&gt;export&lt;/code&gt; 那部分代码。我们有几种实现方法，最简单的方式是添加一个 &lt;code&gt;export&lt;/code&gt; 关键字。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Node&#34;&gt;// kittydar.js - Find the locations of all the cats in an image.
// (Heather Arthur wrote this library for real)
// (but she didn&#39;t use modules, because it was 2013)

export function detectCats(canvas, options) {
  var kittydar = new Kittydar(options);
  return kittydar.detectCats(canvas);
}

export class Kittydar {
  ... several methods doing image processing ...
}

// This helper function isn&#39;t exported.
function resizeCanvas() {
  ...
}
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可以在 &lt;code&gt;function&lt;/code&gt;、&lt;code&gt;class&lt;/code&gt;、&lt;code&gt;var&lt;/code&gt;、&lt;code&gt;let&lt;/code&gt; 或 &lt;code&gt;const&lt;/code&gt; 前添加 &lt;code&gt;export&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;如果你想写一个模块，有这些就够了！再也不用把代码放在 IIFE 或者一个回调函数里了。既然你的代码是一个模块，而非脚本文件，那么你生命的一切都会被封装进模块的作用域，不再会有跨模块或跨文件的全局变量。你导出的声明部分则会成为这个模块的 Public API。&lt;/p&gt;

&lt;p&gt;除此之外，模块里的代码和普通代码没啥大区别。它可以访问一些基本的全局变量，比如 &lt;code&gt;Object&lt;/code&gt; 和 &lt;code&gt;Array&lt;/code&gt;。如果你的模块跑在浏览器里，它将可以访问 &lt;code&gt;document&lt;/code&gt; 和 &lt;code&gt;XMLHttpRequest&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在另外一个文件中，我们可以导入这个模块并且使用 &lt;code&gt;detectCats()&lt;/code&gt; 函数：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Node&#34;&gt;// demo.js - Kittydar demo program

import {detectCats} from &amp;quot;kittydar.js&amp;quot;;

function go() {
    var canvas = document.getElementById(&amp;quot;catpix&amp;quot;);
    var cats = detectCats(canvas);
    drawRectangles(canvas, cats);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;要导入多个模块中的接口，你可以这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Node&#34;&gt;import {detectCats, Kittydar} from &amp;quot;kittydar.js&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当你运行一个包含 &lt;code&gt;import&lt;/code&gt; 声明的模块，被引入的模块会先被导入并加载，然后根据依赖关系，每一个模块的内容会使用深度优先的原则进行遍历。跳过已经执行过的模块，以此避免依赖循环。&lt;/p&gt;

&lt;p&gt;这便是模块的基础部分，挺简单的。&lt;/p&gt;

&lt;h2 id=&#34;导出表&#34;&gt;导出表&lt;/h2&gt;

&lt;p&gt;如果你觉得在每个要导出的部分前都写上 export 很麻烦，你可以只写一行你想要导出的变量列表，再用花括号包起来。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Node&#34;&gt;export {detectCats, Kittydar};

// no `export` keyword required here
function detectCats(canvas, options) { ... }
class Kittydar { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;导出表不一定要出现在文件的第一行，它可以出现在模块顶级作用域中的任何一行。你可以写多个导出表，也可以在列表中再写上其他 &lt;code&gt;export&lt;/code&gt; 声明，只要没有变量名被重复导出即可。&lt;/p&gt;

&lt;h2 id=&#34;重名命导出和导入&#34;&gt;重名命导出和导入&lt;/h2&gt;

&lt;p&gt;如果导入的变量名恰好和你模块中的变量名冲突了，ES6 允许你给你导入的东西重命名：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Node&#34;&gt;// suburbia.js

// Both these modules export something named `flip`.
// To import them both, we must rename at least one.
import {flip as flipOmelet} from &amp;quot;eggs.js&amp;quot;;
import {flip as flipHouse} from &amp;quot;real-estate.js&amp;quot;;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;类似地，你在导出变量的时候也能重命名。这个特性在你想将同一个变量名导出两次的场景下十分方便，举个栗子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Node&#34;&gt;// unlicensed_nuclear_accelerator.js - media streaming without drm
// (not a real library, but maybe it should be)

function v1() { ... }
function v2() { ... }

export {
  v1 as streamV1,
  v2 as streamV2,
  v2 as streamLatestVersion
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;默认导出&#34;&gt;默认导出&lt;/h2&gt;

&lt;p&gt;新一代的标准的设计理念是兼容现有的 &lt;code&gt;CommonJS&lt;/code&gt; 和 &lt;code&gt;AMD&lt;/code&gt; 模块。所以如果你有一个 Node 项目，并且刚刚执行完 &lt;code&gt;npm install lodash&lt;/code&gt;，你的 ES6 代码可以独立引入 Lodash 中的函数：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Node&#34;&gt;import {each, map} from &amp;quot;lodash&amp;quot;;

each([3, 2, 1], x =&amp;gt; console.log(x));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然而如果你已经习惯了 &lt;code&gt;_.each&lt;/code&gt; 或者看不见 &lt;code&gt;_&lt;/code&gt; 的话就浑身难受，当然这样使用 Lodash 也是不错的方式。&lt;/p&gt;

&lt;p&gt;这种情况下，你可以稍微改变一下你的 import 写法，不写花括号：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Node&#34;&gt;import _ from &amp;quot;lodash&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个简写等价于 &lt;code&gt;import {default as _} from &amp;quot;lodash&amp;quot;;&lt;/code&gt;。所有 &lt;code&gt;CommonJS&lt;/code&gt; 和 &lt;code&gt;AMD&lt;/code&gt; 模块在被 ES6 代码使用的时候都已经有了默认的导出，这个导出和你在 &lt;code&gt;CommonJS&lt;/code&gt; 中 &lt;code&gt;require()&lt;/code&gt; 得到的东西是一样的，那就是 &lt;code&gt;exports&lt;/code&gt; 对象。&lt;/p&gt;

&lt;p&gt;ES6 的模块系统被设计成让你可以一次性引入多个变量。但对于已经存在的 CommonJS 模块来说，你能得到的只有默认导出。举个栗子，在撰写此文之时，据笔者所知，著名的 &lt;a href=&#34;https://github.com/Marak/colors.js&#34; target=&#34;_blank&#34;&gt;colors&lt;/a&gt; 模块并未特意支持 ES6。这是一个由多个 CommonJS 模块组成的模块，正如 npm 上的那些包。然而你依然可以直接将其引入到你的 ES6 代码中。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Node&#34;&gt;// ES6 equivalent of `var colors = require(&amp;quot;colors/safe&amp;quot;);`
import colors from &amp;quot;colors/safe&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你想写自己的默认导出，那也很简单。这里面并没有什么高科技，它和普通的导出没什么两样，除了它的导出名是 &lt;code&gt;default&lt;/code&gt;。你可以使用我们之前已经介绍过的语法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Node&#34;&gt;let myObject = {
  field1: value1,
  field2: value2
};
export {myObject as default};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样更好：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Node&#34;&gt;export default {
  field1: value1,
  field2: value2
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;export default&lt;/code&gt; 关键字后可以跟随任何值：函数，对象，对象字面量，任何你能说得出的东西。&lt;/p&gt;

&lt;h2 id=&#34;模块对象&#34;&gt;模块对象&lt;/h2&gt;

&lt;p&gt;抱歉，这篇文章的内容有点多，但 JavaScript 已经算好的了：因为一些原因，所有语言的模块系统都有一大堆没什么卵用的特性。所幸的是，咱们只有一个话题要讨论了，呃，好吧，两个。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Node&#34;&gt;import * as cows from &amp;quot;cows&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当你 &lt;code&gt;import *&lt;/code&gt;，被引入进来的是一个 &lt;code&gt;module namespace object&lt;/code&gt;。它的属性是那个模块的导出，所以如果 “cows” 模块导出了一个名为 &lt;code&gt;moo()&lt;/code&gt; 的函数，当你像这样引入了 “cows” 之后，你可以这样写 &lt;code&gt;cows.moo()&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;聚合模块&#34;&gt;聚合模块&lt;/h2&gt;

&lt;p&gt;有时候一个包的主模块会引入许多其他模块，然后再将它们以一个统一的方式导出。为了简化这样的代码，我们有一个 import-and-export 的简写方法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Node&#34;&gt;// world-foods.js - good stuff from all over

// import &amp;quot;sri-lanka&amp;quot; and re-export some of its exports
export {Tea, Cinnamon} from &amp;quot;sri-lanka&amp;quot;;

// import &amp;quot;equatorial-guinea&amp;quot; and re-export some of its exports
export {Coffee, Cocoa} from &amp;quot;equatorial-guinea&amp;quot;;

// import &amp;quot;singapore&amp;quot; and export ALL of its exports
export * from &amp;quot;singapore&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这种 &lt;code&gt;export-from&lt;/code&gt; 的表达式和后面跟了一个 &lt;code&gt;export&lt;/code&gt; 的 &lt;code&gt;import-from&lt;/code&gt; 表达式类似。但和真正的导入不同，它并不会在你的作用域中加入二次导出的变量绑定。所以如果你打算在 &lt;code&gt;world-foods.js&lt;/code&gt; 写用到了 &lt;code&gt;Tea&lt;/code&gt; 的代码，就别使用这个简写形式。&lt;/p&gt;

&lt;p&gt;如果 &amp;ldquo;singapore&amp;rdquo; 导出的某一个变量恰巧和其他的导出变量名冲突了，那么这里就会出现一个错误。所以你应该谨慎使用 &lt;code&gt;export *&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;Whew！我们介绍完语法了，接下来进入有趣的环节。&lt;/p&gt;

&lt;h2 id=&#34;import-到底干了啥&#34;&gt;&lt;code&gt;import&lt;/code&gt; 到底干了啥&lt;/h2&gt;

&lt;p&gt;啥也没干，信不信由你。&lt;/p&gt;

&lt;p&gt;噢，你好像看起来没那么好骗。好吧，那你相信标准几乎没有谈到 &lt;code&gt;import&lt;/code&gt; 该做什么吗？你认为这是一件好事还是坏事呢？&lt;/p&gt;

&lt;p&gt;ES6 将模块的加载细节&lt;a href=&#34;http://www.ecma-international.org/ecma-262/6.0/index.html#sec-hostresolveimportedmodule&#34; target=&#34;_blank&#34;&gt;完全交给了实现&lt;/a&gt;，其余的执行部分则&lt;a href=&#34;http://www.ecma-international.org/ecma-262/6.0/index.html#sec-toplevelmoduleevaluationjob&#34; target=&#34;_blank&#34;&gt;规定得非常详细&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;大致来说，当 JS 引擎运行一个模块的时候，它的行为大致可归纳为以下四步：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;解析：引擎实现会阅读模块的源码，并且检查是否有语法错误。&lt;/li&gt;
&lt;li&gt;加载：引擎实现会（递归地）加载所有被引入的模块。这部分咱还没标准化。&lt;/li&gt;
&lt;li&gt;链接：引擎实现会为每个新加载的模块创建一个作用域，并且将模块中的声明绑定填入&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其中，包括从其他模块中引入的。
当你尝试 &lt;code&gt;import {cake} from &amp;quot;paleo&amp;quot;&lt;/code&gt; 但是 “paleo” 模块并没有导出叫 &lt;code&gt;cake&lt;/code&gt; 的东西时候，你也会在此时得到错误。这很糟糕，因为你离执行 JS，品尝 &lt;code&gt;cake&lt;/code&gt; 只差一步了！&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;执行：终于，JS 引擎开始执行刚加载进来的模块中的代码。到这个时候，&lt;code&gt;import&lt;/code&gt; 的处理过程已经完成，因此当 JS 引擎执行到一行 import 声明的时候，它啥也不会干。
看到了不？我说了 &lt;code&gt;import&lt;/code&gt; “啥也没干”，没骗你吧？有关编程语言的严肃话题，哥从不说谎。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;不过，现在咱们可以介绍这个体系中有趣的部分了，这是一个非常酷的 trick。正因为这个体系并没有指定加载的细节，也因为你只需要看一眼源码中的 &lt;code&gt;import&lt;/code&gt; 声明就可以在运行前搞清楚模块的依赖，某些 ES6 的实现甚至可以通过预处理就完成所有的工作，然后将模块全部打包成一个文件，最后通过网络分发。像 &lt;a href=&#34;http://www.2ality.com/2015/04/webpack-es6.html&#34; target=&#34;_blank&#34;&gt;webpack&lt;/a&gt; 这样的工具就是做这个事情的。&lt;/p&gt;

&lt;p&gt;这非常的了不起，因为通过网络加载资源是非常耗时的。假设你请求一个资源，接着发现里面有 &lt;code&gt;import&lt;/code&gt; 声明，然后你又得请求更多的资源，这又会耗费更多的时间。一个 naive 的 loader 实现可能会发起许多次网络请求。但有了 webpack，你不仅可以在今天就开始使用 ES6，还可以得到一切模块化的好处并且不向运行时性能妥协。&lt;/p&gt;

&lt;p&gt;原先我们计划过一个详细定义的 ES6 模块加载规范，而且我们做出来了。它没有成为最终标准的原因之一是它无法与打包这一特性调和。模块系统需要被标准化，打包也不应该被放弃，因为它太好了。&lt;/p&gt;

&lt;h2 id=&#34;动态-vs-静态-或者说-规矩和如何打破规矩&#34;&gt;动态 VS 静态，或者说：规矩和如何打破规矩&lt;/h2&gt;

&lt;p&gt;作为一门动态编程语言，JavaScript 令人惊讶地拥有一个静态的模块系统。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;import&lt;/code&gt; 和 &lt;code&gt;export&lt;/code&gt; 只能写在顶级作用域中。你无法在条件语句中使用引入和导出，你也不能在你写的函数作用域中使用 &lt;code&gt;import&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;所有的导出必须显示地指定一个变量名，你也无法通过一个循环动态地引入一堆变量。&lt;/li&gt;
&lt;li&gt;模块对象被封装起来了，我们无法通过 polyfill 去 hack 一个新 feature。&lt;/li&gt;
&lt;li&gt;在模块代码运行之前，所有的模块都必须经历加载，解析，链接的过程。没有可以延迟加载，惰性 &lt;code&gt;import&lt;/code&gt; 的语法。&lt;/li&gt;
&lt;li&gt;对于 &lt;code&gt;import&lt;/code&gt; 错误，你无法在运行时进行 &lt;code&gt;recovery&lt;/code&gt;。一个应用可能包含了几百个模块，其中的任何一个加载失败或链接失败，这个应用就不会运行。你无法在 &lt;code&gt;try/catch&lt;/code&gt; 语句中 &lt;code&gt;import&lt;/code&gt;。（不过正因为 ES6 的模块系统是如此地静态，webpack 可以在预处理时就为你检测出这些错误）。&lt;/li&gt;
&lt;li&gt;你没办法 hook 一个模块，然后在它被加载之前运行你的一些代码。这意味着模块无法控制它的依赖是如何被加载的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;只要你的需求都是静态的话，这个模块系统还是很 nice 的。但你还是想 hack 一下，是吗？&lt;/p&gt;

&lt;p&gt;这就是为啥你使用的模块加载系统可能会提供 API。举个栗子，&lt;a href=&#34;http://webpack.github.io/docs/code-splitting.html&#34; target=&#34;_blank&#34;&gt;webpack 有一个 API&lt;/a&gt;，允许你 “code splitting”，按照你的需求去惰性加载模块。这个 API 也能帮你打破上面列出的所有规矩。&lt;/p&gt;

&lt;p&gt;ES6 的模块是非常静态的，这很好——许多强大的编译器工具因此收益。而且，静态的语法已经被设计成可以和动态的，可编程的 loader API 协同工作。&lt;/p&gt;

&lt;h2 id=&#34;我何时能开始使用-es6-模块&#34;&gt;我何时能开始使用 ES6 模块？&lt;/h2&gt;

&lt;p&gt;如果你今天就要开始使用，你需要诸如 &lt;a href=&#34;https://github.com/google/traceur-compiler#what-is-traceur&#34; target=&#34;_blank&#34;&gt;Traceur&lt;/a&gt; 和 &lt;a href=&#34;http://babeljs.io/&#34; target=&#34;_blank&#34;&gt;Babel&lt;/a&gt; 这样的预处理工具。这个系列专题之前也有文章介绍了&lt;a href=&#34;https://hacks.mozilla.org/2015/06/es6-in-depth-babel-and-broccoli/&#34; target=&#34;_blank&#34;&gt;如何使用 Babel 和 Broccoli&lt;/a&gt; 去生成可用于 Web 的 ES6 代码。那篇文章的栗子也被&lt;a href=&#34;https://github.com/givanse/broccoli-babel-examples/tree/master/es6-modules&#34; target=&#34;_blank&#34;&gt;开源在了 GitHub 上&lt;/a&gt;。笔者的&lt;a href=&#34;http://www.2ality.com/2015/04/webpack-es6.html&#34; target=&#34;_blank&#34;&gt;这篇文章&lt;/a&gt;也介绍了如何使用 Babel 和 webpack。&lt;/p&gt;

&lt;p&gt;ES6 模块系统的主要设计者是 Dave Herman 和 Sam Tobin-Hochstadt，此二人不顾包括笔者在内的数位委员的反对，始终坚持如今你见到的 ES6 模块系统的静态部分，争论长达数年。Jon Coppeard 正在火狐浏览器上实现 ES6 的模块。之后包括 JavaScript Loader 规范在内的工作已经在进行中。HTML 中类似 &lt;code&gt;&amp;lt;script type=module&amp;gt;&lt;/code&gt; 这样的东西之后也会和大家见面。&lt;/p&gt;

&lt;p&gt;这便是 ES6 了。&lt;/p&gt;

&lt;p&gt;欢迎大家对 ES6 进行吐槽，请期待下周 &lt;a href=&#34;https://hacks.mozilla.org/category/es6-in-depth/&#34; target=&#34;_blank&#34;&gt;ES6 in Depth&lt;/a&gt; 系列的总结文章。
&lt;small style=&#34;float:right&#34;&gt;2015年08月21日发布&lt;/small&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;除此文之外，还推荐其他参考资料，因版权不明，我尽量多导流少转载：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://javascript.ruanyifeng.com/nodejs/module.html&#34; target=&#34;_blank&#34;&gt;CommonJS规范 - 阮一峰&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cnodejs.org/topic/5231a630101e574521e45ef8&#34; target=&#34;_blank&#34;&gt;exports 和 module.exports 的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2015/05/commonjs-in-browser.html&#34; target=&#34;_blank&#34;&gt;浏览器加载 CommonJS 模块的原理与实现 - 阮一峰&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2012/10/javascript_module.html&#34; target=&#34;_blank&#34;&gt;Javascript模块化编程（一）：模块的写法 - 阮一峰&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html&#34; target=&#34;_blank&#34;&gt;Javascript模块化编程（二）：AMD规范 - 阮一峰&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2012/11/require_js.html&#34; target=&#34;_blank&#34;&gt;Javascript模块化编程（三）：require.js的用法 - 阮一峰&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/amdjs/amdjs-api/wiki/AMD-(%E4%B8%AD%E6%96%87%E7%89%88&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;AMD&amp;rdquo;文档（中文版）存档&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>[译]有关个人发展的蟑螂理论——桑德·皮查伊</title>
      <link>https://parisqian.com/post/2016/03/the-cockroach-theory-for-self-development</link>
      <pubDate>Tue, 22 Mar 2016 08:57:22 +0000</pubDate>
      
      <guid>https://parisqian.com/post/2016/03/the-cockroach-theory-for-self-development</guid>
      <description>

&lt;h2 id=&#34;原文&#34;&gt;原文&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.quora.com/What-should-Indians-learn-from-Sundar-Pichai/answer/Shreyas-Vasant-Joshi?srid=3Eg3&amp;amp;share=9352f832&#34; target=&#34;_blank&#34;&gt;The cockroach theory for self development&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;译文&#34;&gt;译文&lt;/h2&gt;

&lt;p&gt;&lt;del&gt;很久很久以前，距离中土大唐十万八千里的德干高原上，有一间小餐馆。&lt;/del&gt;餐馆里不知哪里飞来的一只蟑螂落在了某位女士身上。&lt;/p&gt;

&lt;p&gt;这货当时就吓尿了！10万分贝，瞬间爆炸！&lt;/p&gt;

&lt;p&gt;惊惶欲绝&lt;sup&gt;1&lt;/sup&gt;的她的脸，颤抖中的声线；双手狂挥，旋转跳跃，她闭着眼；摆脱小强的企图，却无法实现。
她的反应影响了周边所有的人&lt;sup&gt;2&lt;/sup&gt;，她的同伴都开始惊慌起来。
这货最后终于摆脱了小强&lt;del&gt;估计是小强海盗船玩儿腻了233&lt;/del&gt;然而……他却飞到了同组另外一枚妹纸身上。
这下马上就要轮到这另一个美女重复刚才的闹剧的节骨眼，只见得这边厢餐厅服务员冲向前来解救他们了。
说时迟那时快，转眼之间小强又梯云纵到服务员的身上。这服务员双脚站定，气定神闲地观察起衬衫上小强下一步的出招。
当他觉得大局已定时，他用手指一把抓过小强，把它丢出了餐厅。&lt;/p&gt;

&lt;p&gt;我在一旁悠闲地嘬&lt;sup&gt;3&lt;/sup&gt;着&lt;del&gt;茶&lt;/del&gt;咖啡看着戏&lt;sup&gt;4&lt;/sup&gt;，此时我的脑洞里&lt;sup&gt;5&lt;/sup&gt;闪过几道流星。我就突然好奇，蟑螂真的他们这精彩戏码的内因么？
如果是，那么为什么服务生就没受影响？
他解决得近乎完美，没有任何慌乱之处。
不是蟑螂，而是女孩们对蟑螂带来的骚乱毫无办法才真正让她们灵台失守&lt;sup&gt;6&lt;/sup&gt;。
我开始认识到，并不是我老爸、我老板、我老婆对我的大喊大叫让我心烦；而是我对这些烦心事的无能为力，才真正让我心烦。
并不是路上堵车让我心烦，而是我对这堵车的无能为力，才真正让我心烦。
不仅仅是问题本身，而是我对这些问题的反应，才真正导致了我生命中的这些手足无措&lt;sup&gt;7&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;我从这里面学到的道理就是：
&lt;pre&gt;
  I understood, I should not react in life.
  I should always respond.
  The women reacted, whereas the waiter responded.
  Reactions are always instinctive
  whereas responses are always well thought of.
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;我明白了，我应该始终主动回应，而不是应激反应。&lt;br&gt;
这个娘们就属于条件反射的应激，而这个服务生才真正是主动回应。&lt;br&gt;
应激由直觉支配，而回应则总是源自深思熟虑。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;原文引用者：这是一个多么好的认识&lt;strong&gt;生命历程&lt;/strong&gt;的角度啊！&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;该故事源自桑德·皮查伊（Sundar Pichai）作为一个 IIT-Stanford 校友兼谷歌负责 Chrome 和 Android 两个重磅业务的全球负责人时的精彩演讲。(现如今已经是 Google 帝国的掌舵人了)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;注解&#34;&gt;注解：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;sup&gt;1&lt;/sup&gt;：Panic=&amp;gt;惊慌，stricken =&amp;gt; 受挫折的；受…侵袭的；连起来（panic-stricken）叫做惊恐万状，此处译为惊惶欲绝，我给满分。&lt;/li&gt;
&lt;li&gt;&lt;sup&gt;2&lt;/sup&gt;: Contagious adj. 感染性的；会蔓延的&lt;/li&gt;
&lt;li&gt;&lt;sup&gt;3&lt;/sup&gt;: Sipping  &amp;lt;动名词&amp;gt;小口抿，啜饮&lt;/li&gt;
&lt;li&gt;&lt;sup&gt;4&lt;/sup&gt;: amusement 娱乐（真的是消遣的意思）&lt;/li&gt;
&lt;li&gt;&lt;sup&gt;5&lt;/sup&gt;：antenna 天线 =&amp;gt; the antenna of my mind 姑且翻译为脑洞吧，各位亲见谅，这儿没法直译吧。&lt;/li&gt;
&lt;li&gt;&lt;sup&gt;6&lt;/sup&gt;：这里 disturb 各种形态的运用写的是真好。我觉得我很难写出这样的句子，当然我的翻译也堪称完美&lt;/li&gt;
&lt;li&gt;&lt;sup&gt;7&lt;/sup&gt;：原文是混乱(chaos)，也讲得通，但是我觉得这样翻译不好。没办法就是自信，就是任性。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;全文翻译结束，感谢大家赏脸。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;读后感&#34;&gt;读后感&lt;/h2&gt;

&lt;p&gt;接下来随便谈点感谢吧。&lt;/p&gt;

&lt;p&gt;怎么说呢？&lt;/p&gt;

&lt;p&gt;在我&lt;a href=&#34;https://parisqian.com/blog/2016/01/17/写于-2016-年初的一段话/&#34;&gt;人生低谷&lt;/a&gt;的时候，我有幸看到了这样一篇文章你应该能想象得到，这对我的人生是多么大的鼓舞。我当时就觉得这样一篇文章不能只静静地躺在 Quora 的故纸堆里。我要把它翻译过来，鼓舞更多在黑夜中不断前行的国人。
&lt;em&gt;Never Give Up&lt;/em&gt; 不应该只是句无关痛痒的片汤话，而更应该是满怀希望的呐喊和对生活艰辛的宣战檄文！&lt;/p&gt;

&lt;p&gt;Good Luck, And most importanly &lt;strong&gt;Have Fun&lt;/strong&gt;!&lt;/p&gt;

&lt;h3 id=&#34;后记&#34;&gt;后记&lt;/h3&gt;

&lt;p&gt;因为程序设计缺陷所导致的低可维护性，不应该成为导致我们沮丧的理由。我们应该想办法去响应它。选择无非是我个人换工作；我鼓动管理层重构现有系统；我改进现有系统，为重构争取时间。结果显而易见，我只得从事最艰难的那条路。当然如果公司因为坚持不重构系统最终导致反应缓慢，最终关门倒闭等等等等，那就不是我要考虑的问题。既然我已经尽全力去跟所有人去反馈到了这个问题，结果是这样，我只能尽全力去落实老板们的决定。To be fair，如果我是老板我也不会选择一下子投入这么大的一场豪赌般的技术路线调头。所以改变自己才能求活，话是不是这么说的。要帮老板努力把本不是选项的东西变成一个可选项才是我应该做的事情。&lt;/p&gt;

&lt;p&gt;因此我选择在本职工作的时段里努力分析解构现有的系统。现有系统固然问题很多，但是经过长期分析最突出的只有两个问题，基本都与 SQL 语句的低效有关。所以我在代码仓库的多个项目里，果断创建了名称类似于&lt;code&gt;feature/high-availability&lt;/code&gt;的分支。默默地用零敲碎打的时间里进行着多种试验。在此期间，可以说是学习到了大量的性能调优相关的知识。有 DBA 领域的，有日志分析领域的，有 DevOps 领域的，有容器领域的，有缓存领域的。身为团队领导，我的队员则很难帮助到这个层面。那两个月的时间里，我几乎可以说是孤军奋战。这些实验有的有少许效果，有的只是积累了经验。这些经验帮助我选择到了我目前认为是最可行的综合方案。在缓存优化，数据库优化，分布式运算等多种技术手段的综合作用下，但是最终的结果是我还算很满意的。程序的稳定性上了一个巨大的台阶啊。这种感觉就好像是……&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这种感觉估计很多程序员都体会过，当你设计的算法得出了正确结果的时候，当你自以为解决了一个海森堡 Bug（Heisenbug，表示不可重现）的时候，当你完成了一段精妙代码的时候，你摘下厚重的眼镜，推开铺满灰尘的书桌，打开办公室唯一的窗户，迎着夕阳把一只废弃的圆珠笔扔出窗外，然后冲着天空大喊：还有谁？这是一种拔剑四顾心茫然的情怀。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ituring.com.cn/tupubarticle/2796&#34; target=&#34;_blank&#34;&gt;《码农：Linus 与 Linux》之 Linus，一生只为寻找欢笑 作者:池建强&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Meg Jay: Why 30 is not the new 20</title>
      <link>https://parisqian.com/post/2016/03/why-30-is-not-the-new-20</link>
      <pubDate>Thu, 17 Mar 2016 05:52:09 +0000</pubDate>
      
      <guid>https://parisqian.com/post/2016/03/why-30-is-not-the-new-20</guid>
      <description>&lt;p&gt;YouTube 好视频分享。（原视频是李开复（Kaifu Lee）分享在Twitter的。）
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/-GG1rYgGJao&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;视频简介：
臨床心理學家 Meg Jay 提供二十歲的新世代年輕人一則的訊息：不同於一般觀點，你的二十歲人生並非無足輕重的十年。Jay在這場引人入勝的演講中說，儘管婚姻、工作及孩子是之後的事，不代表你不能現在就開始規劃。她提出三項建議，告訴二十多歲的年輕人該如何掌握人生中決定性的十年。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>