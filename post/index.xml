<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 东方孤思子のBlog
Paris·Qian Sen</title>
    <link>https://qiansen1386.github.io/post/</link>
    <description>Recent content in Posts on 东方孤思子のBlog
Paris·Qian Sen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 17 Apr 2016 11:47:00 +0000</lastBuildDate>
    <atom:link href="https://qiansen1386.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>电动牙刷的优势与相伴而生的都市传说</title>
      <link>https://qiansen1386.github.io/post/2016/04/electronic-toothbrush-review</link>
      <pubDate>Sun, 17 Apr 2016 11:47:00 +0000</pubDate>
      
      <guid>https://qiansen1386.github.io/post/2016/04/electronic-toothbrush-review</guid>
      <description>

&lt;h2 id=&#34;飞利浦中端电动牙刷hx6730体验&#34;&gt;飞利浦中端电动牙刷HX6730体验&lt;/h2&gt;

&lt;p&gt;买了新牙刷，为了防止大家问我使用感受。如同我是最早用上纸尿裤的新新一代一样，我也赶时髦地成为了最早用上电动牙刷的一代。喔耶~我就把我的使用体验大体分zhuang享ge下B吧。这样也可以安利大家来用，让大家看到我用完是这个样子，你们用完也是这个样子。一如既往，我不会给购买链接，喜欢的请自己查，部分产品的国内的价格和美国亚马逊差不太多，部分则差很多。&lt;/p&gt;

&lt;h3 id=&#34;前后对比&#34;&gt;前后对比&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;对刷牙这件事的救赎：由不情愿的任务到新奇好玩的玩乐。从好烦还没刷牙到遇事不决就可以刷个牙……个人感觉这是最最主要的改进，你当然可以说几百块钱买个玩具，但是这个玩具我觉得值。他大大降低了我心理上想去做这件事情的阈值。&lt;/li&gt;
&lt;li&gt;缩短时间：早上刷牙洗漱的时间其实并没有根本性的变短。然而之前总限于很想努力刷牙却担心刷太仔细会耽误时间的纠结之中。改成程序定时，时间的缩短还是小事，更重要的是从此不纠结。&lt;/li&gt;
&lt;li&gt;更加洁净：但是之前费半天劲各种使劲刷，却还总嫌不干净到随便在嘴里晃一晃就特别干净。另一点是，总感觉手动刷的力度是很大的，可能有几百牛的力？&lt;/li&gt;
&lt;li&gt;难度：很努力得大力刷也刷不到刷不干净后槽牙内侧，现在把牙刷伸进去，过两秒就干干净净了，根本不需要大幅度的刷动。（简直口腔慢性咽炎患者福音，之前动作幅度一大就容易干呕的感受大为改善）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;都市传说の辟谣&#34;&gt;都市传说の辟谣&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;我没有色度卡……所以我总觉得刷牙的美白效果需要一定程度的脑补脑放能力才看得出来😂不过考虑到刷的干净两个礼拜以上可能会有明显效果吧。这个东西我去问问朋友就知道了。&lt;/li&gt;
&lt;li&gt;压力指示器根本没用，就尽量轻就完了。最大力也肯定比手动的时候按压的轻。因为他一直不停地震，正常用户不太可能早这种情况下还大力去按。手动刷牙，没办法，当然大力也刷不干净，并出不了奇迹。而另一方面电动牙刷的神奇效率则往往是初心者最直接的感受了。&lt;/li&gt;
&lt;li&gt;电动牙刷的模式：只要一个模式就够了——净白（彻底清洁模式）。敏感，普通都是浮云。我没用过牙龈按摩模式但是感觉正常刷就已经按摩的麻酥酥的了，推测没啥用。&lt;/li&gt;
&lt;li&gt;另外有一点：电动牙刷没有去除牙垢的可能性。牙线还是必须的，但是我估计可以大幅延长洗牙的周期。&lt;/li&gt;
&lt;li&gt;使用方法不当的时候牙膏可能会化不开，当然也可以不用牙膏（胡扯&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;简评三个品牌加补充说明&#34;&gt;简评三个品牌加补充说明&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;飞利浦好在哪，首先好在特别贵（雾）。刷头震得飞起，刷杆却几乎没有给人留下很震的印象，手柄非常稳。旗舰版设计很好看，我买的是&lt;strong&gt;性价比之王&lt;/strong&gt;版本，基本告别优秀设计了。缺点其实是体积大，刷头贵。&lt;/li&gt;
&lt;li&gt;面板数值和质量据称都是松下更好，但是我自己感觉更震。当然我也没有可能把商场展示的松下牙刷塞到嘴里感受一下。不过既然松下的牙刷握柄如此小巧精悍，按道理抗震上就反而吃亏一些，之前决定买飞利浦而非松下也主要是这方面的担心。松下还有一个卖点就是负离子（带点离子）可以松动牙垢。额……你去洗牙不就好了。另外松下便宜些，设计也不错。可是，新款只卖日本国内。国际上的旧款，很久没有过更新，可选也不多。其他的用可更换电池的低端货，电压不稳之下，振动频率是达不到理想值的，大家都不推荐。我也不想尝试了。&lt;/li&gt;
&lt;li&gt;Oral-B 在我眼里就是垃圾：噪音大；磨损牙齿厉害；愚蠢的旋转刷头，刷不到牙缝；刷头设计不合理，接缝处到中空刷杆藏污纳垢，时间长了有异味；中端产品电池技术落后，电量也太弱；高端产品…… Excuse me？镍氢改锂电池不是天经地义的么？你也要多收钱；牙刷连蓝牙，你是想让我一边刷牙一边举着手机么？如我之前所说，压力指示器根本没用。整个系列简直一无是处。就多种刷头挺有创意，然而以上种种，尤其是刷头转动部件的接缝那个问题，让我没有尝试它刷头的欲望。&lt;/li&gt;
&lt;li&gt;我其实很希望能买到靠谱的国产品牌，感觉一个磁悬浮电机，既然已经成为一个通用元器件，成品和技术含量都应该很可控才对。然而现实是，国产的电动牙刷逼格都太low了。没有品牌和技术的积累使得他们的牙刷做不出有利润区间的高品质产品。我虽然是追求性价比的用户，但我也希望能在少操心，舒适性等方面取得一个平衡。很遗憾，国内目前没有能过我心目中那根线的产品。再此，请让我代表无数同我一样的屌丝， @小米 雷总快来拯救世界吧！如果小米出了电动牙刷，我一定会买你们家的电饭煲的！&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这是我选择飞利浦的理由，我也很希望大家可以支持下松下，然后告诉我好不好用……因为新加坡这个鸟不拉屎的地方，电动牙刷之类的小家电不仅仅款式少，卖价还贵的离谱。我为了Play Safe，怕海淘到不好的东西，还没法退换货，只得随大流买了这个性价比之王。我目前还是很满意的。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;买东西之前喜欢瞻前顾后，做个半个月调查研究反复比对，还专挑所谓 &lt;em&gt;性价比出色&lt;/em&gt; 的产品。这些行为，除了把我理科生的身份表露无遗还顺带暴漏了我土鳖的本质……就酱，不完美的烟火也是独一无二的烟火😏&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Frontend Learning Note 3 - Vagrant, VM &amp; Shell</title>
      <link>https://qiansen1386.github.io/post/2016/04/frontend-learning-note-3</link>
      <pubDate>Sat, 09 Apr 2016 05:05:53 +0000</pubDate>
      
      <guid>https://qiansen1386.github.io/post/2016/04/frontend-learning-note-3</guid>
      <description>

&lt;h2 id=&#34;the-lesson-i-learnt&#34;&gt;The Lesson I Learnt&lt;/h2&gt;

&lt;h3 id=&#34;line-ending-issue&#34;&gt;Line-ending issue&lt;/h3&gt;

&lt;p&gt;Make sure the line ending of your provision script is LF-only(unix-style), otherwise the behaviors would be very unpredictable.
Unwated &lt;code&gt;\r&lt;/code&gt; will appears everywhere&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;scripts-heading&#34;&gt;scripts heading&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;#!/bin/bash&lt;/code&gt; is not omissible. Of course, you can use &lt;code&gt;#!/bin/sh&lt;/code&gt; or &lt;code&gt;#!/bin/zsh&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;symlinks-are-huge-problem&#34;&gt;Symlinks are huge problem!&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/npm/npm/issues/7308&#34; target=&#34;_blank&#34;&gt;npm-issues#7308&lt;/a&gt; =&amp;gt; Symlinks within shared folder could not be sync between Win and Posix OS. However many NPM packages would like to create bin-links(symlinks of executable file within bin folder). So whenever you tried to install some packages, it is very likely to fail. So there are 3 potential solutions: 1. try to make it work by proper config virtualbox. 2. Move the node_modules out of synced-folder. 3. use &lt;code&gt;--no-bin-links&lt;/code&gt; flag for &lt;code&gt;npm install&lt;/code&gt;.
Let me just reveal the final answer. Only No.3 works, with side-effect though.&lt;/p&gt;

&lt;p&gt;Firstly, there is script provided by &lt;a href=&#34;https://github.com/drmyersii&#34; target=&#34;_blank&#34;&gt;drmyersii&lt;/a&gt;(The author of &lt;a href=&#34;https://github.com/drmyersii/vagrant-node-env&#34; target=&#34;_blank&#34;&gt;vagrant-node-env&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Ruby&#34;&gt;config.vm.provider &amp;quot;virtualbox&amp;quot; do |v|
    v.customize [&amp;quot;setextradata&amp;quot;, :id, &amp;quot;VBoxInternal2/SharedFoldersEnableSymlinksCreate/vagrant&amp;quot;, &amp;quot;1&amp;quot;]
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It doesn&amp;rsquo;t work at least for Windows 7 Host. I didn&amp;rsquo;t investigated further, due to tied schedule. You can try it if you want, I&amp;rsquo;d like to know if it works on you :P&lt;/p&gt;

&lt;p&gt;Then, I tried to created a &lt;code&gt;node_modules/&lt;/code&gt; folder under &lt;code&gt;/tmp/&lt;/code&gt;, but another unexpected issue supprised me. &lt;a href=&#34;https://github.com/npm/npm/issues/10013&#34; target=&#34;_blank&#34;&gt;npm-issue#10013&lt;/a&gt; It turns out the NPM 3 introduced some special checks, causing the breaks of &lt;code&gt;npm install&lt;/code&gt;. If npm fixed this in further versions, or if you can roll back to a ealier version, It could be the best choice. With no side effects, and can be easily setup using provision scripts. I would continue following on.&lt;/p&gt;

&lt;p&gt;The end, I am afraid that I have to go for the &lt;code&gt;--no-bin-links&lt;/code&gt; approach. Em, that means there will be no more bin links. peroid. That would make cli operations much more undesirable. If you need those short-cuts, try to install them globally as well. So that when you call them, the global version can still response to u. Dirty, but works.&lt;/p&gt;

&lt;h3 id=&#34;ruby&#34;&gt;Ruby&lt;/h3&gt;

&lt;p&gt;Nothing to share, just to show off how I learnt a new language! (@ beginer level..) Ruby is like PHP, lovers love it, haters hate it. I love PHP, but I hate Ruby at the first place. Its unique syntax caused me so many frustration. To be clear, it is my problem, not Ruby&amp;rsquo;s. Because I am not only new to it, but also too anxious. Whereas, Ruby&amp;rsquo;s syntax is so distinctive(also complicated). But hey, I tried it, and it was fun when I start to get it! I didn&amp;rsquo;t get chance to practice &lt;code&gt;Metaprogramming&lt;/code&gt; much. What I can still tell is, the syntax suger is super handy. On the other hand, it is not as terse as golang/python, meaning that there is still a significant learning curve for coder who use other languages.&lt;/p&gt;

&lt;h2 id=&#34;time-for-referances&#34;&gt;Time for Referances&lt;/h2&gt;

&lt;h3 id=&#34;vagrant&#34;&gt;Vagrant&lt;/h3&gt;

&lt;h3 id=&#34;vim&#34;&gt;VIM&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://nvie.com/posts/how-i-boosted-my-vim/&#34; target=&#34;_blank&#34;&gt;How I boosted my Vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.openvim.com/&#34; target=&#34;_blank&#34;&gt;Learn VIM interactively with openvim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.makeuseof.com/tag/5-things-need-put-vim-config-file/&#34; target=&#34;_blank&#34;&gt;Vim Is Awesome: Make It Better With These 5 Customizations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Frontend Learning Notes 2 - Direction Shifted</title>
      <link>https://qiansen1386.github.io/post/2016/04/frontend-learning-note-2</link>
      <pubDate>Sun, 03 Apr 2016 16:40:00 +0000</pubDate>
      
      <guid>https://qiansen1386.github.io/post/2016/04/frontend-learning-note-2</guid>
      <description>

&lt;h2 id=&#34;my-confession&#34;&gt;My Confession&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Only the ignorant person fears nothing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I gotta say that I was way too over ambitious about the frontend stack. When companys like Google and Mozilla start to push the standardization of new innovations of the Web. The frontend standards keeps changing everyday, so does the Toolchain. Chasing the tool could be harmful, so I realised a realistic learning plan could be more benificial for me.
After a few days of extensive research, my mind changed. The more I learn, I become less bold, so that I become more and more eager for a shorter learning curve. Compareing with &amp;ldquo;Flawless on paper&amp;rdquo;, I prefer a more practical stack.
Here is what I learnt:&lt;/p&gt;

&lt;h3 id=&#34;postcss-scss&#34;&gt;&lt;code&gt;PostCSS&lt;/code&gt; =&amp;gt; &lt;code&gt;SCSS&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;I know the PostCSS is the future, and CssNext/preCss plugins appears like a great replacement of Scss. Also according to Boostrap &amp;amp; many others SCSS is way better than LESS. But then I find that if I want to custom and build Boostrap, I have to import SCSS anyway. So SCSS+Autoprefixer beat my original ideal buy ignorant plan.&lt;/p&gt;

&lt;h3 id=&#34;build-tool-module-bundler&#34;&gt;Build Tool &amp;amp; Module Bundler&lt;/h3&gt;

&lt;p&gt;There is a little bit backgound I have learnt.
- &lt;a href=&#34;http://gulpjs.com/&#34; target=&#34;_blank&#34;&gt;gulp&lt;/a&gt; beats &lt;a href=&#34;http://gruntjs.com/&#34; target=&#34;_blank&#34;&gt;grunt&lt;/a&gt;.
- &lt;a href=&#34;https://webpack.github.io&#34; target=&#34;_blank&#34;&gt;Webpack&lt;/a&gt; beats &lt;a href=&#34;http://gbrowserify.org&#34; target=&#34;_blank&#34;&gt;browserify&lt;/a&gt; beats &lt;a href=&#34;http://grequirejs.org&#34; target=&#34;_blank&#34;&gt;RequireJS&lt;/a&gt;.
- &lt;del&gt;With the viral of &lt;code&gt;NodeJS&lt;/code&gt;, &lt;code&gt;CommonJs&lt;/code&gt; becomes the de facto standard importing syntax(I believe). It Beats AMD, CMD and otheres, moreover &lt;code&gt;ES6 module&lt;/code&gt; is compatiable with it, so it is also future-proof.&lt;/del&gt;(Completely Wrong&amp;hellip;explained below)
- Webpack is capable to do some jobs of gulp.&lt;/p&gt;

&lt;p&gt;I was thinking of using gulp + webpack. But since nowadays, webpack have plenty of plugins and loaders, and most importantly, I found at least 2 boostrap-loaders which claims that they can process Boostrap v4. I can simply say good bye to Gulp. &lt;em&gt;I might meet you again, don&amp;rsquo;t know why, don&amp;rsquo;t know when, but I might meet you again some other day~&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Webpack can minify Js, provide source map for dev stage, build SCSS, build typescript, build Vue/JSX, build Boostrap, include jQuery support without expose global access to it, process PostCSS(Autoprefixer), custom the dist path, watch the dev folder, live-reload. What else do you need? What else do you need? What else do you need?&lt;/p&gt;

&lt;h3 id=&#34;keep-practicing&#34;&gt;Keep Practicing&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;It is the only way to reveal the imperfection of your tool and to pursue perfection of understanding at the same time!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before practise, you won&amp;rsquo;t know if the tool is gonna suit your needs.
That is exactly why I dropped the semantic UI, because it follows &amp;ldquo;&lt;em&gt;Convention over Configuation&lt;/em&gt;&amp;rdquo;, so it has to sacrifice &amp;ldquo;&lt;em&gt;Explicit is better than implicit&lt;/em&gt;&amp;ldquo;&lt;small&gt;*Refering to &lt;a href=&#34;https://www.python.org/dev/peps/pep-0020/&#34; target=&#34;_blank&#34;&gt;The Zen of Python&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Before practise, you won&amp;rsquo;t know NodeJS have many dependency issue with Windows platform, so the &lt;code&gt;Vagrant&lt;/code&gt; become mandatory! no longer &lt;em&gt;Good to have&lt;/em&gt;. That is a good thing also, If I could compose my &lt;code&gt;Vagrantfile&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Nevertheless, this is absolutely worth our attention. However, it is neither stable nor mature. &lt;a href=&#34;https://blogs.windows.com/buildingapps/2016/03/30/run-bash-on-ubuntu-on-windows/&#34; target=&#34;_blank&#34;&gt;https://blogs.windows.com/buildingapps/2016/03/30/run-bash-on-ubuntu-on-windows/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;again-references&#34;&gt;Again, references&lt;/h2&gt;

&lt;h3 id=&#34;nodejs&#34;&gt;NodeJS:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/pU9Q6oiQNd0&#34; target=&#34;_blank&#34;&gt;What is Node.js Exactly? - a beginners introduction to Nodejs(YouTube)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/HkFlM73G-hk?list=PLoYCgNOIyGABs-wDaaxChu82q_xQgUb4f&#34; target=&#34;_blank&#34;&gt;Modular Javascript - Javascript Tutorial on the Object Literal Pattern(YouTube)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;webpack&#34;&gt;WebPack:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/TaWKUpahFZM&#34; target=&#34;_blank&#34;&gt;Getting Started with webpack(YouTube)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/9kJVYpOqcVU&#34; target=&#34;_blank&#34;&gt;Webpack Tutorial - Replace Gulp/Grunt plugins with a single tool(YouTube)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/vajoy/p/4650467.html&#34; target=&#34;_blank&#34;&gt;一小时包教会 —— webpack 入门指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zhuanlan.zhihu.com/p/20367175&#34; target=&#34;_blank&#34;&gt;Webpack傻瓜式指南（一）- 张轩(知乎)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zhuanlan.zhihu.com/p/20367175&#34; target=&#34;_blank&#34;&gt;Webpack傻瓜指南（二）开发和部署技巧- 张轩(知乎)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;vue&#34;&gt;Vue:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://vuejs.org/guide/&#34; target=&#34;_blank&#34;&gt;Getting Started - vue.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://vuejs.org.cn/guide/&#34; target=&#34;_blank&#34;&gt;VueJs 官方指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://vuex.vuejs.org/zh-cn/quickstart.html&#34; target=&#34;_blank&#34;&gt;Vuex 官方指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://router.vuejs.org/zh-cn/basic.html&#34; target=&#34;_blank&#34;&gt;Vue-router 官方指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sally-xiao.gitbooks.io/book/content/index.html&#34; target=&#34;_blank&#34;&gt;如何用Vue.js来搭建一个简易的APP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;vagrant&#34;&gt;Vagrant:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/Dji9ALCgfpM&#34; target=&#34;_blank&#34;&gt;Ruby Programming in One Video(Youtube)&lt;/a&gt;: In one video series is great for syntax-learning.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.vagrantup.com/docs/&#34; target=&#34;_blank&#34;&gt;VAGRANT DOCUMENTATION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/drmyersii/vagrant-node-env&#34; target=&#34;_blank&#34;&gt;vagrant-node-env(Github)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/laravel/homestead&#34; target=&#34;_blank&#34;&gt;laravel/homestead(Github)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;page-load-effect&#34;&gt;Page Load Effect:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://javascript.nwbox.com/ContentLoaded/&#34; target=&#34;_blank&#34;&gt;ContentLoaded(2010)&lt;/a&gt; A page load library,used by webpack.github.io&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codyhouse.co/gem/animated-page-transition/&#34; target=&#34;_blank&#34;&gt;Animated page trasition&lt;/a&gt; Worth investigation&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/browserstate/history.js&#34; target=&#34;_blank&#34;&gt;History.js&lt;/a&gt; Need no introduction&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.fasw.ws/faswwp/non-jquery-page-transitions-lightweight/&#34; target=&#34;_blank&#34;&gt;Non-Jquery Page Transitions lightweight&lt;/a&gt; A great proof of concept&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://turbo-react.herokuapp.com/&#34; target=&#34;_blank&#34;&gt;TurboReact&lt;/a&gt; A react based implementation&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/turbolinks/turbolinks&#34; target=&#34;_blank&#34;&gt;Turbolinks&lt;/a&gt; extraction of above solution, the best library to use by far&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;corrigendum&#34;&gt;Corrigendum&lt;/h2&gt;

&lt;h3 id=&#34;es6-modules-is-not-an-official-recognition-of-commonjs&#34;&gt;ES6 Modules is not an official recognition of CommonJS&lt;/h3&gt;

&lt;p&gt;ECMAScript 6 modules is a completely different thing, comparing with &lt;code&gt;CommonJs&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First of all, ES6 Modules are statically loaded!!!!&lt;/li&gt;
&lt;li&gt;Then It requires all the dependencies to be fully imported at the beginning.&lt;/li&gt;
&lt;li&gt;So that the tricks like &lt;code&gt;tree-shaking&lt;/code&gt; becomes possible. (AST parsing becomes much more effient and easy)&lt;/li&gt;
&lt;li&gt;There is performance improvement as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Can&amp;rsquo;t believe how assertive I was.&lt;/p&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.2ality.com/2014/09/es6-modules-final.html&#34; target=&#34;_blank&#34;&gt;ECMAScript 6 modules: the final syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.2ality.com/2015/12/webpack-tree-shaking.html&#34; target=&#34;_blank&#34;&gt;Tree-shaking with webpack 2 and Babel 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rollupjs.org/&#34; target=&#34;_blank&#34;&gt;Rollup.js - The next-generation JavaScript module bundler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/41922432/answer/93346223&#34; target=&#34;_blank&#34;&gt;如何评价 Webpack 2 新引入的 Tree-shaking 代码优化技术？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://benjamn.github.io/empirenode-2015&#34; target=&#34;_blank&#34;&gt;The Importance of import and export by Ben Newman on EmpireNode 2015 &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>[转] ES6 的模块系统（附CommonJS &amp; AMD 相关）</title>
      <link>https://qiansen1386.github.io/post/2016/03/es6-module-system</link>
      <pubDate>Mon, 28 Mar 2016 10:14:24 +0000</pubDate>
      
      <guid>https://qiansen1386.github.io/post/2016/03/es6-module-system</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000003410285&#34; target=&#34;_blank&#34;&gt;原文&lt;/a&gt; by &lt;a href=&#34;https://segmentfault.com/blog/juryxiong&#34; target=&#34;_blank&#34;&gt;Jury Xiong&amp;rsquo;s Blog&lt;/a&gt; 依照&lt;a href=&#34;http://creativecommons.org/licenses/by-sa/3.0/cn/&#34; target=&#34;_blank&#34;&gt;知识共享署名-相同方式共享 3.0 中国大陆许可协议&lt;/a&gt;发布&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;此文为翻译，原文地址在这儿：&lt;a href=&#34;https://hacks.mozilla.org/2015/08/es6-in-depth-modules/&#34; target=&#34;_blank&#34;&gt;https://hacks.mozilla.org/2015/08/es6-in-depth-modules/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ES6 是 ECMAScript 第 6 版本的简称，这是新一代的 JavaScript 的标准。&lt;a href=&#34;https://hacks.mozilla.org/category/es6-in-depth/&#34; target=&#34;_blank&#34;&gt;ES6 in Depth&lt;/a&gt; 是关于 ES6 的一系列新特性的介绍。&lt;/p&gt;

&lt;p&gt;遥想 2007 年，笔者开始在 Mozilla 的 JavaScript 团队工作的时候，那个时候典型的 JavaScript 程序只有一行代码。&lt;/p&gt;

&lt;p&gt;两年之后， Google Map 被发布。但是在那之前不久，JavaScript 的主要用途还是表单验证，当然啦，你的&lt;code&gt;&amp;lt;input onchange=&amp;gt;&lt;/code&gt;处理器平均来说只有一行。&lt;/p&gt;

&lt;p&gt;事过情迁，JavaScript 项目已经变得十分庞大，社区也发展出了一些有助于开发可扩展程序的工具。首先你需要的便是模块系统。模块系统让你得以将你的工作分散在不同的文件和目录中，让它们之前得以互相访问，并且可以非常有效地加载它们。自然而然地，JavaScript 发展出了模块系统，事实上是多个模块系统（AMD，CommonJS，CMD，译者注）。不仅如此，社区还提供了包管理工具（NPM，译者注），让你可以安装和拷贝高度依赖其他模块的软件。也许你会觉得，带有模块特性的 ES6，来得有些晚了。&lt;/p&gt;

&lt;h2 id=&#34;模块基础&#34;&gt;模块基础&lt;/h2&gt;

&lt;p&gt;一个 ES6 的模块是一个包含了 JS 代码的文件。ES6 里没有所谓的 &lt;code&gt;module&lt;/code&gt; 关键字。一个模块看起来就和一个普通的脚本文件一样，除了以下两个区别：&lt;/p&gt;

&lt;p&gt;ES6 的模块自动开启严格模式，即使你没有写 &lt;code&gt;&#39;use strict&#39;&lt;/code&gt;。
你可以在模块中使用 &lt;code&gt;import&lt;/code&gt; 和 &lt;code&gt;export&lt;/code&gt;。
让我们先来看看 &lt;code&gt;export&lt;/code&gt;。在模块中声明的任何东西都是默认私有的，如果你想对其他模块 Public，你必须 &lt;code&gt;export&lt;/code&gt; 那部分代码。我们有几种实现方法，最简单的方式是添加一个 &lt;code&gt;export&lt;/code&gt; 关键字。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Node&#34;&gt;// kittydar.js - Find the locations of all the cats in an image.
// (Heather Arthur wrote this library for real)
// (but she didn&#39;t use modules, because it was 2013)

export function detectCats(canvas, options) {
  var kittydar = new Kittydar(options);
  return kittydar.detectCats(canvas);
}

export class Kittydar {
  ... several methods doing image processing ...
}

// This helper function isn&#39;t exported.
function resizeCanvas() {
  ...
}
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可以在 &lt;code&gt;function&lt;/code&gt;、&lt;code&gt;class&lt;/code&gt;、&lt;code&gt;var&lt;/code&gt;、&lt;code&gt;let&lt;/code&gt; 或 &lt;code&gt;const&lt;/code&gt; 前添加 &lt;code&gt;export&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;如果你想写一个模块，有这些就够了！再也不用把代码放在 IIFE 或者一个回调函数里了。既然你的代码是一个模块，而非脚本文件，那么你生命的一切都会被封装进模块的作用域，不再会有跨模块或跨文件的全局变量。你导出的声明部分则会成为这个模块的 Public API。&lt;/p&gt;

&lt;p&gt;除此之外，模块里的代码和普通代码没啥大区别。它可以访问一些基本的全局变量，比如 &lt;code&gt;Object&lt;/code&gt; 和 &lt;code&gt;Array&lt;/code&gt;。如果你的模块跑在浏览器里，它将可以访问 &lt;code&gt;document&lt;/code&gt; 和 &lt;code&gt;XMLHttpRequest&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在另外一个文件中，我们可以导入这个模块并且使用 &lt;code&gt;detectCats()&lt;/code&gt; 函数：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Node&#34;&gt;// demo.js - Kittydar demo program

import {detectCats} from &amp;quot;kittydar.js&amp;quot;;

function go() {
    var canvas = document.getElementById(&amp;quot;catpix&amp;quot;);
    var cats = detectCats(canvas);
    drawRectangles(canvas, cats);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;要导入多个模块中的接口，你可以这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Node&#34;&gt;import {detectCats, Kittydar} from &amp;quot;kittydar.js&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当你运行一个包含 &lt;code&gt;import&lt;/code&gt; 声明的模块，被引入的模块会先被导入并加载，然后根据依赖关系，每一个模块的内容会使用深度优先的原则进行遍历。跳过已经执行过的模块，以此避免依赖循环。&lt;/p&gt;

&lt;p&gt;这便是模块的基础部分，挺简单的。&lt;/p&gt;

&lt;h2 id=&#34;导出表&#34;&gt;导出表&lt;/h2&gt;

&lt;p&gt;如果你觉得在每个要导出的部分前都写上 export 很麻烦，你可以只写一行你想要导出的变量列表，再用花括号包起来。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Node&#34;&gt;export {detectCats, Kittydar};

// no `export` keyword required here
function detectCats(canvas, options) { ... }
class Kittydar { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;导出表不一定要出现在文件的第一行，它可以出现在模块顶级作用域中的任何一行。你可以写多个导出表，也可以在列表中再写上其他 &lt;code&gt;export&lt;/code&gt; 声明，只要没有变量名被重复导出即可。&lt;/p&gt;

&lt;h2 id=&#34;重名命导出和导入&#34;&gt;重名命导出和导入&lt;/h2&gt;

&lt;p&gt;如果导入的变量名恰好和你模块中的变量名冲突了，ES6 允许你给你导入的东西重命名：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Node&#34;&gt;// suburbia.js

// Both these modules export something named `flip`.
// To import them both, we must rename at least one.
import {flip as flipOmelet} from &amp;quot;eggs.js&amp;quot;;
import {flip as flipHouse} from &amp;quot;real-estate.js&amp;quot;;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;类似地，你在导出变量的时候也能重命名。这个特性在你想将同一个变量名导出两次的场景下十分方便，举个栗子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Node&#34;&gt;// unlicensed_nuclear_accelerator.js - media streaming without drm
// (not a real library, but maybe it should be)

function v1() { ... }
function v2() { ... }

export {
  v1 as streamV1,
  v2 as streamV2,
  v2 as streamLatestVersion
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;默认导出&#34;&gt;默认导出&lt;/h2&gt;

&lt;p&gt;新一代的标准的设计理念是兼容现有的 &lt;code&gt;CommonJS&lt;/code&gt; 和 &lt;code&gt;AMD&lt;/code&gt; 模块。所以如果你有一个 Node 项目，并且刚刚执行完 &lt;code&gt;npm install lodash&lt;/code&gt;，你的 ES6 代码可以独立引入 Lodash 中的函数：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Node&#34;&gt;import {each, map} from &amp;quot;lodash&amp;quot;;

each([3, 2, 1], x =&amp;gt; console.log(x));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然而如果你已经习惯了 &lt;code&gt;_.each&lt;/code&gt; 或者看不见 &lt;code&gt;_&lt;/code&gt; 的话就浑身难受，当然这样使用 Lodash 也是不错的方式。&lt;/p&gt;

&lt;p&gt;这种情况下，你可以稍微改变一下你的 import 写法，不写花括号：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Node&#34;&gt;import _ from &amp;quot;lodash&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个简写等价于 &lt;code&gt;import {default as _} from &amp;quot;lodash&amp;quot;;&lt;/code&gt;。所有 &lt;code&gt;CommonJS&lt;/code&gt; 和 &lt;code&gt;AMD&lt;/code&gt; 模块在被 ES6 代码使用的时候都已经有了默认的导出，这个导出和你在 &lt;code&gt;CommonJS&lt;/code&gt; 中 &lt;code&gt;require()&lt;/code&gt; 得到的东西是一样的，那就是 &lt;code&gt;exports&lt;/code&gt; 对象。&lt;/p&gt;

&lt;p&gt;ES6 的模块系统被设计成让你可以一次性引入多个变量。但对于已经存在的 CommonJS 模块来说，你能得到的只有默认导出。举个栗子，在撰写此文之时，据笔者所知，著名的 &lt;a href=&#34;https://github.com/Marak/colors.js&#34; target=&#34;_blank&#34;&gt;colors&lt;/a&gt; 模块并未特意支持 ES6。这是一个由多个 CommonJS 模块组成的模块，正如 npm 上的那些包。然而你依然可以直接将其引入到你的 ES6 代码中。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Node&#34;&gt;// ES6 equivalent of `var colors = require(&amp;quot;colors/safe&amp;quot;);`
import colors from &amp;quot;colors/safe&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你想写自己的默认导出，那也很简单。这里面并没有什么高科技，它和普通的导出没什么两样，除了它的导出名是 &lt;code&gt;default&lt;/code&gt;。你可以使用我们之前已经介绍过的语法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Node&#34;&gt;let myObject = {
  field1: value1,
  field2: value2
};
export {myObject as default};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样更好：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Node&#34;&gt;export default {
  field1: value1,
  field2: value2
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;export default&lt;/code&gt; 关键字后可以跟随任何值：函数，对象，对象字面量，任何你能说得出的东西。&lt;/p&gt;

&lt;h2 id=&#34;模块对象&#34;&gt;模块对象&lt;/h2&gt;

&lt;p&gt;抱歉，这篇文章的内容有点多，但 JavaScript 已经算好的了：因为一些原因，所有语言的模块系统都有一大堆没什么卵用的特性。所幸的是，咱们只有一个话题要讨论了，呃，好吧，两个。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Node&#34;&gt;import * as cows from &amp;quot;cows&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当你 &lt;code&gt;import *&lt;/code&gt;，被引入进来的是一个 &lt;code&gt;module namespace object&lt;/code&gt;。它的属性是那个模块的导出，所以如果 “cows” 模块导出了一个名为 &lt;code&gt;moo()&lt;/code&gt; 的函数，当你像这样引入了 “cows” 之后，你可以这样写 &lt;code&gt;cows.moo()&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;聚合模块&#34;&gt;聚合模块&lt;/h2&gt;

&lt;p&gt;有时候一个包的主模块会引入许多其他模块，然后再将它们以一个统一的方式导出。为了简化这样的代码，我们有一个 import-and-export 的简写方法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Node&#34;&gt;// world-foods.js - good stuff from all over

// import &amp;quot;sri-lanka&amp;quot; and re-export some of its exports
export {Tea, Cinnamon} from &amp;quot;sri-lanka&amp;quot;;

// import &amp;quot;equatorial-guinea&amp;quot; and re-export some of its exports
export {Coffee, Cocoa} from &amp;quot;equatorial-guinea&amp;quot;;

// import &amp;quot;singapore&amp;quot; and export ALL of its exports
export * from &amp;quot;singapore&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这种 &lt;code&gt;export-from&lt;/code&gt; 的表达式和后面跟了一个 &lt;code&gt;export&lt;/code&gt; 的 &lt;code&gt;import-from&lt;/code&gt; 表达式类似。但和真正的导入不同，它并不会在你的作用域中加入二次导出的变量绑定。所以如果你打算在 &lt;code&gt;world-foods.js&lt;/code&gt; 写用到了 &lt;code&gt;Tea&lt;/code&gt; 的代码，就别使用这个简写形式。&lt;/p&gt;

&lt;p&gt;如果 &amp;ldquo;singapore&amp;rdquo; 导出的某一个变量恰巧和其他的导出变量名冲突了，那么这里就会出现一个错误。所以你应该谨慎使用 &lt;code&gt;export *&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;Whew！我们介绍完语法了，接下来进入有趣的环节。&lt;/p&gt;

&lt;h2 id=&#34;import-到底干了啥&#34;&gt;&lt;code&gt;import&lt;/code&gt; 到底干了啥&lt;/h2&gt;

&lt;p&gt;啥也没干，信不信由你。&lt;/p&gt;

&lt;p&gt;噢，你好像看起来没那么好骗。好吧，那你相信标准几乎没有谈到 &lt;code&gt;import&lt;/code&gt; 该做什么吗？你认为这是一件好事还是坏事呢？&lt;/p&gt;

&lt;p&gt;ES6 将模块的加载细节&lt;a href=&#34;http://www.ecma-international.org/ecma-262/6.0/index.html#sec-hostresolveimportedmodule&#34; target=&#34;_blank&#34;&gt;完全交给了实现&lt;/a&gt;，其余的执行部分则&lt;a href=&#34;http://www.ecma-international.org/ecma-262/6.0/index.html#sec-toplevelmoduleevaluationjob&#34; target=&#34;_blank&#34;&gt;规定得非常详细&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;大致来说，当 JS 引擎运行一个模块的时候，它的行为大致可归纳为以下四步：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;解析：引擎实现会阅读模块的源码，并且检查是否有语法错误。&lt;/li&gt;
&lt;li&gt;加载：引擎实现会（递归地）加载所有被引入的模块。这部分咱还没标准化。&lt;/li&gt;
&lt;li&gt;链接：引擎实现会为每个新加载的模块创建一个作用域，并且将模块中的声明绑定填入&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其中，包括从其他模块中引入的。
当你尝试 &lt;code&gt;import {cake} from &amp;quot;paleo&amp;quot;&lt;/code&gt; 但是 “paleo” 模块并没有导出叫 &lt;code&gt;cake&lt;/code&gt; 的东西时候，你也会在此时得到错误。这很糟糕，因为你离执行 JS，品尝 &lt;code&gt;cake&lt;/code&gt; 只差一步了！&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;执行：终于，JS 引擎开始执行刚加载进来的模块中的代码。到这个时候，&lt;code&gt;import&lt;/code&gt; 的处理过程已经完成，因此当 JS 引擎执行到一行 import 声明的时候，它啥也不会干。
看到了不？我说了 &lt;code&gt;import&lt;/code&gt; “啥也没干”，没骗你吧？有关编程语言的严肃话题，哥从不说谎。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;不过，现在咱们可以介绍这个体系中有趣的部分了，这是一个非常酷的 trick。正因为这个体系并没有指定加载的细节，也因为你只需要看一眼源码中的 &lt;code&gt;import&lt;/code&gt; 声明就可以在运行前搞清楚模块的依赖，某些 ES6 的实现甚至可以通过预处理就完成所有的工作，然后将模块全部打包成一个文件，最后通过网络分发。像 &lt;a href=&#34;http://www.2ality.com/2015/04/webpack-es6.html&#34; target=&#34;_blank&#34;&gt;webpack&lt;/a&gt; 这样的工具就是做这个事情的。&lt;/p&gt;

&lt;p&gt;这非常的了不起，因为通过网络加载资源是非常耗时的。假设你请求一个资源，接着发现里面有 &lt;code&gt;import&lt;/code&gt; 声明，然后你又得请求更多的资源，这又会耗费更多的时间。一个 naive 的 loader 实现可能会发起许多次网络请求。但有了 webpack，你不仅可以在今天就开始使用 ES6，还可以得到一切模块化的好处并且不向运行时性能妥协。&lt;/p&gt;

&lt;p&gt;原先我们计划过一个详细定义的 ES6 模块加载规范，而且我们做出来了。它没有成为最终标准的原因之一是它无法与打包这一特性调和。模块系统需要被标准化，打包也不应该被放弃，因为它太好了。&lt;/p&gt;

&lt;h2 id=&#34;动态-vs-静态-或者说-规矩和如何打破规矩&#34;&gt;动态 VS 静态，或者说：规矩和如何打破规矩&lt;/h2&gt;

&lt;p&gt;作为一门动态编程语言，JavaScript 令人惊讶地拥有一个静态的模块系统。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;import&lt;/code&gt; 和 &lt;code&gt;export&lt;/code&gt; 只能写在顶级作用域中。你无法在条件语句中使用引入和导出，你也不能在你写的函数作用域中使用 &lt;code&gt;import&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;所有的导出必须显示地指定一个变量名，你也无法通过一个循环动态地引入一堆变量。&lt;/li&gt;
&lt;li&gt;模块对象被封装起来了，我们无法通过 polyfill 去 hack 一个新 feature。&lt;/li&gt;
&lt;li&gt;在模块代码运行之前，所有的模块都必须经历加载，解析，链接的过程。没有可以延迟加载，惰性 &lt;code&gt;import&lt;/code&gt; 的语法。&lt;/li&gt;
&lt;li&gt;对于 &lt;code&gt;import&lt;/code&gt; 错误，你无法在运行时进行 &lt;code&gt;recovery&lt;/code&gt;。一个应用可能包含了几百个模块，其中的任何一个加载失败或链接失败，这个应用就不会运行。你无法在 &lt;code&gt;try/catch&lt;/code&gt; 语句中 &lt;code&gt;import&lt;/code&gt;。（不过正因为 ES6 的模块系统是如此地静态，webpack 可以在预处理时就为你检测出这些错误）。&lt;/li&gt;
&lt;li&gt;你没办法 hook 一个模块，然后在它被加载之前运行你的一些代码。这意味着模块无法控制它的依赖是如何被加载的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;只要你的需求都是静态的话，这个模块系统还是很 nice 的。但你还是想 hack 一下，是吗？&lt;/p&gt;

&lt;p&gt;这就是为啥你使用的模块加载系统可能会提供 API。举个栗子，&lt;a href=&#34;http://webpack.github.io/docs/code-splitting.html&#34; target=&#34;_blank&#34;&gt;webpack 有一个 API&lt;/a&gt;，允许你 “code splitting”，按照你的需求去惰性加载模块。这个 API 也能帮你打破上面列出的所有规矩。&lt;/p&gt;

&lt;p&gt;ES6 的模块是非常静态的，这很好——许多强大的编译器工具因此收益。而且，静态的语法已经被设计成可以和动态的，可编程的 loader API 协同工作。&lt;/p&gt;

&lt;h2 id=&#34;我何时能开始使用-es6-模块&#34;&gt;我何时能开始使用 ES6 模块？&lt;/h2&gt;

&lt;p&gt;如果你今天就要开始使用，你需要诸如 &lt;a href=&#34;https://github.com/google/traceur-compiler#what-is-traceur&#34; target=&#34;_blank&#34;&gt;Traceur&lt;/a&gt; 和 &lt;a href=&#34;http://babeljs.io/&#34; target=&#34;_blank&#34;&gt;Babel&lt;/a&gt; 这样的预处理工具。这个系列专题之前也有文章介绍了&lt;a href=&#34;https://hacks.mozilla.org/2015/06/es6-in-depth-babel-and-broccoli/&#34; target=&#34;_blank&#34;&gt;如何使用 Babel 和 Broccoli&lt;/a&gt; 去生成可用于 Web 的 ES6 代码。那篇文章的栗子也被&lt;a href=&#34;https://github.com/givanse/broccoli-babel-examples/tree/master/es6-modules&#34; target=&#34;_blank&#34;&gt;开源在了 GitHub 上&lt;/a&gt;。笔者的&lt;a href=&#34;http://www.2ality.com/2015/04/webpack-es6.html&#34; target=&#34;_blank&#34;&gt;这篇文章&lt;/a&gt;也介绍了如何使用 Babel 和 webpack。&lt;/p&gt;

&lt;p&gt;ES6 模块系统的主要设计者是 Dave Herman 和 Sam Tobin-Hochstadt，此二人不顾包括笔者在内的数位委员的反对，始终坚持如今你见到的 ES6 模块系统的静态部分，争论长达数年。Jon Coppeard 正在火狐浏览器上实现 ES6 的模块。之后包括 JavaScript Loader 规范在内的工作已经在进行中。HTML 中类似 &lt;code&gt;&amp;lt;script type=module&amp;gt;&lt;/code&gt; 这样的东西之后也会和大家见面。&lt;/p&gt;

&lt;p&gt;这便是 ES6 了。&lt;/p&gt;

&lt;p&gt;欢迎大家对 ES6 进行吐槽，请期待下周 &lt;a href=&#34;https://hacks.mozilla.org/category/es6-in-depth/&#34; target=&#34;_blank&#34;&gt;ES6 in Depth&lt;/a&gt; 系列的总结文章。
&lt;small style=&#34;float:right&#34;&gt;2015年08月21日发布&lt;/small&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;除此文之外，还推荐其他参考资料，因版权不明，我尽量多导流少转载：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://javascript.ruanyifeng.com/nodejs/module.html&#34; target=&#34;_blank&#34;&gt;CommonJS规范 - 阮一峰&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cnodejs.org/topic/5231a630101e574521e45ef8&#34; target=&#34;_blank&#34;&gt;exports 和 module.exports 的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2015/05/commonjs-in-browser.html&#34; target=&#34;_blank&#34;&gt;浏览器加载 CommonJS 模块的原理与实现 - 阮一峰&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2012/10/javascript_module.html&#34; target=&#34;_blank&#34;&gt;Javascript模块化编程（一）：模块的写法 - 阮一峰&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html&#34; target=&#34;_blank&#34;&gt;Javascript模块化编程（二）：AMD规范 - 阮一峰&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2012/11/require_js.html&#34; target=&#34;_blank&#34;&gt;Javascript模块化编程（三）：require.js的用法 - 阮一峰&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/amdjs/amdjs-api/wiki/AMD-(%E4%B8%AD%E6%96%87%E7%89%88&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;AMD&amp;rdquo;文档（中文版）存档&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>[译]有关个人发展的蟑螂理论——桑德·皮查伊</title>
      <link>https://qiansen1386.github.io/post/2016/03/the-cockroach-theory-for-self-development</link>
      <pubDate>Tue, 22 Mar 2016 08:57:22 +0000</pubDate>
      
      <guid>https://qiansen1386.github.io/post/2016/03/the-cockroach-theory-for-self-development</guid>
      <description>

&lt;h2 id=&#34;原文&#34;&gt;原文&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.quora.com/What-should-Indians-learn-from-Sundar-Pichai/answer/Shreyas-Vasant-Joshi?srid=3Eg3&amp;amp;share=9352f832&#34; target=&#34;_blank&#34;&gt;The cockroach theory for self development&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;译文&#34;&gt;译文&lt;/h2&gt;

&lt;p&gt;&lt;del&gt;很久很久以前，距离中土大唐十万八千里的德干高原上，有一间小餐馆。&lt;/del&gt;餐馆里不知哪里飞来的一只蟑螂落在了某位女士身上。&lt;/p&gt;

&lt;p&gt;这货当时就吓尿了！10万分贝，瞬间爆炸！&lt;/p&gt;

&lt;p&gt;惊惶欲绝&lt;sup&gt;1&lt;/sup&gt;的她的脸，颤抖中的声线；双手狂挥，旋转跳跃，她闭着眼；摆脱小强的企图，却无法实现。
她的反应影响了周边所有的人&lt;sup&gt;2&lt;/sup&gt;，她的同伴都开始惊慌起来。
这货最后终于摆脱了小强&lt;del&gt;估计是小强海盗船玩儿腻了233&lt;/del&gt;然而……他却飞到了同组另外一枚妹纸身上。
这下马上就要轮到这另一个美女重复刚才的闹剧的节骨眼，只见得这边厢餐厅服务员冲向前来解救他们了。
说时迟那时快，转眼之间小强又梯云纵到服务员的身上。这服务员双脚站定，气定神闲地观察起衬衫上小强下一步的出招。
当他觉得大局已定时，他用手指一把抓过小强，把它丢出了餐厅。&lt;/p&gt;

&lt;p&gt;我在一旁悠闲地嘬&lt;sup&gt;3&lt;/sup&gt;着&lt;del&gt;茶&lt;/del&gt;咖啡看着戏&lt;sup&gt;4&lt;/sup&gt;，此时我的脑洞里&lt;sup&gt;5&lt;/sup&gt;闪过几道流星。我就突然好奇，蟑螂真的他们这精彩戏码的内因么？
如果是，那么为什么服务生就没受影响？
他解决得近乎完美，没有任何慌乱之处。
不是蟑螂，而是女孩们对蟑螂带来的骚乱毫无办法才真正让她们灵台失守&lt;sup&gt;6&lt;/sup&gt;。
我开始认识到，并不是我老爸、我老板、我老婆对我的大喊大叫让我心烦；而是我对这些烦心事的无能为力，才真正让我心烦。
并不是路上堵车让我心烦，而是我对这堵车的无能为力，才真正让我心烦。
不仅仅是问题本身，而是我对这些问题的反应，才真正导致了我生命中的这些手足无措&lt;sup&gt;7&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;我从这里面学到的道理就是：
&lt;pre&gt;
  I understood, I should not react in life.
  I should always respond.
  The women reacted, whereas the waiter responded.
  Reactions are always instinctive
  whereas responses are always well thought of.
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;我明白了，我应该始终主动回应，而不是应激反应。&lt;br&gt;
这个娘们就属于条件反射的应激，而这个服务生才真正是主动回应。&lt;br&gt;
应激由直觉支配，而回应则总是源自深思熟虑。&lt;br&gt;&lt;/p&gt;

&lt;p&gt;原文引用者：这是一个多么好的认识&lt;strong&gt;生命历程&lt;/strong&gt;的角度啊！&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;该故事源自桑德·皮查伊（Sundar Pichai）作为一个 IIT-Stanford 校友兼谷歌负责 Chrome 和 Android 两个重磅业务的全球负责人时的精彩演讲。(现如今已经是 Google 帝国的掌舵人了)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;注解&#34;&gt;注解：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;sup&gt;1&lt;/sup&gt;：Panic=&amp;gt;惊慌，stricken =&amp;gt; 受挫折的；受…侵袭的；连起来（panic-stricken）叫做惊恐万状，此处译为惊惶欲绝，我给满分。&lt;/li&gt;
&lt;li&gt;&lt;sup&gt;2&lt;/sup&gt;: Contagious adj. 感染性的；会蔓延的&lt;/li&gt;
&lt;li&gt;&lt;sup&gt;3&lt;/sup&gt;: Sipping  &amp;lt;动名词&amp;gt;小口抿，啜饮&lt;/li&gt;
&lt;li&gt;&lt;sup&gt;4&lt;/sup&gt;: amusement 娱乐（真的是消遣的意思）&lt;/li&gt;
&lt;li&gt;&lt;sup&gt;5&lt;/sup&gt;：antenna 天线 =&amp;gt; the antenna of my mind 姑且翻译为脑洞吧，各位亲见谅，这儿没法直译吧。&lt;/li&gt;
&lt;li&gt;&lt;sup&gt;6&lt;/sup&gt;：这里 disturb 各种形态的运用写的是真好。我觉得我很难写出这样的句子，当然我的翻译也堪称完美&lt;/li&gt;
&lt;li&gt;&lt;sup&gt;7&lt;/sup&gt;：原文是混乱(chaos)，也讲得通，但是我觉得这样翻译不好。没办法就是自信，就是任性。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;全文翻译结束，感谢大家赏脸。&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;读后感&#34;&gt;读后感&lt;/h2&gt;

&lt;p&gt;接下来随便谈点感谢吧。&lt;/p&gt;

&lt;p&gt;怎么说呢？&lt;/p&gt;

&lt;p&gt;在我&lt;a href=&#34;https://qiansen1386.github.io/blog/2016/01/17/写于-2016-年初的一段话/&#34;&gt;人生低谷&lt;/a&gt;的时候，我有幸看到了这样一篇文章你应该能想象得到，这对我的人生是多么大的鼓舞。我当时就觉得这样一篇文章不能只静静地躺在 Quora 的故纸堆里。我要把它翻译过来，鼓舞更多在黑夜中不断前行的国人。
&lt;em&gt;Never Give Up&lt;/em&gt; 不应该只是句无关痛痒的片汤话，而更应该是满怀希望的呐喊和对生活艰辛的宣战檄文！&lt;/p&gt;

&lt;p&gt;Good Luck, And most importanly &lt;strong&gt;Have Fun&lt;/strong&gt;!&lt;/p&gt;

&lt;h3 id=&#34;后记&#34;&gt;后记&lt;/h3&gt;

&lt;p&gt;因为程序设计缺陷所导致的低可维护性，不应该成为导致我们沮丧的理由。我们应该想办法去响应它。选择无非是我个人换工作；我鼓动管理层重构现有系统；我改进现有系统，为重构争取时间。结果显而易见，我只得从事最艰难的那条路。当然如果公司因为坚持不重构系统最终导致反应缓慢，最终关门倒闭等等等等，那就不是我要考虑的问题。既然我已经尽全力去跟所有人去反馈到了这个问题，结果是这样，我只能尽全力去落实老板们的决定。To be fair，如果我是老板我也不会选择一下子投入这么大的一场豪赌般的技术路线调头。所以改变自己才能求活，话是不是这么说的。要帮老板努力把本不是选项的东西变成一个可选项才是我应该做的事情。&lt;/p&gt;

&lt;p&gt;因此我选择在本职工作的时段里努力分析解构现有的系统。现有系统固然问题很多，但是经过长期分析最突出的只有两个问题，基本都与 SQL 语句的低效有关。所以我在代码仓库的多个项目里，果断创建了名称类似于&lt;code&gt;feature/high-availability&lt;/code&gt;的分支。默默地用零敲碎打的时间里进行着多种试验。在此期间，可以说是学习到了大量的性能调优相关的知识。有 DBA 领域的，有日志分析领域的，有 DevOps 领域的，有容器领域的，有缓存领域的。身为团队领导，我的队员则很难帮助到这个层面。那两个月的时间里，我几乎可以说是孤军奋战。这些实验有的有少许效果，有的只是积累了经验。这些经验帮助我选择到了我目前认为是最可行的综合方案。在缓存优化，数据库优化，分布式运算等多种技术手段的综合作用下，但是最终的结果是我还算很满意的。程序的稳定性上了一个巨大的台阶啊。这种感觉就好像是……&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这种感觉估计很多程序员都体会过，当你设计的算法得出了正确结果的时候，当你自以为解决了一个海森堡 Bug（Heisenbug，表示不可重现）的时候，当你完成了一段精妙代码的时候，你摘下厚重的眼镜，推开铺满灰尘的书桌，打开办公室唯一的窗户，迎着夕阳把一只废弃的圆珠笔扔出窗外，然后冲着天空大喊：还有谁？这是一种拔剑四顾心茫然的情怀。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ituring.com.cn/tupubarticle/2796&#34; target=&#34;_blank&#34;&gt;《码农：Linus 与 Linux》之 Linus，一生只为寻找欢笑 作者:池建强&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Meg Jay: Why 30 is not the new 20</title>
      <link>https://qiansen1386.github.io/post/2016/03/why-30-is-not-the-new-20</link>
      <pubDate>Thu, 17 Mar 2016 05:52:09 +0000</pubDate>
      
      <guid>https://qiansen1386.github.io/post/2016/03/why-30-is-not-the-new-20</guid>
      <description>&lt;p&gt;YouTube 好视频分享。（原视频是李开复（Kaifu Lee）分享在Twitter的。）
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/-GG1rYgGJao&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;视频简介：
臨床心理學家 Meg Jay 提供二十歲的新世代年輕人一則的訊息：不同於一般觀點，你的二十歲人生並非無足輕重的十年。Jay在這場引人入勝的演講中說，儘管婚姻、工作及孩子是之後的事，不代表你不能現在就開始規劃。她提出三項建議，告訴二十多歲的年輕人該如何掌握人生中決定性的十年。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Frontend Learning Notes - Starting Point</title>
      <link>https://qiansen1386.github.io/post/2016/03/frontend-learning-note-1</link>
      <pubDate>Wed, 16 Mar 2016 07:03:51 +0000</pubDate>
      
      <guid>https://qiansen1386.github.io/post/2016/03/frontend-learning-note-1</guid>
      <description>

&lt;p&gt;Recently, I have migrated to Hugo Site generator as you can see. I was pretty disappointed with most of the theme.
Even those great themes seem to have flaws, or require customization. And then I thought, if none of the theme is perfect
for me, why not craft one by my own. Since I always been fascinated by the frontend development, I take it as a
oppertunaty to bring my frontend skill sets to another level.&lt;/p&gt;

&lt;p&gt;So I created the stupid &lt;a href=&#34;github.com/qiansen1386/hugo-polygon-theme&#34; target=&#34;_blank&#34;&gt;hugo-polygon-theme&lt;/a&gt;. I have got to say, the name is pretty arbitrary.
Even worse, I don&amp;rsquo;t have a clue even after I started. I start to realised that I need to have more input before I make an output.
Hence, I started my long-term(supposed to be) voyage. Here are the resources that absolutely worth more attention.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some of the resources are written in Chinese. Sorry for the inconvenience, coz those materials are slightly easier for me to understand.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;html5&#34;&gt;HTML5:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://html5boilerplate.com/&#34; target=&#34;_blank&#34;&gt;H5 boilerplate&lt;/a&gt; (Html5 boilerplate)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/h5bp/html5-boilerplate/blob/5.3.0/dist/doc/usage.md&#34; target=&#34;_blank&#34;&gt;H5 boilerplate Docs&lt;/a&gt; (Html5 boilerplate)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.initializr.com/builder?print&amp;amp;h5bp-content&amp;amp;modernizr&amp;amp;h5bp-chromeframe&amp;amp;h5bp-analytics&amp;amp;h5bp-favicon&amp;amp;h5bp-robots&amp;amp;h5bp-humans&amp;amp;h5bp-404&amp;amp;h5bp-adobecrossdomain&amp;amp;h5bp-css&amp;amp;h5bp-csshelpers&amp;amp;h5bp-mediaqueryprint&amp;amp;h5bp-mediaqueries&amp;amp;simplehtmltag&amp;amp;izr-emptyscript&#34; title=&#34;H5 boilerplate my custom build (a minimized version)&#34; target=&#34;_blank&#34;&gt;H5 boilerplate my custom build (a minimized version)&lt;/a&gt; (Html5 boilerplate)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;css&#34;&gt;CSS:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://semantic-ui.com/&#34; target=&#34;_blank&#34;&gt;Semantic UI&lt;/a&gt; (LESS)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://davidtheclark.com/excited-about-postcss/&#34; target=&#34;_blank&#34;&gt;Excited about postcss &amp;ndash; DAVID CLARK&lt;/a&gt; (PostCSS)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://benfrain.com/breaking-up-with-sass-postcss/&#34; target=&#34;_blank&#34;&gt;Breaking up with Sass: it’s not you, it’s me &amp;ndash; Ben Frain&lt;/a&gt; (PostCSS)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://twin.github.io/css-preprocessing-drama/&#34; target=&#34;_blank&#34;&gt;CSS Preprocessing Drama&lt;/a&gt; (PostCSS)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ai/about-postcss/blob/master/speech.md&#34; target=&#34;_blank&#34;&gt;Speech of &amp;ldquo;About-postcss&amp;rdquo; &amp;ndash; AI&lt;/a&gt; (PostCSS)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ashleynolan.co.uk/blog/postcss-a-review&#34; target=&#34;_blank&#34;&gt;PostCSS – Sass Killer or Preprocessing Pretender?&lt;/a&gt; (PostCSS)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://learnlayout.com/&#34; target=&#34;_blank&#34;&gt;Learn CSS Layout(I18N-provided)&lt;/a&gt; (CSS fundamentals)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itmyhome.gitbooks.io/css/content/&#34; target=&#34;_blank&#34;&gt;CSS 编码规范&lt;/a&gt; (CSS fundamentals)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://arguseye.gitbooks.io/postcss/content/plugins.html&#34; target=&#34;_blank&#34;&gt;PostCSS的相关知识&lt;/a&gt; (PostCSS)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;js&#34;&gt;JS:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://davidbcalhoun.com/2014/what-is-amd-commonjs-and-umd/&#34; target=&#34;_blank&#34;&gt;What Is AMD, CommonJS, and UMD?&lt;/a&gt; (Loading)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/TypeScript&#34; target=&#34;_blank&#34;&gt;TypeScript &amp;ndash;维基百科&lt;/a&gt; (TypeScript)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/smartkid/archive/2012/10/05/A_First_Look_Of_TypeScript.html&#34; target=&#34;_blank&#34;&gt;Typescript 初体验&lt;/a&gt; (TypeScript)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhongsp.gitbooks.io/typescript-handbook/content/&#34; target=&#34;_blank&#34;&gt;TypeScript Handbook（中文版）&lt;/a&gt; (TypeScript)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.75team.com/archives/882&#34; target=&#34;_blank&#34;&gt;[译]神马是AMD, CommonJS, UMD?&lt;/a&gt; (Translation of &amp;ldquo;What Is AMD, CommonJS, and UMD?&amp;rdquo;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;best-practics&#34;&gt;Best Practics&lt;/h3&gt;

&lt;p&gt;-&lt;a href=&#34;http://xiaodongtongxue.github.io/2016/03/21/Web%E5%89%8D%E7%AB%AF%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/&#34; target=&#34;_blank&#34;&gt;HTML5、CSS3、ES6编程规范 by 小栋同学&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>一个人的不作恶宣言</title>
      <link>https://qiansen1386.github.io/post/2016/03/dont-be-evil</link>
      <pubDate>Mon, 14 Mar 2016 04:33:40 +0000</pubDate>
      
      <guid>https://qiansen1386.github.io/post/2016/03/dont-be-evil</guid>
      <description>&lt;p&gt;读很火的微信贴&lt;a href=&#34;http://finance.ce.cn/rolling/201603/14/t20160314_9475267.shtml&#34; target=&#34;_blank&#34;&gt;为什么谷歌越来越牛逼，而百度却沦为江湖骗子？答案在这里&lt;/a&gt;有感&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/1759658/13750388/38750806-ea40-11e5-9007-b4e619251292.jpeg&#34; alt=&#34;w020160314481863857100&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我愿做一个有信仰的无神论者。
我坚信自由主义，利己主义与实用主义可以和正直善良的价值观完美契合。
恻隐之心难道不是人之常情？我愿用一生去证明唯利是图根本就是短视，绝不是利己主义的本意。无需神佛，人性本身便是光辉。
人会从本心出发自然而然的造福社会，因此自由必须是善良的基础。而强制的善良是伪善，强制的功利主义是以善为名的肆无忌惮。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用命令行真的比使用可视化界面好吗？</title>
      <link>https://qiansen1386.github.io/post/2016/03/why-command-line-is-oftenly-better-than-gui-in-cs</link>
      <pubDate>Tue, 08 Mar 2016 20:28:36 +0000</pubDate>
      
      <guid>https://qiansen1386.github.io/post/2016/03/why-command-line-is-oftenly-better-than-gui-in-cs</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;说明：转载自己的知乎答案。没办法写得太好了，让人自我陶醉。装逼一旦开始，要怎么才能停止……&lt;br&gt;&lt;/p&gt;

&lt;p&gt;问：&lt;strong&gt;「&lt;a href=&#34;https://www.zhihu.com/question/40868797/answer/88604865?group_id=690384002342752256&#34; target=&#34;_blank&#34;&gt;知乎：使用命令行真的比使用可视化界面好吗？&lt;/a&gt;」&lt;/strong&gt;&lt;br&gt;
为什么好多人都喜欢使用命令行呢？ 可视化界面不是计算机史上的进步吗？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看情况，但是具体到IT领域，很多种情况下敲代码比可视化强得多。以下详谈&lt;/p&gt;

&lt;p&gt;首先，命令行肯定不是绝对的好啊。对于普罗大众而言，显然可视化才是必须的。
比如游戏，文档编辑，数据分析，尤其是对于*不需要培训*的普通用户来说GUI必须是刚需……GUI是计算机普及的一大革命浪潮。乔总怎么会错呢。只是世事无绝对，命令行有命令行的好。&lt;/p&gt;

&lt;h3 id=&#34;那么什么情况下应该用命令行呢-命令行的优点有哪些呢&#34;&gt;那么什么情况下应该用命令行呢？命令行的优点有哪些呢？&lt;/h3&gt;

&lt;h4 id=&#34;1-效率-效率-效率-还是tmd效率&#34;&gt;1. 效率，效率，效率，还是tmd效率&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;1‘ 把某个目录下的所有*.raw文件复制到另一个文件夹，如果当前目录下鱼龙混杂，你怎么处理呢？
用命令行调用 robocopy / rsync，加特定参数就可以很方便得进行处理，这边复制完了，那边文件还没挑完呢。&lt;/li&gt;
&lt;li&gt;2’ 通用的代码，我可以把指令写成脚本，下次直接执行就好了。但是GUI你要一遍一遍地重复，没有任何可以继承沉淀下来的东西&lt;/li&gt;
&lt;li&gt;3‘ 在Linux下命令行可以操作系统的几乎任何组件，Windows略差，但最近进步也很明显。反之图形界面的话，你需要任务管理器管理进程，用“服务”工具管理服务，用计划任务管理定时任务。要顺利完成部署任务，你要同时开多少软件呢？翻来覆去得点来点去你不烦么？另外，下次部署你又要重做一遍，请参考上一小条。&lt;/li&gt;
&lt;li&gt;4‘ 一个不带界面的Linux发行版，连服务器数据库应用程序等等，全部加载到内存可能只有一两百兆。一个入门级的VPS就搞定了。但，如果加上GUI，随便一个GUI都要100M到500M之间，服务器主业是用来服务用户的，不是服务运维的。你可以用命令行做到同样的事，多浪费几倍的资源，用户却得不到任何显著地好处，这种事企业是不会做的。&lt;/li&gt;
&lt;li&gt;5’ etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;2-稳定-可移植性强&#34;&gt;2. 稳定-&amp;gt;可移植性强&lt;/h4&gt;

&lt;p&gt;命令行一个命令可以复制粘贴，分享给天底下所有的运维开发，对于继续进行操作的程序猿而言，查一条指令，可比扒翻几篇教程容易多了。GUI软件则不然，以万恶的微软举例，每一代Office界面都不同吧？菜单都有区别吧？上一代的教程未必适用于下一个版本吧？&lt;/p&gt;

&lt;h4 id=&#34;3-鼠标不适合快速操作-与其来回切换鼠标键盘-不如始终使用键盘&#34;&gt;3. 鼠标不适合快速操作，与其来回切换鼠标键盘，不如始终使用键盘。&lt;/h4&gt;

&lt;p&gt;要提高操作效率，很多情况下都会强调要背快捷键。键盘的可输入信息比鼠标高太多了。而且键盘操作更简单，按下去就是按下去，容错性很强；而鼠标则需要点击到特定位置，对按钮的大小，视线与鼠标轨迹等等都有要求，UX设计不好的软件用鼠标很难用。况且仅仅用鼠标你是什么都做不到的，但是仅用键盘，你可以做到大多数事情。&lt;/p&gt;

&lt;h4 id=&#34;4-开发省心省钱&#34;&gt;4. 开发省心省钱&lt;/h4&gt;

&lt;p&gt;设计UI是需要成本的，调整UI更是件费心费力的工作。而程序猿写程序顺带开发一套命令行界面很轻松，UX的设计简单很多，也不需要太多美学素养。这一点在互联网行业更是及其重要的。用一个shell界面，开发测试运维压测部署全部都能做，而在Web界面里模仿Windows界面比模仿控制台界面要难一万倍。&lt;/p&gt;

&lt;p&gt;你们看这些是不是已经很多了，但是其实还有一个很重要的内容没有讲到呢！那就是&lt;strong&gt;DevOps&lt;/strong&gt;！用脚本批量化自动化地同时处理海量服务器节点，部署运维，错误回滚，平稳降级，弹性扩容等等领域，如果没有脚本和命令行是不可能做到的。计算机的发展趋势就是把“人”的因素从机器集群中剥离出去，从而极大得解放生产力，获得更稳定的业务结构。
&lt;strong&gt;但是命令行对新手不太友好，能否熟练应用命令行算是一个高手和新手能显著拉开效率差距的点。&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Recursion-Demo in TypeScript &amp; How it get better</title>
      <link>https://qiansen1386.github.io/post/2016/03/recursion-demo-in-typescript</link>
      <pubDate>Mon, 07 Mar 2016 10:41:06 +0000</pubDate>
      
      <guid>https://qiansen1386.github.io/post/2016/03/recursion-demo-in-typescript</guid>
      <description>&lt;p&gt;I wrote this to practice of TypeScript and also to demonstrate recursion to my friend. This is a little challenge sent to me by one of my friend who is self-learning python, and recursion at the same time. Basically is about to keep removing all the elements whichever index is odd from the array, till there is only one left, and return the index of the survivor. Input the &lt;strong&gt;N&lt;/strong&gt; of elements and output the index &lt;strong&gt;X&lt;/strong&gt;.&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;500&#34; src=&#34;//jsfiddle.net/qiansen1386/yLdr5082/embedded/js,html,result/&#34; allowfullscreen=&#34;allowfullscreen&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Before I wrote this, I already know it is the dummiest(also most reliable) solution. Basically, it waste both Ram and execution time. There is no human-intelligence involved so far, just pure brute-force method which straight away simulate the whole process and return its predicting result. Just it is not really a prediction, but just a simulation&amp;hellip; After I observe the result, I laughed. What a dumb question, and I can&amp;rsquo;t believe how silly I am, LOL.&lt;/p&gt;

&lt;p&gt;Let put the result away first, and take a little bit time to look at the big O. Accoding to my code, The O is in the range &lt;code&gt;log2(n-1)&amp;lt;O&amp;lt;=log2(n)&lt;/code&gt;. Classic! Now, if you notice, the result is always the greatest &lt;code&gt;2^n&lt;/code&gt; which does not exceed the &lt;strong&gt;n&lt;/strong&gt;. we can change the algorithm to a simplier formula:&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;500&#34; src=&#34;//jsfiddle.net/qiansen1386/zvLu7re5/embedded/js,html,result/&#34; allowfullscreen=&#34;allowfullscreen&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;What is the O? Actually it&amp;rsquo;s still almost the same, the performance and amount of code have improved though.
What is the ultmate solution, use one calculation, the ultmate O(1) solution:&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;500&#34; src=&#34;//jsfiddle.net/qiansen1386/cvasL16t/embedded/js,html,result/&#34; allowfullscreen=&#34;allowfullscreen&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt; 

&lt;p&gt;That&amp;rsquo;s it! How silly I am&amp;hellip; But I am so happy about it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>写于 2016 年初的一段话</title>
      <link>https://qiansen1386.github.io/post/2016/01/written-in-early-2016</link>
      <pubDate>Sun, 17 Jan 2016 06:02:46 +0000</pubDate>
      
      <guid>https://qiansen1386.github.io/post/2016/01/written-in-early-2016</guid>
      <description>

&lt;h2 id=&#34;年轻人最不缺的就是时间-么&#34;&gt;年轻人最不缺的就是时间……么？&lt;/h2&gt;

&lt;p&gt;2015 年跨年之际，知名文化科普读书卖书财经评论创业指导粉丝经营活动策划品牌构建公司——罗辑思维，举办了一场盛大的跨年演讲《时间的朋友》。
其中罗振宇分享自己年过 40 的人生信念的时候说了以下两句台词&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;大学生为什么就不能去创业？他们本来就是无产者，成本如此之低，为什么不试试？年轻人最能浪费的就是时间。&lt;/li&gt;
&lt;li&gt;我写的东西一定有意思么？未见得吧。我拼的就是早上六点我不睡觉，比我聪明有天赋的媒体人还在睡觉。我的优势就是我岁数越大，我的觉就越少。（有删改）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这尼玛对年轻人好不公平23333&lt;/p&gt;

&lt;p&gt;每个人每天只有24枚硬币，年轻人要交8到10枚的日租。而剩下的钱怎么花则是一个一辈子的问题。在网上和一个人的距离可谓咫尺天涯，瞬息万里。一个若干年没见的好友，在网上就好像天天俯首可见的邻里。正所谓士别三日当刮目相待，有的时候一个人过了十好几年却仿佛都活到狗身上去了，辣么无知辣么无聊辣么没有深度，鸡毛蒜皮又油盐酱醋，虽然知道世界上包括自己在内百分之八十的人都是傻逼，但是发现自己是个傻逼这件事本身特别二逼。知识有多么的让人愉悦，无知就有多么的让人惊悚。倘若每天都任凭游戏视频电视动漫占据人的一生，十年之后，不知道彼时的自己那时该有多空虚，多么肤浅。这样的未来，让人如何接受。不为了别人，也要努力拼搏，努力学习，努力进取。不再像年轻时那般，立志于造就一个有我比没有我略好的世界，只是为了让现在的自己真诚地面对自己的本心，让将来的自己可以不必后悔。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;题外话：哲学这东西真的需要多听百家之言啊。我暂时不做李开复的信徒了，今天我是尼采的信徒，而明天我会信奉什么道理就让明天的我再去决定吧。（顺便李开复自己貌似也开始因自己大病初愈与世界的顽固两方面原因而反思“世界因你而不同”的信条）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;开心就好&#34;&gt;开心就好&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;老子曰：“大道廢，有仁義；智慧出，有大僞；六親不和，有孝慈；國家昏亂，有忠臣”。故自勉，善战者无浩浩之功，何须宠辱皆惊。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;人生顺畅通达之时，自诩不喝鸡汤，不求安慰。曾暗讽同僚亲朋与故旧：常励志者必自哀，自信何须鸡汤补，开心何须口号提。人生若是能一帆风顺，此番说法倒也无可厚非。然而人生百年怎可能让你无名小卒事事平顺，所向披靡。人生入逆境，尝以先前之言自讽，乃叹曰，此真乃伤口撒盐，锉骨诛心之语。人生已经如此凄切，何须落井下石。可知，先前万事平顺之说，乃是自欺。若神思安定，当不至于内心幽暗至此。人生波波折折，或起或落，乃是天道。顺天道而为之，方能成就人为。事事与他人相较，别人做得好则自勉，我也可以；做得不好则飘飘然，惰性乃出；每每关切家国天下，何曾顾得自身酱醋餐茶。You only live once， why the hell give a shit about others. Success doesn&amp;rsquo;t matter, happiness mather, yeah, do only the thing you love and do it well.&lt;/p&gt;

&lt;p&gt;几天前，雷军在公司内部年会中谈了以下内容，如晨钟暮鼓振聋发聩：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;年初我们定了一个8000万台的销售预期，面对这样的市场形势，不知不觉我们把预期当成了任务。我们所有的工作，都不自觉地围绕这个任务来展开，每天都在想怎么完成。在这样的压力下，我们的动作变形了，每个人脸上都一点一点失去了笑容。
。。。省略部分内容
所以我们定下了2016年最重要的战略：开心就好。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;是的啊，如果连&lt;strong&gt;开心&lt;/strong&gt;都成了奢望，还怎么有脸说可以给世界带来&lt;strong&gt;爱与希望&lt;/strong&gt;？&lt;/p&gt;

&lt;p&gt;所谓士气，拆开揉碎了讲，不过也就是每天开开心心，做事热情高效。你自己心情如此之糟，连带你的同僚上下都不爽，何苦来哉。缘分断了就是断了，与其相濡以沫不如相忘于江湖。再续前缘神马的多无聊，世界这么大你倒是去转转啊23333&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;有的时候觉得自己很消极，尼采说嫉妒不是罪恶，可是有的时候又觉得胜负心真是各种苦难的源泉。自我尊重自我觉醒与自我为难相提并论时，怎么求解？
&lt;pre&gt;
立功立言立德，像雾像雨像风。
与其励志成功，不若难得平庸！
有钱不过三餐，怎比一帘幽梦。
闲来两行代码，窗外万盏霓灯。
时人驰往苍穹，我自垂钓江中；
彼可摘星揽月，叟且醉枕清风。
&lt;/pre&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这，便是我在 2015 年的年末最大的感受。&lt;/p&gt;

&lt;p&gt;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/xCvV_4qu78U&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
顺便分享一个毫不煽情而又振聋发聩的演讲。（另，袁腾飞也曾发表有类似于“生活在自我营造的 bubble 里”一样的自陈）&lt;/p&gt;

&lt;p&gt;&lt;small style=&#34;float:right&#34;&gt;写于公元二零一六年一月下旬&lt;/small&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>终于成功了</title>
      <link>https://qiansen1386.github.io/post/2016/02/first-ever-post</link>
      <pubDate>Mon, 01 Feb 2016 06:53:50 +0000</pubDate>
      
      <guid>https://qiansen1386.github.io/post/2016/02/first-ever-post</guid>
      <description>&lt;p&gt;成功啦，哈哈哈。
现在只要&lt;code&gt;push&lt;/code&gt;到&lt;code&gt;source&lt;/code&gt;分支就能实时构建并推送到&lt;code&gt;master&lt;/code&gt;。大家可以看我的 &lt;a href=&#34;https://github.com/qiansen1386/qiansen1386.github.io&#34; target=&#34;_blank&#34;&gt;github repo&lt;/a&gt;
具体设置请参考下面的参考链接，Wercker 并不会很难，还是挺好理解的。
Wercker 也真的很好用，运用 docker 技术的自动化产品不要太方便，真的可以不用 jenkins 了。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;主要参考了：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://fatestigma.github.io/2016/01/29/%E4%BD%BF%E7%94%A8-wercker-%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/&#34; target=&#34;_blank&#34;&gt;使用 Wercker 自动化部署静态博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/tutorials/automated-deployments/&#34; target=&#34;_blank&#34;&gt;【官方】Automated deployments with Wercker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.coderzh.com/2015/08/29/hugo/&#34; target=&#34;_blank&#34;&gt;【coderzh CoderZh Blog】使用hugo搭建个人博客站点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kaichu.io/2015/07/my-first-post/&#34; target=&#34;_blank&#34;&gt;【kaichu.io】在 Github Pages 建立 Hugo 靜態網站&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>