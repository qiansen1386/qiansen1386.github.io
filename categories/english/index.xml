<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>English on 东方孤思子のBlog
Paris·Qian Sen</title>
    <link>https://qiansen1386.github.io/categories/english/</link>
    <description>Recent content in English on 东方孤思子のBlog
Paris·Qian Sen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 29 Aug 2016 17:54:45 +0800</lastBuildDate>
    <atom:link href="https://qiansen1386.github.io/categories/english/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>DTO, Entity, Value Object, POJO/POCO/POPO 的区别</title>
      <link>https://qiansen1386.github.io/post/2016/08/dto-vs-value-object-vs-poco</link>
      <pubDate>Mon, 29 Aug 2016 17:54:45 +0800</pubDate>
      
      <guid>https://qiansen1386.github.io/post/2016/08/dto-vs-value-object-vs-poco</guid>
      <description>

&lt;h2 id=&#34;dto-vs-entity-vs-value-object-vs-pojo-poco-popo&#34;&gt;DTO vs Entity vs Value Object vs POJO/POCO/POPO&lt;/h2&gt;

&lt;p&gt;Definations:&lt;/p&gt;

&lt;p&gt;DTO =&amp;gt; Data Transfer Object, a object which contains no logics, used to pass through application bounderies.&lt;/p&gt;

&lt;p&gt;Entity =&amp;gt; Value Object + identity.(We will not talk about Entity in following articles, you get the idea, they are the same)&lt;/p&gt;

&lt;p&gt;Value Object =&amp;gt; Value Object can contains methods&lt;/p&gt;

&lt;p&gt;POJO/POCO/POPO =&amp;gt; Plain Object with/without State(Data properties) + Behavior(methods), both ValueObject &amp;amp; DTO can be considered as POJO.&lt;/p&gt;

&lt;p&gt;ref: &lt;a href=&#34;http://enterprisecraftsmanship.com/2015/04/13/dto-vs-value-object-vs-poco/&#34; target=&#34;_blank&#34;&gt;http://enterprisecraftsmanship.com/2015/04/13/dto-vs-value-object-vs-poco/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Celibate By Choice?</title>
      <link>https://qiansen1386.github.io/post/2016/06/celibate-by-choice</link>
      <pubDate>Wed, 22 Jun 2016 23:08:53 +0800</pubDate>
      
      <guid>https://qiansen1386.github.io/post/2016/06/celibate-by-choice</guid>
      <description>

&lt;h2 id=&#34;独身主义的女孩&#34;&gt;独身主义的女孩&lt;/h2&gt;

&lt;p&gt;I met a girl today, who was disappointed in love a few months ago. When I was tried to resume her faith on marrige,
she explained a nearly-celibacy idea about that love could inevitably cause both parties to change. Of cource, I couldn&amp;rsquo;t convince her in that short amount of time, so I never intended to do so.&lt;/p&gt;

&lt;p&gt;Everybody changes, they change constently, and they changes both mentally and physically, no matter you are in a relationship or not. That is my experience. For me, clinging about whether you will still be you or not would be a compeletely non-sence. Here is a fun fact, every body-cell have their life-span, it could be a few months or few years, or even few days(sperm). Once they reached a end, usually they will be replaced with a new one. Many people believes that 7 years later, there will be no old cells, thus we would become essentially new people. I don&amp;rsquo;t want to argu biologic here, what I want to say is there won&amp;rsquo;t be a INNER-SELF, just no! We only live at this moment, in the next moment, if our moods change we might behave very very differently. If you could not even predict next 5 minutes, why bother about 5 years?&lt;/p&gt;

&lt;p&gt;As I said, I didn&amp;rsquo;t buy her idea at that moment, however when I re-process the whole story, I gotta say I was deeply inspired and influenced by her innocent and wild thoughts. Why? I still remember someone saids &amp;ldquo;a criteria for a good merrage is the life-styles of both parties might shift toward a better healthier way, because of each other&amp;rdquo;. I used to believe it and still do. However, after the conversation I started to question about the opposite side, Like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to defined a healthy life-style?&lt;/li&gt;
&lt;li&gt;What if they couldn&amp;rsquo;t manage to get a common view? (like my father and mather)&lt;/li&gt;
&lt;li&gt;What if they changed towards bad life-styles instead?&lt;/li&gt;
&lt;li&gt;What if there happens to be a party who don&amp;rsquo;t want to compromise or change at all?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Clearly there are lots of challenges to be solved in the future. Because I don&amp;rsquo;t have a experience, I could not come out of a legit answer from no where, and assume that is the truth once for all. Hence I could hardly answer her doubt.&lt;/p&gt;

&lt;p&gt;There is one thing I can say, uncertainty will bring along fear, but mostly it is born of diffidence. Just like If we are not certain about getting to work, we would probably tend to shun away from it, like extending your study, or procrastinating at home. Everyone experience that mind-transition, to be fair, it might not be very enjoyable. But like what Dory do, if you don&amp;rsquo;t know what to do, just keep swiming. eventually you will make it! Once you find a job, working will no longer be a uncertain mysterious duanting monster for you. It is just a new way to study, and get paid! Once you find your true love, you probably would find every single change to improve yourself to better fit your mate. If you become happier than ever before, would changes really considered a bad thing? If one of parties refuse to swim forward, severance might not be a bad thing.&lt;/p&gt;

&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=530 height=86 src=&#34;https://music.163.com/outchain/player?type=2&amp;id=27678693&amp;auto=1&amp;height=66&#34;&gt;&lt;/iframe&gt;
&lt;iframe src=&#34;http://open.iqiyi.com/developer/player_js/coopPlayerIndex.html?vid=919c8f7392a51b097483dd4e4e57dd81&amp;tvId=201709700&amp;accessToken=2.f22860a2479ad60d8da7697274de9346&amp;appKey=3955c3425820435e86d0f4cdfe56f5e7&amp;appId=1368&amp;height=100%&amp;width=100%&#34; frameborder=&#34;0&#34; allowfullscreen=&#34;true&#34; width=&#34;100%&#34; height=&#34;100%&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Quora：烂程序猿的特征都有啥？</title>
      <link>https://qiansen1386.github.io/post/2016/05/what-are-the-characteristics-of-a-bad-software-engineer</link>
      <pubDate>Thu, 12 May 2016 22:47:39 +0800</pubDate>
      
      <guid>https://qiansen1386.github.io/post/2016/05/what-are-the-characteristics-of-a-bad-software-engineer</guid>
      <description>

&lt;h2 id=&#34;what-are-the-characteristics-of-a-bad-software-engineer&#34;&gt;What are the characteristics of a bad software engineer?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.quora.com/What-are-the-characteristics-of-a-bad-software-engineer/answer/Nachiket-Naik?srid=3Eg3&#34; target=&#34;_blank&#34;&gt;Originally answered by Nachiket Naik, software developer, artist, reader, writer, thinker and compassionate human being&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;据我观察，烂软件工程师有有以下几种特征：&lt;/p&gt;

&lt;p&gt;In my experience, these are some characteristics of bad software engineers:&lt;/p&gt;

&lt;p&gt;壹 &lt;strong&gt;Stack Overflow 的搬运机器人&lt;/strong&gt;：这类人一发现有报错，就顺手 Google 一下，接着把他们查到的第一个方法拿来试。问题不在于从 stack Overflow 搬运，私以为 SOF 有比任何参考手册和文档都更多的解决方案内容。所以别误会，SOF 即便不是最好也是超好的资源。问题在于他不理解这些方案可能造成的影响，不清楚其适用场景，不确定其是否真正能对应手头的问题。什么都不知道，就瞎 JB 照搬。比起近在眼前的代码和系统，人们反而更愿意去相信网络论坛的说法，这种事我见得多了。&lt;/p&gt;

&lt;p&gt;1) &lt;strong&gt;The Stack Overflow bot&lt;/strong&gt;: This person ran into an error, did a quick Google search and applied the first solution they found. The problem here is not that of copying from Stack Overflow. I think there are more solutions on Stack Overflow than any reference guide or manual. Don&amp;rsquo;t get me wrong, it&amp;rsquo;s a wonderful resource, if not the best. The problem is the robotic application of it without understanding the consequences. The problem is the application of it without fully understanding the context of it and whether it really applies to the current problem at hand. More often than not, I have seen people believe more of what they see on online forums than the code/system in front of them.&lt;/p&gt;

&lt;p&gt;贰 &lt;strong&gt;“老子又不是测试人员”&lt;/strong&gt;：我不用测试我的代码，那是测试人员的工作。即便在这个敏捷开发的方法论已经无比成熟的年代，我也没觉得吃这种态度的人比之前少了多少。人们依旧对测试十分懈怠。一部分源于他们对部署测试环境不感兴趣；另一方面，他们缺乏测试相关的系统知识。（还部分源于开发者社群对测试人员心照不宣的轻视）&lt;/p&gt;

&lt;p&gt;2) &lt;strong&gt;The I-am-not-a-tester&lt;/strong&gt;: I don&amp;rsquo;t need to test the code; that is the job of the testers. I don&amp;rsquo;t think that even in this age of mature Agile methodologies, this attitude has waned. There is still an inertia against testing their code. Part of it comes from lacking the interest to set up a testing environment and partly from lack of coherent knowledge of testing. (Is it also partly due to an unspoken stigma against testers in the developer community.)&lt;/p&gt;

&lt;p&gt;叁 &lt;strong&gt;“我讨厌文档”&lt;/strong&gt;：一些人认为代码文档必须写得很诗意，而他们写不出这种东西，由此推出写文档肯定不是他们的工作范畴。我觉得这是开发长效稳定代码的最大威胁！好的软件不是提供成千上万好功能的软件。好软件是只包含少许功能，却能被众人一直使用，还能被成百上千人查阅、更新、修改。这种对技术交流和精准细致的文档毫不关心的程序猿将成为公司成功的重大阻碍。&lt;/p&gt;

&lt;p&gt;3) &lt;strong&gt;The I-hate-documentation&lt;/strong&gt;: Some people believe that code documentation must be poetic and hence they lack the skill to do it, ergo not their job. In my opinion, these are the #1 foes of sustainable software. Good software is not software that provides a million cool features. Good software is one that has a few good features that are used consistently by many people and read/updated/modified by a thousand. This brand of developers who believes less in technical communication and precise and detailed documentation is the greatest weed to a company&amp;rsquo;s success.&lt;/p&gt;

&lt;p&gt;肆 &lt;strong&gt;代码之丑&lt;/strong&gt;：我的代码能用，然而：（译注：有本书叫代码之美）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;我有表意不明的变量名：x, flag, str, arr 等等&lt;/li&gt;
&lt;li&gt;我写的大多数代码都包含在一个冗长的方法中&lt;/li&gt;
&lt;li&gt;没有缩进（译注：还有乱缩进）&lt;/li&gt;
&lt;li&gt;没有一以贯之的编码规范、风格&lt;/li&gt;
&lt;li&gt;全局变量到处瞎鸡巴放&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这是我个人最反感的一点。这并不代表代码很差，它很可能还是一段颇具巧思的好代码。即便锦帽貂裘，若是丢进了垃圾堆里，也没人找得到它，没人愿意清理它，跟别提佩戴和使用了。（译注：一句明珠暗投，怎么英文说起来这么复杂啊，嘲讽 +1s）&lt;/p&gt;

&lt;p&gt;4) &lt;strong&gt;The ugly&lt;/strong&gt;: My code works, but:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I have variables named x, flag, str, arr, etc.&lt;/li&gt;
&lt;li&gt;Most of what I write is in one giant method.&lt;/li&gt;
&lt;li&gt;There is no indentation.&lt;/li&gt;
&lt;li&gt;No consistent coding convention or style.&lt;/li&gt;
&lt;li&gt;Global variables spewed all over the place, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the most annoying thing for me personally. It&amp;rsquo;s not the issue that the code is bad. It could potentially be the greatest piece of code written. But if a diamond necklace is buried in the debris of the Titanic, nobody will find it, and nobody will want to clean it, wear it, use it.&lt;/p&gt;

&lt;p&gt;伍 &lt;strong&gt;只看重短期利益&lt;/strong&gt;：他写代码；他部署代码；他走了。他不研究业务逻辑，他不在乎学不学得到东西。给他一段代码，他会连夜搞它一整晚，第二天他回给你的是一个已经修好的的软件。除此之外的东西就一概欠奉了。有时候，开发者要有点私心，人应该不仅仅着眼于交活日期，也要注重经手这个项目你能学到什么。&lt;/p&gt;

&lt;p&gt;5) &lt;strong&gt;The short-term investor&lt;/strong&gt;: He codes. He deploys. He moves on. No attempt to learn the problem. No interest in the domain. Just give this guy a piece of code, he will slog on it overnight and hand it over. You got a fix/working software. Nothing more achieved from it. Sometimes, it&amp;rsquo;s important that you have certain selfishness in the developer, one who not only cares about the deadline, but also cares about what he/she got to learn from it.&lt;/p&gt;

&lt;p&gt;陸 &lt;strong&gt;异议人士&lt;/strong&gt;：“这不是老子干的”，“写得shenmegui”，“反正不是我的问题”，“这跟我的修改无关，这是XX组的XXX的错”，“我讨厌这个（每天都 BB 这句话至少 10 次)”，“我没法修这东西，谁搞坏的让谁来修”
呵呵，写这个代码的那货已经不在了，你什么时候走呢？&lt;/p&gt;

&lt;p&gt;6) &lt;strong&gt;The protester&lt;/strong&gt;: &amp;ldquo;I didn&amp;rsquo;t do this&amp;rdquo;. &amp;ldquo;This looks bad&amp;rdquo;. &amp;ldquo;Not my problem&amp;rdquo;. &amp;ldquo;This isn&amp;rsquo;t related really to my fix, but someone way over there made a mistake&amp;rdquo;. &amp;ldquo;I hate this (loop this sentence 10 times a day)&amp;rdquo;, &amp;ldquo;I can&amp;rsquo;t fix this, get the person who made this code to fix it&amp;rdquo;.
The person who coded that mistake has moved on, when will you?&lt;/p&gt;

&lt;p&gt;柒 &lt;strong&gt;独裁者&lt;/strong&gt;：“My way or the highway”（要么听我的要么滚）是他们的信条。他们对人不对事，这是场他们的解决方案与你的解决方案之间的对决。我想这里面肯定有不少争吵。他们会回来指责你的代码，即使你的代码运行良好，测试完善，看起来完全没问题，他们也会很不爽。这些人是工作效率的一大制约，并且在压力来临的时候，他们也是最先崩溃的，最先跳起来指指点点。即便他们是很有经验很好的开发者，他们对团队也是不利的。（译注：个人感觉后面的是在讲情商问题，而且有点主观臆断外加夸大其词。如果你下属的计划很糙，那么由你独裁未必是错，不过注意不要捞过界。工程领域是很黑白分明的，只讲效率不讲人情，真理只有一个的时候，应有当仁不让于师的精神。处处妥协结果做出来的东西没法用是不负责任的做法）&lt;/p&gt;

&lt;p&gt;7) &lt;strong&gt;The dictator&lt;/strong&gt;: My way or the highway is their motto. It&amp;rsquo;s their &amp;ldquo;ideas&amp;rdquo; vs &amp;ldquo;your ideas&amp;rdquo;, not &amp;ldquo;project ideas&amp;rdquo;. It&amp;rsquo;s their solution vs your solution. I bet there will be an argument for sure. Somehow they will keep coming back to a part of code that you implemented. It somehow discomforts them even if it works, tests, and looks perfectly fine. This person is a big bottleneck to productivity and will be the first person to crumble under pressure and start pointing fingers. This person is not good for the team, however experienced/good a developer he may be.&lt;/p&gt;

&lt;p&gt;捌 &lt;strong&gt;怕事鬼&lt;/strong&gt;：当某位 JAVA 程序猿听到他要被迫写一段 Python 代码时，傻掉了。当某位程序猿发现需要改注册表时，慌掉了。当程序猿发现必须往数据库里添些东西的时候，吓哭了。这些人会竭尽所能地避免走出他们的舒适区。他们对触碰系统的某些部分有着非同寻常的迷信忌讳。见得多了，我就明白了，这些现象对新手开发者而言还挺常见的。好的程序猿则更倾向于或快或慢地探索舒适区之外世界。&lt;/p&gt;

&lt;p&gt;8) &lt;strong&gt;The overcautious&lt;/strong&gt;: The Java developer who just froze when he learned that he would have to write a Python script. The developer who panicked on learning that something in the registry needs changing. The developer who cringes at having to input things in the database. These people will do anything to avoid getting out of their comfort zone. They have weird superstitions related to having to touch certain parts of the system. I have learned, from personal experience, that this phenomenon is common with new developers. Good developers show a tendency to slowly/swiftly move out of their comfort zone in exploration.&lt;/p&gt;

&lt;p&gt;玖 &lt;strong&gt;一芥莽夫&lt;/strong&gt;：忘了备份，快照，同时开好多代码的工作目录，忘记登出系统，把生产环境的代码乱放等等。同样，这些也是菜鸟的常见错误，等他们慢慢成长，会变得越来越专业的。&lt;/p&gt;

&lt;p&gt;9) &lt;strong&gt;The careless&lt;/strong&gt;: Forgets to take a backup, snapshots, has multiple working directories of code, leaves system out, prints in production code, etc. Again, this is a newbie tendency and gets better with more professional exposure.&lt;/p&gt;

&lt;p&gt;拾 &lt;strong&gt;懒惰的默认式程序猿？&lt;/strong&gt;他们骄傲于能够快速找到窍门让系统恢复正常。他们总能给目测无比复杂的问题，找到神奇如魔法一般的解决方案。而我的经验是，这些花招里十个有九个是银样蜡枪头，就表面功夫而已。这些差劲的花招早晚有一天会坏掉，而且被迫修复它们的代价会比当下认认真真地修好它所花的时间成本更高。&lt;/p&gt;

&lt;p&gt;10) &lt;strong&gt;The lazy pseudo-hacker&lt;/strong&gt;: They pride themselves at being able to trick the system into working. They find magical solutions to seemingly complex problems. My experience says that 9 out of 10 times, it&amp;rsquo;s just a facade. The hack is bad and will crash sooner or later and will cost much more than having to deal with it, with extra time right now.&lt;/p&gt;

&lt;p&gt;补充：留言，点赞，开新楼之类的废话，不翻译了。
EDIT: Please drop in comments. Maybe we could start a new follow-up question as to how a managers/peers/colleagues could handle these cases because almost all of them can be helped to become better. A design pattern of sorts for fixing programmer smells. :-)&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Updated Dec 5, 2014&lt;/small&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;后记： 我觉得这个篇文章的作者的确点出了几个点，不过就我个人感觉这完全是一种基于过往经验的偏见。举例而言，Linus 就是独裁者；而好的程序猿对代码都有洁癖；天天做恶心的代码，没有人不抱怨的。情商的养育是一个系统的话题，情商不行，干什么都不行，也不光是程序猿了啊。扯多了就扯远了。总之这是篇有水分的文章，有一定的观点但也不能尽信，因为本来美德与恶念就是一体的两面。
另外，程序猿一言不合，拔键盘相向我觉得也挺好理解的吧。不说了，我和同事去医院缝针了。Yes, My patch wins!
好吧，我也是 dictator 型的，my way or no way，我的必然是最简单最好懂也最好维护的方案。不过我一般不强迫他们，如果 Design pattern 的基础不牢固，有些抽象方法你解释给他们，他们也听不懂。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>学舌与跟读 —— 学英语の最速方法！GET√</title>
      <link>https://qiansen1386.github.io/post/2016/05/fastest-way-to-learn-english</link>
      <pubDate>Thu, 12 May 2016 22:39:42 +0800</pubDate>
      
      <guid>https://qiansen1386.github.io/post/2016/05/fastest-way-to-learn-english</guid>
      <description>

&lt;h2 id=&#34;what-is-the-fastest-way-to-learn-english&#34;&gt;What is the fastest way to learn English?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.quora.com/What-is-the-fastest-way-to-learn-English/answer/Jathon-Thompson?srid=3Eg3&#34; target=&#34;_blank&#34;&gt;Originally answered by Jathon Thompson, I am TESOL certified to teach English.&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;若你想听懂英语，从而更流畅地说，更快速地回应别人。那么，我必须地隆重地安利你尝试下最佳方法——“&lt;strong&gt;学舌与同步跟读法（Parrot and Overshadow Method）&lt;/strong&gt;”&lt;/p&gt;

&lt;p&gt;If you want to be able to hear and understand English that is spoken quickly and be able to respond quickly, then I would say the best way is to try the &amp;ldquo;&lt;strong&gt;Parrot and Overshadow Method.&lt;/strong&gt;&amp;ldquo;&lt;/p&gt;

&lt;p&gt;践行此法，尔等需口头重复你所听到的一切，尝试让你的发音尽可能地贴近原始声线。第一步是鹦鹉学舌（听完重复）。第二步是跟读（同步跟读）。这个方法必须要你确确实实地&lt;big&gt;大声&lt;/big&gt;读出来，才有效。&lt;/p&gt;

&lt;p&gt;In this method, you orally repeat everything that you hear, trying to sound just like the original speaker. First, you parrot (repeat) them. Then, you overshadow (speak at the same time) them. This method only works if you actually speak OUT LOUD.&lt;/p&gt;

&lt;p&gt;学舌最好配合纯正的（由真正的英文母语者编就的）且伴随有音频且内置字幕或台词脚本的英语材料。如：电影，电视节目（剧），广播，新闻网站，等等。只要他有音频加字幕或台本就行（最好内容别太长）。&lt;/p&gt;

&lt;p&gt;Parroting is best used with authentic English material (materials created by actual native speakers) with an audio component and subtitles or a script included. Movies, TV shows, podcasts, news websites, etc. As long as it has audio and a subtitle/script (and it&amp;rsquo;s not too long), you can use it.&lt;/p&gt;

&lt;p&gt;介绍下机理：&lt;/p&gt;

&lt;p&gt;This is how it works:&lt;/p&gt;

&lt;p&gt;选取你的教材，最好别太长（500单词以内）。闭上眼睛只听音频，尽你最大可能，能听懂多少算多少。接下来，读一下字幕或脚本。找一找不认识的单词和短语，查查词典，记住他们。&lt;/p&gt;

&lt;p&gt;Choose your material. It shouldn&amp;rsquo;t be too long (maximum of 500 words).
Close your eyes and just listen to the audio, trying to understand as much as possible.
Then, read the subtitles or script. Find words and phrases you don&amp;rsquo;t know, look them up in a dictionary, and take note of them.&lt;/p&gt;

&lt;p&gt;再接下来重复听音频，每句话之后暂停一下。重复演员说完的句子（学舌的部分）。重复多次，直到你可以熟练掌握。最后重复一遍，这次你与音频中的演员同时出声（同步跟读的部分）。这可能很难，所以你若有需要，可以重复多试几遍。最后的最后，回顾一下你所学的单词，当日的生词和词组可以放入单词本或手写卡里，一遍之后定期回顾。一天的工作就做完了。&lt;/p&gt;

&lt;p&gt;Then, replay the audio, pausing the audio after each sentence. Repeat after the speaker (parroting). Repeat many times until you get good at this.
Repeat the audio one last time, this time speaking at the same time as the speaker (overshadowing). This may be tough, so you can repeat this if you need to.
Review the learned words one last time. The new words and phrases from today can be put into flashcards that you review regularly. You are done for the day.&lt;/p&gt;

&lt;p&gt;有什么适用这个方法的资源素材呢？&lt;a href=&#34;http://englishclass101.com/&#34; target=&#34;_blank&#34;&gt;Englishclass101.com&lt;/a&gt; 网就使用了这个方法。（译注：喂喂，这是在打广告么？）你也可以用 5~10 分钟左右带字幕的油管视频。我衷心希望这个方法可以帮到您！&lt;/p&gt;

&lt;p&gt;Want some resources for this method? &lt;a href=&#34;http://englishclass101.com/&#34; target=&#34;_blank&#34;&gt;Englishclass101.com&lt;/a&gt; uses this method. You could also use 5-10 minute YouTube videos that include subtitles. I hope this method works for you!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Frontend Learning Note 3 - Vagrant, VM &amp; Shell</title>
      <link>https://qiansen1386.github.io/post/2016/04/frontend-learning-note-3</link>
      <pubDate>Sat, 09 Apr 2016 05:05:53 +0000</pubDate>
      
      <guid>https://qiansen1386.github.io/post/2016/04/frontend-learning-note-3</guid>
      <description>

&lt;h2 id=&#34;the-lesson-i-learnt&#34;&gt;The Lesson I Learnt&lt;/h2&gt;

&lt;h3 id=&#34;line-ending-issue&#34;&gt;Line-ending issue&lt;/h3&gt;

&lt;p&gt;Make sure the line ending of your provision script is LF-only(unix-style), otherwise the behaviors would be very unpredictable.
Unwated &lt;code&gt;\r&lt;/code&gt; will appears everywhere during &lt;code&gt;vagrant up&lt;/code&gt;&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;scripts-heading&#34;&gt;scripts heading&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;#!/bin/bash&lt;/code&gt; is not omissible. Of course, you can use &lt;code&gt;#!/bin/sh&lt;/code&gt; or &lt;code&gt;#!/bin/zsh&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;symlinks-are-huge-problem&#34;&gt;Symlinks are huge problem!&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/npm/npm/issues/7308&#34; target=&#34;_blank&#34;&gt;npm-issues#7308&lt;/a&gt; =&amp;gt; Symlinks within shared folder could not be sync between Win and Posix OS. However many NPM packages would like to create bin-links(symlinks of executable file within bin folder). So whenever you tried to install some packages, it is very likely to fail. So there are 3 potential solutions: 1. try to make it work by proper config virtualbox. 2. Move the node_modules out of synced-folder. 3. use &lt;code&gt;--no-bin-links&lt;/code&gt; flag for &lt;code&gt;npm install&lt;/code&gt;.
Let me just reveal the final answer. Only No.3 works, with side-effect though.&lt;/p&gt;

&lt;p&gt;Firstly, there is script provided by &lt;a href=&#34;https://github.com/drmyersii&#34; target=&#34;_blank&#34;&gt;drmyersii&lt;/a&gt;(The author of &lt;a href=&#34;https://github.com/drmyersii/vagrant-node-env&#34; target=&#34;_blank&#34;&gt;vagrant-node-env&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Ruby&#34;&gt;config.vm.provider &amp;quot;virtualbox&amp;quot; do |v|
    v.customize [&amp;quot;setextradata&amp;quot;, :id, &amp;quot;VBoxInternal2/SharedFoldersEnableSymlinksCreate/vagrant&amp;quot;, &amp;quot;1&amp;quot;]
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It doesn&amp;rsquo;t work at least for Windows 7 Host. I didn&amp;rsquo;t investigated further, due to tied schedule. You can try it if you want, I&amp;rsquo;d like to know if it works on you :P&lt;/p&gt;

&lt;p&gt;Then, I tried to created a &lt;code&gt;node_modules/&lt;/code&gt; folder under &lt;code&gt;/tmp/&lt;/code&gt;, but another unexpected issue supprised me. &lt;a href=&#34;https://github.com/npm/npm/issues/10013&#34; target=&#34;_blank&#34;&gt;npm-issue#10013&lt;/a&gt; It turns out the NPM 3 introduced some special checks, causing the breaks of &lt;code&gt;npm install&lt;/code&gt;. If npm fixed this in further versions, or if you can roll back to a ealier version, It could be the best choice. With no side effects, and can be easily setup using provision scripts. I would continue following on.&lt;/p&gt;

&lt;p&gt;The end, I am afraid that I have to go for the &lt;code&gt;--no-bin-links&lt;/code&gt; approach. Em, that means there will be no more bin links. peroid. That would make cli operations much more undesirable. If you need those short-cuts, try to install them globally as well. So that when you call them, the global version can still response to u. Dirty, but works.&lt;/p&gt;

&lt;h3 id=&#34;ruby&#34;&gt;Ruby&lt;/h3&gt;

&lt;p&gt;Nothing to share, just to show off how I learnt a new language! (@ beginer level..) Ruby is like PHP, lovers love it, haters hate it. I love PHP, but I hate Ruby at the first place. Its unique syntax caused me so many frustration. To be clear, it is my problem, not Ruby&amp;rsquo;s. Because I am not only new to it, but also too anxious. Whereas, Ruby&amp;rsquo;s syntax is so distinctive(also complicated). But hey, I tried it, and it was fun when I start to get it! I didn&amp;rsquo;t get chance to practice &lt;code&gt;Metaprogramming&lt;/code&gt; much. What I can still tell is, the syntax suger is super handy. On the other hand, it is not as terse as golang/python, meaning that there is still a significant learning curve for coder who use other languages.&lt;/p&gt;

&lt;h3 id=&#34;vim&#34;&gt;Vim&lt;/h3&gt;

&lt;p&gt;Whenever I used my mouse cursor, it will entry the &lt;code&gt;VISUAL&lt;/code&gt; mode. However, all I wanted is just use the terminal&amp;rsquo;s build-in copy-paste feature. The bottom line is: I managed to prevent that by creating a &lt;code&gt;.vimrc&lt;/code&gt; file under my &lt;code&gt;~/&lt;/code&gt; home folder with a special setting &lt;code&gt;set mouse=r&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;time-for-referances&#34;&gt;Time for Referances&lt;/h2&gt;

&lt;h3 id=&#34;vagrant&#34;&gt;Vagrant&lt;/h3&gt;

&lt;h3 id=&#34;vim-1&#34;&gt;VIM&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://nvie.com/posts/how-i-boosted-my-vim/&#34; target=&#34;_blank&#34;&gt;How I boosted my Vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.openvim.com/&#34; target=&#34;_blank&#34;&gt;Learn VIM interactively with openvim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.makeuseof.com/tag/5-things-need-put-vim-config-file/&#34; target=&#34;_blank&#34;&gt;Vim Is Awesome: Make It Better With These 5 Customizations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;virtualbox-ubuntu&#34;&gt;VirtualBox + Ubuntu&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;I think the best developer OS for me by far is Ubuntu. Fedora is not so popular and quirk in some ways. Deepin is bueatiful but slow and sometimes not so reliable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://thomas.vanhoutte.be/miniblog/guide-speed-up-ubuntu-virtualbox/&#34; target=&#34;_blank&#34;&gt;Speed up Ubuntu on VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Frontend Learning Notes 2 - Direction Shifted</title>
      <link>https://qiansen1386.github.io/post/2016/04/frontend-learning-note-2</link>
      <pubDate>Sun, 03 Apr 2016 16:40:00 +0000</pubDate>
      
      <guid>https://qiansen1386.github.io/post/2016/04/frontend-learning-note-2</guid>
      <description>

&lt;h2 id=&#34;my-confession&#34;&gt;My Confession&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Only the ignorant person fears nothing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I gotta say that I was way too over ambitious about the frontend stack. When companys like Google and Mozilla start to push the standardization of new innovations of the Web. The frontend standards keeps changing everyday, so does the Toolchain. Chasing the tool could be harmful, so I realised a realistic learning plan could be more benificial for me.
After a few days of extensive research, my mind changed. The more I learn, I become less bold, so that I become more and more eager for a shorter learning curve. Compareing with &amp;ldquo;Flawless on paper&amp;rdquo;, I prefer a more practical stack.
Here is what I learnt:&lt;/p&gt;

&lt;h3 id=&#34;postcss-scss&#34;&gt;&lt;code&gt;PostCSS&lt;/code&gt; =&amp;gt; &lt;code&gt;SCSS&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;I know the PostCSS is the future, and CssNext/preCss plugins appears like a great replacement of Scss. Also according to Boostrap &amp;amp; many others SCSS is way better than LESS. But then I find that if I want to custom and build Boostrap, I have to import SCSS anyway. So SCSS+Autoprefixer beat my original ideal buy ignorant plan.&lt;/p&gt;

&lt;h3 id=&#34;build-tool-module-bundler&#34;&gt;Build Tool &amp;amp; Module Bundler&lt;/h3&gt;

&lt;p&gt;There is a little bit backgound I have learnt.
- &lt;a href=&#34;http://gulpjs.com/&#34; target=&#34;_blank&#34;&gt;gulp&lt;/a&gt; beats &lt;a href=&#34;http://gruntjs.com/&#34; target=&#34;_blank&#34;&gt;grunt&lt;/a&gt;.
- &lt;a href=&#34;https://webpack.github.io&#34; target=&#34;_blank&#34;&gt;Webpack&lt;/a&gt; beats &lt;a href=&#34;http://gbrowserify.org&#34; target=&#34;_blank&#34;&gt;browserify&lt;/a&gt; beats &lt;a href=&#34;http://grequirejs.org&#34; target=&#34;_blank&#34;&gt;RequireJS&lt;/a&gt;.
- &lt;del&gt;With the viral of &lt;code&gt;NodeJS&lt;/code&gt;, &lt;code&gt;CommonJs&lt;/code&gt; becomes the de facto standard importing syntax(I believe). It Beats AMD, CMD and otheres, moreover &lt;code&gt;ES6 module&lt;/code&gt; is compatiable with it, so it is also future-proof.&lt;/del&gt;(Completely Wrong&amp;hellip;explained below)
- Webpack is capable to do some jobs of gulp.&lt;/p&gt;

&lt;p&gt;I was thinking of using gulp + webpack. But since nowadays, webpack have plenty of plugins and loaders, and most importantly, I found at least 2 boostrap-loaders which claims that they can process Boostrap v4. I can simply say good bye to Gulp. &lt;em&gt;I might meet you again, don&amp;rsquo;t know why, don&amp;rsquo;t know when, but I might meet you again some other day~&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Webpack can minify Js, provide source map for dev stage, build SCSS, build typescript, build Vue/JSX, build Boostrap, include jQuery support without expose global access to it, process PostCSS(Autoprefixer), custom the dist path, watch the dev folder, live-reload. What else do you need? What else do you need? What else do you need?&lt;/p&gt;

&lt;h3 id=&#34;keep-practicing&#34;&gt;Keep Practicing&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;It is the only way to reveal the imperfection of your tool and to pursue perfection of understanding at the same time!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before practise, you won&amp;rsquo;t know if the tool is gonna suit your needs.
That is exactly why I dropped the semantic UI, because it follows &amp;ldquo;&lt;em&gt;Convention over Configuation&lt;/em&gt;&amp;rdquo;, so it has to sacrifice &amp;ldquo;&lt;em&gt;Explicit is better than implicit&lt;/em&gt;&amp;ldquo;&lt;small&gt;*Refering to &lt;a href=&#34;https://www.python.org/dev/peps/pep-0020/&#34; target=&#34;_blank&#34;&gt;The Zen of Python&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Before practise, you won&amp;rsquo;t know NodeJS have many dependency issue with Windows platform, so the &lt;code&gt;Vagrant&lt;/code&gt; become mandatory! no longer &lt;em&gt;Good to have&lt;/em&gt;. That is a good thing also, If I could compose my &lt;code&gt;Vagrantfile&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Nevertheless, this is absolutely worth our attention. However, it is neither stable nor mature. &lt;a href=&#34;https://blogs.windows.com/buildingapps/2016/03/30/run-bash-on-ubuntu-on-windows/&#34; target=&#34;_blank&#34;&gt;https://blogs.windows.com/buildingapps/2016/03/30/run-bash-on-ubuntu-on-windows/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;again-references&#34;&gt;Again, references&lt;/h2&gt;

&lt;h3 id=&#34;nodejs&#34;&gt;NodeJS:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/pU9Q6oiQNd0&#34; target=&#34;_blank&#34;&gt;What is Node.js Exactly? - a beginners introduction to Nodejs(YouTube)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/HkFlM73G-hk?list=PLoYCgNOIyGABs-wDaaxChu82q_xQgUb4f&#34; target=&#34;_blank&#34;&gt;Modular Javascript - Javascript Tutorial on the Object Literal Pattern(YouTube)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;webpack&#34;&gt;WebPack:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/TaWKUpahFZM&#34; target=&#34;_blank&#34;&gt;Getting Started with webpack(YouTube)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/9kJVYpOqcVU&#34; target=&#34;_blank&#34;&gt;Webpack Tutorial - Replace Gulp/Grunt plugins with a single tool(YouTube)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/vajoy/p/4650467.html&#34; target=&#34;_blank&#34;&gt;一小时包教会 —— webpack 入门指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zhuanlan.zhihu.com/p/20367175&#34; target=&#34;_blank&#34;&gt;Webpack傻瓜式指南（一）- 张轩(知乎)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zhuanlan.zhihu.com/p/20367175&#34; target=&#34;_blank&#34;&gt;Webpack傻瓜指南（二）开发和部署技巧- 张轩(知乎)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;vue&#34;&gt;Vue:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://vuejs.org/guide/&#34; target=&#34;_blank&#34;&gt;Getting Started - vue.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://vuejs.org.cn/guide/&#34; target=&#34;_blank&#34;&gt;VueJs 官方指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://vuex.vuejs.org/zh-cn/quickstart.html&#34; target=&#34;_blank&#34;&gt;Vuex 官方指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://router.vuejs.org/zh-cn/basic.html&#34; target=&#34;_blank&#34;&gt;Vue-router 官方指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sally-xiao.gitbooks.io/book/content/index.html&#34; target=&#34;_blank&#34;&gt;如何用Vue.js来搭建一个简易的APP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;vagrant&#34;&gt;Vagrant:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/Dji9ALCgfpM&#34; target=&#34;_blank&#34;&gt;Ruby Programming in One Video(Youtube)&lt;/a&gt;: In one video series is great for syntax-learning.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.vagrantup.com/docs/&#34; target=&#34;_blank&#34;&gt;VAGRANT DOCUMENTATION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/drmyersii/vagrant-node-env&#34; target=&#34;_blank&#34;&gt;vagrant-node-env(Github)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/laravel/homestead&#34; target=&#34;_blank&#34;&gt;laravel/homestead(Github)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;page-load-effect&#34;&gt;Page Load Effect:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://javascript.nwbox.com/ContentLoaded/&#34; target=&#34;_blank&#34;&gt;ContentLoaded(2010)&lt;/a&gt; A page load library,used by webpack.github.io&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codyhouse.co/gem/animated-page-transition/&#34; target=&#34;_blank&#34;&gt;Animated page trasition&lt;/a&gt; Worth investigation&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/browserstate/history.js&#34; target=&#34;_blank&#34;&gt;History.js&lt;/a&gt; Need no introduction&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.fasw.ws/faswwp/non-jquery-page-transitions-lightweight/&#34; target=&#34;_blank&#34;&gt;Non-Jquery Page Transitions lightweight&lt;/a&gt; A great proof of concept&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://turbo-react.herokuapp.com/&#34; target=&#34;_blank&#34;&gt;TurboReact&lt;/a&gt; A react based implementation&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/turbolinks/turbolinks&#34; target=&#34;_blank&#34;&gt;Turbolinks&lt;/a&gt; extraction of above solution, the best library to use by far&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;corrigendum&#34;&gt;Corrigendum&lt;/h2&gt;

&lt;h3 id=&#34;es6-modules-is-not-an-official-recognition-of-commonjs&#34;&gt;ES6 Modules is not an official recognition of CommonJS&lt;/h3&gt;

&lt;p&gt;ECMAScript 6 modules is a completely different thing, comparing with &lt;code&gt;CommonJs&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First of all, ES6 Modules are statically loaded!!!!&lt;/li&gt;
&lt;li&gt;Then It requires all the dependencies to be fully imported at the beginning.&lt;/li&gt;
&lt;li&gt;So that the tricks like &lt;code&gt;tree-shaking&lt;/code&gt; becomes possible. (AST parsing becomes much more effient and easy)&lt;/li&gt;
&lt;li&gt;There is performance improvement as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Can&amp;rsquo;t believe how assertive I was.&lt;/p&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.2ality.com/2014/09/es6-modules-final.html&#34; target=&#34;_blank&#34;&gt;ECMAScript 6 modules: the final syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.2ality.com/2015/12/webpack-tree-shaking.html&#34; target=&#34;_blank&#34;&gt;Tree-shaking with webpack 2 and Babel 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rollupjs.org/&#34; target=&#34;_blank&#34;&gt;Rollup.js - The next-generation JavaScript module bundler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/41922432/answer/93346223&#34; target=&#34;_blank&#34;&gt;如何评价 Webpack 2 新引入的 Tree-shaking 代码优化技术？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://benjamn.github.io/empirenode-2015&#34; target=&#34;_blank&#34;&gt;The Importance of import and export by Ben Newman on EmpireNode 2015 &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Meg Jay: Why 30 is not the new 20</title>
      <link>https://qiansen1386.github.io/post/2016/03/why-30-is-not-the-new-20</link>
      <pubDate>Thu, 17 Mar 2016 05:52:09 +0000</pubDate>
      
      <guid>https://qiansen1386.github.io/post/2016/03/why-30-is-not-the-new-20</guid>
      <description>&lt;p&gt;YouTube 好视频分享。（原视频是李开复（Kaifu Lee）分享在Twitter的。）
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/-GG1rYgGJao&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;视频简介：
臨床心理學家 Meg Jay 提供二十歲的新世代年輕人一則的訊息：不同於一般觀點，你的二十歲人生並非無足輕重的十年。Jay在這場引人入勝的演講中說，儘管婚姻、工作及孩子是之後的事，不代表你不能現在就開始規劃。她提出三項建議，告訴二十多歲的年輕人該如何掌握人生中決定性的十年。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Frontend Learning Notes - Starting Point</title>
      <link>https://qiansen1386.github.io/post/2016/03/frontend-learning-note-1</link>
      <pubDate>Wed, 16 Mar 2016 07:03:51 +0000</pubDate>
      
      <guid>https://qiansen1386.github.io/post/2016/03/frontend-learning-note-1</guid>
      <description>

&lt;p&gt;Recently, I have migrated to Hugo Site generator as you can see. I was pretty disappointed with most of the theme.
Even those great themes seem to have flaws, or require customization. And then I thought, if none of the theme is perfect
for me, why not craft one by my own. Since I always been fascinated by the frontend development, I take it as a
oppertunaty to bring my frontend skill sets to another level.&lt;/p&gt;

&lt;p&gt;So I created the stupid &lt;a href=&#34;github.com/qiansen1386/hugo-polygon-theme&#34; target=&#34;_blank&#34;&gt;hugo-polygon-theme&lt;/a&gt;. I have got to say, the name is pretty arbitrary.
Even worse, I don&amp;rsquo;t have a clue even after I started. I start to realised that I need to have more input before I make an output.
Hence, I started my long-term(supposed to be) voyage. Here are the resources that absolutely worth more attention.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Some of the resources are written in Chinese. Sorry for the inconvenience, coz those materials are slightly easier for me to understand.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;html5&#34;&gt;HTML5:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://html5boilerplate.com/&#34; target=&#34;_blank&#34;&gt;H5 boilerplate&lt;/a&gt; (Html5 boilerplate)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/h5bp/html5-boilerplate/blob/5.3.0/dist/doc/usage.md&#34; target=&#34;_blank&#34;&gt;H5 boilerplate Docs&lt;/a&gt; (Html5 boilerplate)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.initializr.com/builder?print&amp;amp;h5bp-content&amp;amp;modernizr&amp;amp;h5bp-chromeframe&amp;amp;h5bp-analytics&amp;amp;h5bp-favicon&amp;amp;h5bp-robots&amp;amp;h5bp-humans&amp;amp;h5bp-404&amp;amp;h5bp-adobecrossdomain&amp;amp;h5bp-css&amp;amp;h5bp-csshelpers&amp;amp;h5bp-mediaqueryprint&amp;amp;h5bp-mediaqueries&amp;amp;simplehtmltag&amp;amp;izr-emptyscript&#34; title=&#34;H5 boilerplate my custom build (a minimized version)&#34; target=&#34;_blank&#34;&gt;H5 boilerplate my custom build (a minimized version)&lt;/a&gt; (Html5 boilerplate)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;css&#34;&gt;CSS:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://semantic-ui.com/&#34; target=&#34;_blank&#34;&gt;Semantic UI&lt;/a&gt; (LESS)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://davidtheclark.com/excited-about-postcss/&#34; target=&#34;_blank&#34;&gt;Excited about postcss &amp;ndash; DAVID CLARK&lt;/a&gt; (PostCSS)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://benfrain.com/breaking-up-with-sass-postcss/&#34; target=&#34;_blank&#34;&gt;Breaking up with Sass: it’s not you, it’s me &amp;ndash; Ben Frain&lt;/a&gt; (PostCSS)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://twin.github.io/css-preprocessing-drama/&#34; target=&#34;_blank&#34;&gt;CSS Preprocessing Drama&lt;/a&gt; (PostCSS)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ai/about-postcss/blob/master/speech.md&#34; target=&#34;_blank&#34;&gt;Speech of &amp;ldquo;About-postcss&amp;rdquo; &amp;ndash; AI&lt;/a&gt; (PostCSS)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ashleynolan.co.uk/blog/postcss-a-review&#34; target=&#34;_blank&#34;&gt;PostCSS – Sass Killer or Preprocessing Pretender?&lt;/a&gt; (PostCSS)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://learnlayout.com/&#34; target=&#34;_blank&#34;&gt;Learn CSS Layout(I18N-provided)&lt;/a&gt; (CSS fundamentals)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://itmyhome.gitbooks.io/css/content/&#34; target=&#34;_blank&#34;&gt;CSS 编码规范&lt;/a&gt; (CSS fundamentals)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://arguseye.gitbooks.io/postcss/content/plugins.html&#34; target=&#34;_blank&#34;&gt;PostCSS的相关知识&lt;/a&gt; (PostCSS)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;js&#34;&gt;JS:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://davidbcalhoun.com/2014/what-is-amd-commonjs-and-umd/&#34; target=&#34;_blank&#34;&gt;What Is AMD, CommonJS, and UMD?&lt;/a&gt; (Loading)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/TypeScript&#34; target=&#34;_blank&#34;&gt;TypeScript &amp;ndash;维基百科&lt;/a&gt; (TypeScript)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/smartkid/archive/2012/10/05/A_First_Look_Of_TypeScript.html&#34; target=&#34;_blank&#34;&gt;Typescript 初体验&lt;/a&gt; (TypeScript)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhongsp.gitbooks.io/typescript-handbook/content/&#34; target=&#34;_blank&#34;&gt;TypeScript Handbook（中文版）&lt;/a&gt; (TypeScript)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.75team.com/archives/882&#34; target=&#34;_blank&#34;&gt;[译]神马是AMD, CommonJS, UMD?&lt;/a&gt; (Translation of &amp;ldquo;What Is AMD, CommonJS, and UMD?&amp;rdquo;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;best-practics&#34;&gt;Best Practics&lt;/h3&gt;

&lt;p&gt;-&lt;a href=&#34;http://xiaodongtongxue.github.io/2016/03/21/Web%E5%89%8D%E7%AB%AF%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/&#34; target=&#34;_blank&#34;&gt;HTML5、CSS3、ES6编程规范 by 小栋同学&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Recursion-Demo in TypeScript &amp; How it get better</title>
      <link>https://qiansen1386.github.io/post/2016/03/recursion-demo-in-typescript</link>
      <pubDate>Mon, 07 Mar 2016 10:41:06 +0000</pubDate>
      
      <guid>https://qiansen1386.github.io/post/2016/03/recursion-demo-in-typescript</guid>
      <description>&lt;p&gt;I wrote this to practice of TypeScript and also to demonstrate recursion to my friend. This is a little challenge sent to me by one of my friend who is self-learning python, and recursion at the same time. Basically is about to keep removing all the elements whichever index is odd from the array, till there is only one left, and return the index of the survivor. Input the &lt;strong&gt;N&lt;/strong&gt; of elements and output the index &lt;strong&gt;X&lt;/strong&gt;.&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;500&#34; src=&#34;//jsfiddle.net/qiansen1386/yLdr5082/embedded/js,html,result/&#34; allowfullscreen=&#34;allowfullscreen&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Before I wrote this, I already know it is the dummiest(also most reliable) solution. Basically, it waste both Ram and execution time. There is no human-intelligence involved so far, just pure brute-force method which straight away simulate the whole process and return its predicting result. Just it is not really a prediction, but just a simulation&amp;hellip; After I observe the result, I laughed. What a dumb question, and I can&amp;rsquo;t believe how silly I am, LOL.&lt;/p&gt;

&lt;p&gt;Let put the result away first, and take a little bit time to look at the big O. Accoding to my code, The O is in the range &lt;code&gt;log2(n-1)&amp;lt;O&amp;lt;=log2(n)&lt;/code&gt;. Classic! Now, if you notice, the result is always the greatest &lt;code&gt;2^n&lt;/code&gt; which does not exceed the &lt;strong&gt;n&lt;/strong&gt;. we can change the algorithm to a simplier formula:&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;500&#34; src=&#34;//jsfiddle.net/qiansen1386/zvLu7re5/embedded/js,html,result/&#34; allowfullscreen=&#34;allowfullscreen&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;What is the O? Actually it&amp;rsquo;s still almost the same, the performance and amount of code have improved though.
What is the ultmate solution, use one calculation, the ultmate O(1) solution:&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;500&#34; src=&#34;//jsfiddle.net/qiansen1386/cvasL16t/embedded/js,html,result/&#34; allowfullscreen=&#34;allowfullscreen&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt; 

&lt;p&gt;That&amp;rsquo;s it! How silly I am&amp;hellip; But I am so happy about it.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>